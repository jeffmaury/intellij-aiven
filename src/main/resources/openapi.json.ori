{
  "components": {
    "schemas": {
      "AccountAuthenticationMethodCreateRequestBody": {
        "type": "object",
        "description": "AccountAuthenticationMethodCreateRequestBody",
        "properties": {
          "authentication_method_name": {
            "type": "string",
            "description": "Authentication Method Name",
            "maxLength": 128
          },
          "authentication_method_type": {
            "type": "string",
            "description": "Authentication method type",
            "enum": [
              "internal",
              "saml"
            ]
          },
          "auto_join_team_id": {
            "type": "string",
            "description": "Automatically add users to a team, when user signs up using this authentication method",
            "maxLength": 32
          },
          "saml_assertion_signed_enabled": {
            "type": "boolean",
            "description": "Set to 'true' to enable WantAssertionsSigned"
          },
          "saml_authn_requests_signed_enabled": {
            "type": "boolean",
            "description": "Set to 'true' to enable AuthnRequestsSigned"
          },
          "saml_certificate": {
            "type": "string",
            "description": "Identity provider's certificate",
            "maxLength": 16384
          },
          "saml_digest_algorithm": {
            "type": "string",
            "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
            "enum": [
              "sha1",
              "sha256",
              "sha384",
              "sha512"
            ]
          },
          "saml_entity_id": {
            "type": "string",
            "description": "Saml Entity ID",
            "maxLength": 2048
          },
          "saml_field_mapping": {
            "type": "object",
            "description": "SAMLFieldMapping",
            "properties": {
              "email": {
                "type": "string",
                "description": "Field name for user email",
                "maxLength": 256
              },
              "first_name": {
                "type": "string",
                "description": "Field name for user's first name",
                "maxLength": 256
              },
              "identity": {
                "type": "string",
                "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                "maxLength": 256
              },
              "last_name": {
                "type": "string",
                "description": "Field name for user's lastname",
                "maxLength": 256
              },
              "real_name": {
                "type": "string",
                "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                "maxLength": 256
              }
            }
          },
          "saml_idp_login_allowed": {
            "type": "boolean",
            "description": "Set to 'true' to enable IdP initiated login"
          },
          "saml_idp_url": {
            "type": "string",
            "description": "Saml Idp Url",
            "maxLength": 2048
          },
          "saml_requested_authn_context_enabled": {
            "type": "boolean",
            "description": "Set to 'false' to disable RequestedAuthnContext"
          },
          "saml_signature_algorithm": {
            "type": "string",
            "description": "SAMLSignatureAlgorithm",
            "enum": [
              "rsa-sha1",
              "dsa-sha1",
              "rsa-sha256",
              "rsa-sha384",
              "rsa-sha512"
            ]
          },
          "saml_variant": {
            "type": "string",
            "description": "SAMLVariant",
            "enum": [
              "adfs"
            ]
          }
        },
        "required": [
          "authentication_method_name",
          "authentication_method_type"
        ]
      },
      "AccountAuthenticationMethodCreateResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodCreateResponse",
        "properties": {
          "authentication_method": {
            "type": "object",
            "description": "AuthenticationMethod",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "authentication_method_enabled": {
                "type": "boolean",
                "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
              },
              "authentication_method_id": {
                "type": "string",
                "description": "Authentication Method ID"
              },
              "authentication_method_name": {
                "type": "string",
                "description": "Authentication Method Name",
                "maxLength": 128
              },
              "authentication_method_type": {
                "type": "string",
                "description": "Authentication method type",
                "enum": [
                  "internal",
                  "saml"
                ]
              },
              "auto_join_team_id": {
                "type": "string",
                "description": "Automatically add users to a team, when user signs up using this authentication method",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "saml_acs_url": {
                "type": "string",
                "description": "Saml Acs Url",
                "maxLength": 2048
              },
              "saml_assertion_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable WantAssertionsSigned"
              },
              "saml_authn_requests_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable AuthnRequestsSigned"
              },
              "saml_cert": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": [
                  "adfs"
                ]
              },
              "saml_certificate": {
                "type": "string",
                "description": "Identity provider's certificate",
                "maxLength": 16384
              },
              "saml_certificate_issuer": {
                "type": "string",
                "description": "Saml Certificate Issuer"
              },
              "saml_certificate_not_valid_after": {
                "type": "string",
                "description": "Saml Certificate Not Valid After",
                "maxLength": 36
              },
              "saml_certificate_not_valid_before": {
                "type": "string",
                "description": "Saml Certificate Not Valid Before",
                "maxLength": 36
              },
              "saml_certificate_subject": {
                "type": "string",
                "description": "Saml Certificate Subject"
              },
              "saml_digest_algorithm": {
                "type": "string",
                "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
                "enum": [
                  "sha1",
                  "sha256",
                  "sha384",
                  "sha512"
                ]
              },
              "saml_entity_id": {
                "type": "string",
                "description": "Saml Entity ID",
                "maxLength": 2048
              },
              "saml_field_mapping": {
                "type": "object",
                "description": "SAMLFieldMapping",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Field name for user email",
                    "maxLength": 256
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Field name for user's first name",
                    "maxLength": 256
                  },
                  "identity": {
                    "type": "string",
                    "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                    "maxLength": 256
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Field name for user's lastname",
                    "maxLength": 256
                  },
                  "real_name": {
                    "type": "string",
                    "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                    "maxLength": 256
                  }
                }
              },
              "saml_idp_login_allowed": {
                "type": "boolean",
                "description": "Set to 'true' to enable IdP initiated login"
              },
              "saml_idp_url": {
                "type": "string",
                "description": "Saml Idp Url",
                "maxLength": 2048
              },
              "saml_metadata_url": {
                "type": "string",
                "description": "Saml Metadata Url",
                "maxLength": 2048
              },
              "saml_requested_authn_context_enabled": {
                "type": "boolean",
                "description": "Set to 'false' to disable RequestedAuthnContext"
              },
              "saml_signature_algorithm": {
                "type": "string",
                "description": "SAMLSignatureAlgorithm",
                "enum": [
                  "rsa-sha1",
                  "dsa-sha1",
                  "rsa-sha256",
                  "rsa-sha384",
                  "rsa-sha512"
                ]
              },
              "saml_sp_certificate": {
                "type": "string",
                "description": "Saml Sp Certificate",
                "maxLength": 16384
              },
              "saml_variant": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": [
                  "adfs"
                ]
              },
              "state": {
                "type": "string",
                "description": "AuthenticationMethodState",
                "enum": [
                  "active",
                  "deleted",
                  "pending_configuration"
                ]
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "authentication_method_enabled",
              "authentication_method_id",
              "authentication_method_type",
              "auto_join_team_id",
              "create_time",
              "delete_time",
              "state",
              "update_time"
            ]
          }
        },
        "required": [
          "authentication_method"
        ]
      },
      "AccountAuthenticationMethodDeleteResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodDeleteResponse",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message field"
          }
        },
        "required": [
          "message"
        ]
      },
      "AccountAuthenticationMethodGetResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodGetResponse",
        "properties": {
          "authentication_method": {
            "type": "object",
            "description": "AuthenticationMethod",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "authentication_method_enabled": {
                "type": "boolean",
                "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
              },
              "authentication_method_id": {
                "type": "string",
                "description": "Authentication Method ID"
              },
              "authentication_method_name": {
                "type": "string",
                "description": "Authentication Method Name",
                "maxLength": 128
              },
              "authentication_method_type": {
                "type": "string",
                "description": "Authentication method type",
                "enum": [
                  "internal",
                  "saml"
                ]
              },
              "auto_join_team_id": {
                "type": "string",
                "description": "Automatically add users to a team, when user signs up using this authentication method",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "saml_acs_url": {
                "type": "string",
                "description": "Saml Acs Url",
                "maxLength": 2048
              },
              "saml_assertion_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable WantAssertionsSigned"
              },
              "saml_authn_requests_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable AuthnRequestsSigned"
              },
              "saml_cert": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": [
                  "adfs"
                ]
              },
              "saml_certificate": {
                "type": "string",
                "description": "Identity provider's certificate",
                "maxLength": 16384
              },
              "saml_certificate_issuer": {
                "type": "string",
                "description": "Saml Certificate Issuer"
              },
              "saml_certificate_not_valid_after": {
                "type": "string",
                "description": "Saml Certificate Not Valid After",
                "maxLength": 36
              },
              "saml_certificate_not_valid_before": {
                "type": "string",
                "description": "Saml Certificate Not Valid Before",
                "maxLength": 36
              },
              "saml_certificate_subject": {
                "type": "string",
                "description": "Saml Certificate Subject"
              },
              "saml_digest_algorithm": {
                "type": "string",
                "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
                "enum": [
                  "sha1",
                  "sha256",
                  "sha384",
                  "sha512"
                ]
              },
              "saml_entity_id": {
                "type": "string",
                "description": "Saml Entity ID",
                "maxLength": 2048
              },
              "saml_field_mapping": {
                "type": "object",
                "description": "SAMLFieldMapping",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Field name for user email",
                    "maxLength": 256
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Field name for user's first name",
                    "maxLength": 256
                  },
                  "identity": {
                    "type": "string",
                    "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                    "maxLength": 256
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Field name for user's lastname",
                    "maxLength": 256
                  },
                  "real_name": {
                    "type": "string",
                    "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                    "maxLength": 256
                  }
                }
              },
              "saml_idp_login_allowed": {
                "type": "boolean",
                "description": "Set to 'true' to enable IdP initiated login"
              },
              "saml_idp_url": {
                "type": "string",
                "description": "Saml Idp Url",
                "maxLength": 2048
              },
              "saml_metadata_url": {
                "type": "string",
                "description": "Saml Metadata Url",
                "maxLength": 2048
              },
              "saml_requested_authn_context_enabled": {
                "type": "boolean",
                "description": "Set to 'false' to disable RequestedAuthnContext"
              },
              "saml_signature_algorithm": {
                "type": "string",
                "description": "SAMLSignatureAlgorithm",
                "enum": [
                  "rsa-sha1",
                  "dsa-sha1",
                  "rsa-sha256",
                  "rsa-sha384",
                  "rsa-sha512"
                ]
              },
              "saml_sp_certificate": {
                "type": "string",
                "description": "Saml Sp Certificate",
                "maxLength": 16384
              },
              "saml_variant": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": [
                  "adfs"
                ]
              },
              "state": {
                "type": "string",
                "description": "AuthenticationMethodState",
                "enum": [
                  "active",
                  "deleted",
                  "pending_configuration"
                ]
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "authentication_method_enabled",
              "authentication_method_id",
              "authentication_method_type",
              "auto_join_team_id",
              "create_time",
              "delete_time",
              "state",
              "update_time"
            ]
          }
        },
        "required": [
          "authentication_method"
        ]
      },
      "AccountAuthenticationMethodUpdateRequestBody": {
        "type": "object",
        "description": "AccountAuthenticationMethodUpdateRequestBody",
        "properties": {
          "authentication_method_enabled": {
            "type": "boolean",
            "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
          },
          "authentication_method_name": {
            "type": "string",
            "description": "Authentication Method Name",
            "maxLength": 128
          },
          "auto_join_team_id": {
            "type": "string",
            "description": "Automatically add users to a team, when user signs up using this authentication method",
            "maxLength": 32
          },
          "saml_assertion_signed_enabled": {
            "type": "boolean",
            "description": "Set to 'true' to enable WantAssertionsSigned"
          },
          "saml_authn_requests_signed_enabled": {
            "type": "boolean",
            "description": "Set to 'true' to enable AuthnRequestsSigned"
          },
          "saml_certificate": {
            "type": "string",
            "description": "Identity provider's certificate",
            "maxLength": 16384
          },
          "saml_digest_algorithm": {
            "type": "string",
            "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
            "enum": [
              "sha1",
              "sha256",
              "sha384",
              "sha512"
            ]
          },
          "saml_entity_id": {
            "type": "string",
            "description": "Saml Entity ID",
            "maxLength": 2048
          },
          "saml_field_mapping": {
            "type": "object",
            "description": "SAMLFieldMapping",
            "properties": {
              "email": {
                "type": "string",
                "description": "Field name for user email",
                "maxLength": 256
              },
              "first_name": {
                "type": "string",
                "description": "Field name for user's first name",
                "maxLength": 256
              },
              "identity": {
                "type": "string",
                "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                "maxLength": 256
              },
              "last_name": {
                "type": "string",
                "description": "Field name for user's lastname",
                "maxLength": 256
              },
              "real_name": {
                "type": "string",
                "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                "maxLength": 256
              }
            }
          },
          "saml_idp_login_allowed": {
            "type": "boolean",
            "description": "Set to 'true' to enable IdP initiated login"
          },
          "saml_idp_url": {
            "type": "string",
            "description": "Saml Idp Url",
            "maxLength": 2048
          },
          "saml_requested_authn_context_enabled": {
            "type": "boolean",
            "description": "Set to 'false' to disable RequestedAuthnContext"
          },
          "saml_signature_algorithm": {
            "type": "string",
            "description": "SAMLSignatureAlgorithm",
            "enum": [
              "rsa-sha1",
              "dsa-sha1",
              "rsa-sha256",
              "rsa-sha384",
              "rsa-sha512"
            ]
          },
          "saml_variant": {
            "type": "string",
            "description": "SAMLVariant",
            "enum": [
              "adfs"
            ]
          }
        }
      },
      "AccountAuthenticationMethodUpdateResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodUpdateResponse",
        "properties": {
          "authentication_method": {
            "type": "object",
            "description": "AuthenticationMethod",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "authentication_method_enabled": {
                "type": "boolean",
                "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
              },
              "authentication_method_id": {
                "type": "string",
                "description": "Authentication Method ID"
              },
              "authentication_method_name": {
                "type": "string",
                "description": "Authentication Method Name",
                "maxLength": 128
              },
              "authentication_method_type": {
                "type": "string",
                "description": "Authentication method type",
                "enum": [
                  "internal",
                  "saml"
                ]
              },
              "auto_join_team_id": {
                "type": "string",
                "description": "Automatically add users to a team, when user signs up using this authentication method",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Create Time",
                "maxLength": 36
              },
              "delete_time": {
                "type": "string",
                "description": "Delete Time",
                "maxLength": 36
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "saml_acs_url": {
                "type": "string",
                "description": "Saml Acs Url",
                "maxLength": 2048
              },
              "saml_assertion_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable WantAssertionsSigned"
              },
              "saml_authn_requests_signed_enabled": {
                "type": "boolean",
                "description": "Set to 'true' to enable AuthnRequestsSigned"
              },
              "saml_cert": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": [
                  "adfs"
                ]
              },
              "saml_certificate": {
                "type": "string",
                "description": "Identity provider's certificate",
                "maxLength": 16384
              },
              "saml_certificate_issuer": {
                "type": "string",
                "description": "Saml Certificate Issuer"
              },
              "saml_certificate_not_valid_after": {
                "type": "string",
                "description": "Saml Certificate Not Valid After",
                "maxLength": 36
              },
              "saml_certificate_not_valid_before": {
                "type": "string",
                "description": "Saml Certificate Not Valid Before",
                "maxLength": 36
              },
              "saml_certificate_subject": {
                "type": "string",
                "description": "Saml Certificate Subject"
              },
              "saml_digest_algorithm": {
                "type": "string",
                "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
                "enum": [
                  "sha1",
                  "sha256",
                  "sha384",
                  "sha512"
                ]
              },
              "saml_entity_id": {
                "type": "string",
                "description": "Saml Entity ID",
                "maxLength": 2048
              },
              "saml_field_mapping": {
                "type": "object",
                "description": "SAMLFieldMapping",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Field name for user email",
                    "maxLength": 256
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Field name for user's first name",
                    "maxLength": 256
                  },
                  "identity": {
                    "type": "string",
                    "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                    "maxLength": 256
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Field name for user's lastname",
                    "maxLength": 256
                  },
                  "real_name": {
                    "type": "string",
                    "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                    "maxLength": 256
                  }
                }
              },
              "saml_idp_login_allowed": {
                "type": "boolean",
                "description": "Set to 'true' to enable IdP initiated login"
              },
              "saml_idp_url": {
                "type": "string",
                "description": "Saml Idp Url",
                "maxLength": 2048
              },
              "saml_metadata_url": {
                "type": "string",
                "description": "Saml Metadata Url",
                "maxLength": 2048
              },
              "saml_requested_authn_context_enabled": {
                "type": "boolean",
                "description": "Set to 'false' to disable RequestedAuthnContext"
              },
              "saml_signature_algorithm": {
                "type": "string",
                "description": "SAMLSignatureAlgorithm",
                "enum": [
                  "rsa-sha1",
                  "dsa-sha1",
                  "rsa-sha256",
                  "rsa-sha384",
                  "rsa-sha512"
                ]
              },
              "saml_sp_certificate": {
                "type": "string",
                "description": "Saml Sp Certificate",
                "maxLength": 16384
              },
              "saml_variant": {
                "type": "string",
                "description": "SAMLVariant",
                "enum": [
                  "adfs"
                ]
              },
              "state": {
                "type": "string",
                "description": "AuthenticationMethodState",
                "enum": [
                  "active",
                  "deleted",
                  "pending_configuration"
                ]
              },
              "update_time": {
                "type": "string",
                "description": "Update Time",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "authentication_method_enabled",
              "authentication_method_id",
              "authentication_method_type",
              "auto_join_team_id",
              "create_time",
              "delete_time",
              "state",
              "update_time"
            ]
          }
        },
        "required": [
          "authentication_method"
        ]
      },
      "AccountAuthenticationMethodsListResponse": {
        "type": "object",
        "description": "AccountAuthenticationMethodsListResponse",
        "properties": {
          "authentication_methods": {
            "type": "array",
            "description": "Authentication Methods",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "authentication_method_enabled": {
                  "type": "boolean",
                  "description": "If true, authentication method can be used to access account/projects in account. If false, authentication method can still be used to sign in"
                },
                "authentication_method_id": {
                  "type": "string",
                  "description": "Authentication Method ID"
                },
                "authentication_method_name": {
                  "type": "string",
                  "description": "Authentication Method Name",
                  "maxLength": 128
                },
                "authentication_method_type": {
                  "type": "string",
                  "description": "Authentication method type",
                  "enum": [
                    "internal",
                    "saml"
                  ]
                },
                "auto_join_team_id": {
                  "type": "string",
                  "description": "Automatically add users to a team, when user signs up using this authentication method",
                  "maxLength": 32
                },
                "create_time": {
                  "type": "string",
                  "description": "Create Time",
                  "maxLength": 36
                },
                "delete_time": {
                  "type": "string",
                  "description": "Delete Time",
                  "maxLength": 36
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "saml_acs_url": {
                  "type": "string",
                  "description": "Saml Acs Url",
                  "maxLength": 2048
                },
                "saml_assertion_signed_enabled": {
                  "type": "boolean",
                  "description": "Set to 'true' to enable WantAssertionsSigned"
                },
                "saml_authn_requests_signed_enabled": {
                  "type": "boolean",
                  "description": "Set to 'true' to enable AuthnRequestsSigned"
                },
                "saml_cert": {
                  "type": "string",
                  "description": "SAMLVariant",
                  "enum": [
                    "adfs"
                  ]
                },
                "saml_certificate": {
                  "type": "string",
                  "description": "Identity provider's certificate",
                  "maxLength": 16384
                },
                "saml_certificate_issuer": {
                  "type": "string",
                  "description": "Saml Certificate Issuer"
                },
                "saml_certificate_not_valid_after": {
                  "type": "string",
                  "description": "Saml Certificate Not Valid After",
                  "maxLength": 36
                },
                "saml_certificate_not_valid_before": {
                  "type": "string",
                  "description": "Saml Certificate Not Valid Before",
                  "maxLength": 36
                },
                "saml_certificate_subject": {
                  "type": "string",
                  "description": "Saml Certificate Subject"
                },
                "saml_digest_algorithm": {
                  "type": "string",
                  "description": "Digest algorithm. This is an advanced option that typically does not need to be set.",
                  "enum": [
                    "sha1",
                    "sha256",
                    "sha384",
                    "sha512"
                  ]
                },
                "saml_entity_id": {
                  "type": "string",
                  "description": "Saml Entity ID",
                  "maxLength": 2048
                },
                "saml_field_mapping": {
                  "type": "object",
                  "description": "SAMLFieldMapping",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "Field name for user email",
                      "maxLength": 256
                    },
                    "first_name": {
                      "type": "string",
                      "description": "Field name for user's first name",
                      "maxLength": 256
                    },
                    "identity": {
                      "type": "string",
                      "description": "Field name for user's identity. This field must always exist in responses, and must be immutable and unique. Contents of this field are used to identify the user. Using user ID (such as unix user ID) is highly recommended, as email address may change, requiring relinking user to Aiven user.",
                      "maxLength": 256
                    },
                    "last_name": {
                      "type": "string",
                      "description": "Field name for user's lastname",
                      "maxLength": 256
                    },
                    "real_name": {
                      "type": "string",
                      "description": "Field name for user's full name. If specified, first_name and last_name mappings are ignored",
                      "maxLength": 256
                    }
                  }
                },
                "saml_idp_login_allowed": {
                  "type": "boolean",
                  "description": "Set to 'true' to enable IdP initiated login"
                },
                "saml_idp_url": {
                  "type": "string",
                  "description": "Saml Idp Url",
                  "maxLength": 2048
                },
                "saml_metadata_url": {
                  "type": "string",
                  "description": "Saml Metadata Url",
                  "maxLength": 2048
                },
                "saml_requested_authn_context_enabled": {
                  "type": "boolean",
                  "description": "Set to 'false' to disable RequestedAuthnContext"
                },
                "saml_signature_algorithm": {
                  "type": "string",
                  "description": "SAMLSignatureAlgorithm",
                  "enum": [
                    "rsa-sha1",
                    "dsa-sha1",
                    "rsa-sha256",
                    "rsa-sha384",
                    "rsa-sha512"
                  ]
                },
                "saml_sp_certificate": {
                  "type": "string",
                  "description": "Saml Sp Certificate",
                  "maxLength": 16384
                },
                "saml_variant": {
                  "type": "string",
                  "description": "SAMLVariant",
                  "enum": [
                    "adfs"
                  ]
                },
                "state": {
                  "type": "string",
                  "description": "AuthenticationMethodState",
                  "enum": [
                    "active",
                    "deleted",
                    "pending_configuration"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Update Time",
                  "maxLength": 36
                }
              },
              "required": [
                "account_id",
                "authentication_method_enabled",
                "authentication_method_id",
                "authentication_method_type",
                "auto_join_team_id",
                "create_time",
                "delete_time",
                "state",
                "update_time"
              ]
            }
          }
        },
        "required": [
          "authentication_methods"
        ]
      },
      "AccountBillingGroupListResponse": {
        "type": "object",
        "description": "AccountBillingGroupListResponse",
        "properties": {
          "account_billing_groups": {
            "type": "array",
            "description": "List of billing groups",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": {
                    "type": "string"
                  }
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": [
                      "email"
                    ]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": {
                      "type": "string",
                      "description": "Brand"
                    },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance in billing currency, before tax"
                },
                "estimated_balance_usd": {
                  "type": "string",
                  "description": "Estimated balance in USD, before tax"
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method",
                  "enum": [
                    "accrual",
                    "card",
                    "disabled",
                    "email",
                    "no_payment_expected",
                    "partner"
                  ]
                },
                "state": {
                  "type": "string",
                  "description": "Address state",
                  "maxLength": 128
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "account_name",
                "address_lines",
                "billing_currency",
                "billing_emails",
                "billing_extra_text",
                "billing_group_id",
                "billing_group_name",
                "card_info",
                "city",
                "company",
                "country",
                "country_code",
                "estimated_balance_local",
                "estimated_balance_usd",
                "payment_method",
                "state",
                "vat_id",
                "zip_code"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account_billing_groups"
        ]
      },
      "AccountCreateRequestBody": {
        "type": "object",
        "description": "AccountCreateRequestBody",
        "properties": {
          "account_name": {
            "type": "string",
            "description": "Account name",
            "maxLength": 128
          },
          "parent_account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "primary_billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          }
        }
      },
      "AccountCreateResponse": {
        "type": "object",
        "description": "AccountCreateResponse",
        "properties": {
          "account": {
            "type": "object",
            "description": "Account details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "account_owner_team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "is_account_member": {
                "type": "boolean",
                "description": "If true, user is part of a team of this or a parent account"
              },
              "is_account_owner": {
                "type": "boolean",
                "description": "If true, user is part of the owners team for this account"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "parent_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "primary_billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "root_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant identifier",
                "maxLength": 64
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "account_name",
              "account_owner_team_id",
              "create_time",
              "is_account_owner",
              "primary_billing_group_id",
              "update_time"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account"
        ]
      },
      "AccountDeleteResponse": {
        "type": "object",
        "description": "AccountDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountEventListResponse": {
        "type": "object",
        "description": "AccountEventListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "events": {
            "type": "array",
            "description": "List of events",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "action_description": {
                  "type": "string",
                  "description": "Event description"
                },
                "action_type": {
                  "type": "string",
                  "description": "Event type"
                },
                "actor": {
                  "type": "string",
                  "description": "Actor details"
                },
                "actor_user_id": {
                  "type": "string",
                  "description": "User ID"
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "log_entry_id": {
                  "type": "integer",
                  "description": "Entry ID",
                  "minimum": 0
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "action_description",
                "action_type",
                "actor",
                "actor_user_id",
                "create_time",
                "log_entry_id",
                "team_id"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "events"
        ]
      },
      "AccountGetResponse": {
        "type": "object",
        "description": "AccountGetResponse",
        "properties": {
          "account": {
            "type": "object",
            "description": "Account details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "account_owner_team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "is_account_member": {
                "type": "boolean",
                "description": "If true, user is part of a team of this or a parent account"
              },
              "is_account_owner": {
                "type": "boolean",
                "description": "If true, user is part of the owners team for this account"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "parent_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "primary_billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "root_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant identifier",
                "maxLength": 64
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "account_name",
              "account_owner_team_id",
              "create_time",
              "is_account_owner",
              "primary_billing_group_id",
              "update_time"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account"
        ]
      },
      "AccountListResponse": {
        "type": "object",
        "description": "AccountListResponse",
        "properties": {
          "accounts": {
            "type": "array",
            "description": "List of accounts",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "account_owner_team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "is_account_member": {
                  "type": "boolean",
                  "description": "If true, user is part of a team of this or a parent account"
                },
                "is_account_owner": {
                  "type": "boolean",
                  "description": "If true, user is part of the owners team for this account"
                },
                "organization_id": {
                  "type": "string",
                  "description": "Organization ID",
                  "maxLength": 36
                },
                "parent_account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "primary_billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "root_account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "tenant_id": {
                  "type": "string",
                  "description": "Tenant identifier",
                  "maxLength": 64
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              },
              "required": [
                "account_id",
                "account_name",
                "account_owner_team_id",
                "create_time",
                "is_account_owner",
                "primary_billing_group_id",
                "update_time"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "accounts"
        ]
      },
      "AccountMoveRequestBody": {
        "type": "object",
        "description": "AccountMoveRequestBody",
        "properties": {
          "parent_account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          }
        },
        "required": [
          "parent_account_id"
        ]
      },
      "AccountMoveResponse": {
        "type": "object",
        "description": "AccountMoveResponse",
        "properties": {
          "account": {
            "type": "object",
            "description": "Account details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "account_owner_team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "is_account_member": {
                "type": "boolean",
                "description": "If true, user is part of a team of this or a parent account"
              },
              "is_account_owner": {
                "type": "boolean",
                "description": "If true, user is part of the owners team for this account"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "parent_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "primary_billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "root_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant identifier",
                "maxLength": 64
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "account_name",
              "account_owner_team_id",
              "create_time",
              "is_account_owner",
              "primary_billing_group_id",
              "update_time"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account"
        ]
      },
      "AccountProjectsListResponse": {
        "type": "object",
        "description": "AccountProjectsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "projects": {
            "type": "array",
            "description": "List of projects",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": {
                    "type": "string"
                  }
                },
                "available_credits": {
                  "type": "string",
                  "description": "Available credits, in USD"
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": [
                      "email"
                    ]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": {
                      "type": "string",
                      "description": "Brand"
                    },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "default_cloud": {
                  "type": "string",
                  "description": "Default cloud to use when launching services",
                  "maxLength": 256
                },
                "end_of_life_extension": {
                  "type": "object",
                  "description": "End of life extension information",
                  "properties": {
                    "elasticsearch": {
                      "type": "object",
                      "description": "Service EOL extension",
                      "properties": {
                        "eol_date": {
                          "type": "string",
                          "description": "Extended EOL date"
                        },
                        "version": {
                          "type": "string",
                          "description": "Service version"
                        }
                      },
                      "required": [
                        "eol_date",
                        "version"
                      ]
                    }
                  }
                },
                "estimated_balance": {
                  "type": "string",
                  "description": "Estimated balance, in USD"
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance, in billing currency"
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "state": {
                  "type": "string",
                  "description": "Address state",
                  "maxLength": 128
                },
                "tags": {
                  "type": "object",
                  "description": "Set of resource tags",
                  "properties": {}
                },
                "tech_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": [
                      "email"
                    ]
                  }
                },
                "tenant_id": {
                  "type": "string",
                  "description": "Tenant ID"
                },
                "trial_expiration_time": {
                  "type": "string",
                  "description": "Trial expiration time (ISO 8601)",
                  "maxLength": 36
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "billing_address",
                "billing_emails",
                "billing_group_id",
                "billing_group_name",
                "country",
                "country_code",
                "default_cloud",
                "estimated_balance",
                "payment_method",
                "project_name",
                "vat_id"
              ]
            }
          },
          "total_project_count": {
            "type": "integer",
            "description": "Total count of projects associated to account."
          }
        },
        "required": [
          "projects"
        ]
      },
      "AccountProjectsTeamsListResponse": {
        "type": "object",
        "description": "AccountProjectsTeamsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "teams": {
            "type": "array",
            "description": "List of teams",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "team_type": {
                  "type": "string",
                  "description": "Team type (permission level)",
                  "enum": [
                    "admin",
                    "operator",
                    "developer",
                    "read_only"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              },
              "required": [
                "team_id",
                "team_name"
              ]
            }
          }
        },
        "required": [
          "teams"
        ]
      },
      "AccountTeamCreateRequestBody": {
        "type": "object",
        "description": "AccountTeamCreateRequestBody",
        "properties": {
          "team_name": {
            "type": "string",
            "description": "Team name",
            "maxLength": 128
          }
        },
        "required": [
          "team_name"
        ]
      },
      "AccountTeamCreateResponse": {
        "type": "object",
        "description": "AccountTeamCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "team": {
            "type": "object",
            "description": "Account Team details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "team_name": {
                "type": "string",
                "description": "Team name",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "team_id",
              "team_name"
            ]
          }
        },
        "required": [
          "team"
        ]
      },
      "AccountTeamDeleteResponse": {
        "type": "object",
        "description": "AccountTeamDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamGetResponse": {
        "type": "object",
        "description": "AccountTeamGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "team": {
            "type": "object",
            "description": "Account Team details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "team_name": {
                "type": "string",
                "description": "Team name",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "team_id",
              "team_name"
            ]
          }
        },
        "required": [
          "team"
        ]
      },
      "AccountTeamInvitesListResponse": {
        "type": "object",
        "description": "AccountTeamInvitesListResponse",
        "properties": {
          "account_invites": {
            "type": "array",
            "description": "List of invites",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_by_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "account_name",
                "create_time",
                "invited_by_user_email",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account_invites"
        ]
      },
      "AccountTeamListResponse": {
        "type": "object",
        "description": "AccountTeamListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "teams": {
            "type": "array",
            "description": "List of teams",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              },
              "required": [
                "team_id",
                "team_name"
              ]
            }
          }
        },
        "required": [
          "teams"
        ]
      },
      "AccountTeamMemberCancelInviteResponse": {
        "type": "object",
        "description": "AccountTeamMemberCancelInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamMemberVerifyInviteResponse": {
        "type": "object",
        "description": "AccountTeamMemberVerifyInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "invite_details": {
            "type": "object",
            "description": "Details of verified invite",
            "properties": {
              "user_email": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              }
            },
            "required": [
              "user_email"
            ]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "invite_details"
        ]
      },
      "AccountTeamMembersDeleteResponse": {
        "type": "object",
        "description": "AccountTeamMembersDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamMembersInviteRequestBody": {
        "type": "object",
        "description": "AccountTeamMembersInviteRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": [
          "email"
        ]
      },
      "AccountTeamMembersInviteResponse": {
        "type": "object",
        "description": "AccountTeamMembersInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamMembersListResponse": {
        "type": "object",
        "description": "AccountTeamMembersListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "members": {
            "type": "array",
            "description": "List of account team members",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_id": {
                  "type": "string",
                  "description": "User ID"
                }
              },
              "required": [
                "create_time",
                "real_name",
                "team_id",
                "team_name",
                "update_time",
                "user_email",
                "user_id"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "members"
        ]
      },
      "AccountTeamProjectAssociateRequestBody": {
        "type": "object",
        "description": "AccountTeamProjectAssociateRequestBody",
        "properties": {
          "team_type": {
            "type": "string",
            "description": "Team type (permission level)",
            "enum": [
              "admin",
              "operator",
              "developer",
              "read_only"
            ]
          }
        },
        "required": [
          "team_type"
        ]
      },
      "AccountTeamProjectAssociateResponse": {
        "type": "object",
        "description": "AccountTeamProjectAssociateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamProjectAssociationUpdateRequestBody": {
        "type": "object",
        "description": "AccountTeamProjectAssociationUpdateRequestBody",
        "properties": {
          "team_type": {
            "type": "string",
            "description": "Team type (permission level)",
            "enum": [
              "admin",
              "operator",
              "developer",
              "read_only"
            ]
          }
        }
      },
      "AccountTeamProjectAssociationUpdateResponse": {
        "type": "object",
        "description": "AccountTeamProjectAssociationUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamProjectDisassociateResponse": {
        "type": "object",
        "description": "AccountTeamProjectDisassociateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccountTeamProjectListResponse": {
        "type": "object",
        "description": "AccountTeamProjectListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "projects": {
            "type": "array",
            "description": "List of projects associated to a team",
            "items": {
              "type": "object",
              "properties": {
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "team_type": {
                  "type": "string",
                  "description": "Team type (permission level)",
                  "enum": [
                    "admin",
                    "operator",
                    "developer",
                    "read_only"
                  ]
                }
              },
              "required": [
                "project_name",
                "team_type"
              ]
            }
          }
        },
        "required": [
          "projects"
        ]
      },
      "AccountTeamUpdateRequestBody": {
        "type": "object",
        "description": "AccountTeamUpdateRequestBody",
        "properties": {
          "team_name": {
            "type": "string",
            "description": "Team name",
            "maxLength": 128
          }
        },
        "required": [
          "team_name"
        ]
      },
      "AccountTeamUpdateResponse": {
        "type": "object",
        "description": "AccountTeamUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "team": {
            "type": "object",
            "description": "Account Team details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "team_name": {
                "type": "string",
                "description": "Team name",
                "maxLength": 128
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "team_id",
              "team_name"
            ]
          }
        },
        "required": [
          "team"
        ]
      },
      "AccountUpdateRequestBody": {
        "type": "object",
        "description": "AccountUpdateRequestBody",
        "properties": {
          "account_name": {
            "type": "string",
            "description": "Account name",
            "maxLength": 128
          },
          "primary_billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          }
        }
      },
      "AccountUpdateResponse": {
        "type": "object",
        "description": "AccountUpdateResponse",
        "properties": {
          "account": {
            "type": "object",
            "description": "Account details",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "account_owner_team_id": {
                "type": "string",
                "description": "Team ID",
                "maxLength": 32
              },
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "is_account_member": {
                "type": "boolean",
                "description": "If true, user is part of a team of this or a parent account"
              },
              "is_account_owner": {
                "type": "boolean",
                "description": "If true, user is part of the owners team for this account"
              },
              "organization_id": {
                "type": "string",
                "description": "Organization ID",
                "maxLength": 36
              },
              "parent_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "primary_billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "root_account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant identifier",
                "maxLength": 64
              },
              "update_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              }
            },
            "required": [
              "account_id",
              "account_name",
              "account_owner_team_id",
              "create_time",
              "is_account_owner",
              "primary_billing_group_id",
              "update_time"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account"
        ]
      },
      "AccountUserProjectsListResponse": {
        "type": "object",
        "description": "AccountUserProjectsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user_projects": {
            "type": "array",
            "description": "List of user's projects",
            "items": {
              "type": "object",
              "properties": {
                "access_type": {
                  "type": "string",
                  "description": "Access type"
                },
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "member_type": {
                  "type": "string",
                  "description": "Project member type",
                  "enum": [
                    "admin",
                    "developer",
                    "operator",
                    "read_only"
                  ]
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "create_time",
                "member_type",
                "project_name",
                "real_name",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          }
        },
        "required": [
          "user_projects"
        ]
      },
      "AccountUserTeamsListResponse": {
        "type": "object",
        "description": "AccountUserTeamsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "teams": {
            "type": "array",
            "description": "List of teams",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                }
              },
              "required": [
                "account_id",
                "account_name",
                "team_id",
                "team_name"
              ]
            }
          }
        },
        "required": [
          "teams"
        ]
      },
      "AccountUsersSearchRequestBody": {
        "type": "object",
        "description": "AccountUsersSearchRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Maximum number of results to return",
            "minimum": 1,
            "maximum": 500
          },
          "order_by": {
            "type": "array",
            "description": "Sorting criteria; applied in order; last item on the list is executed last.",
            "maxItems": 20,
            "items": {
              "type": "string"
            }
          },
          "query": {
            "type": "string",
            "description": "Filter keyword",
            "maxLength": 128
          }
        }
      },
      "AccountUsersSearchResponse": {
        "type": "object",
        "description": "AccountUsersSearchResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "users": {
            "type": "array",
            "description": "List of users",
            "items": {
              "type": "object",
              "properties": {
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_id": {
                  "type": "string",
                  "description": "User ID"
                }
              },
              "required": [
                "real_name",
                "user_email",
                "user_id"
              ]
            }
          }
        },
        "required": [
          "users"
        ]
      },
      "BillingGroupCreateRequestBody": {
        "type": "object",
        "description": "BillingGroupCreateRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "address_lines": {
            "type": "array",
            "description": "Address lines",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          },
          "billing_currency": {
            "type": "string",
            "description": "Billing currency",
            "enum": [
              "AUD",
              "CAD",
              "CHF",
              "DKK",
              "EUR",
              "GBP",
              "JPY",
              "NOK",
              "NZD",
              "SEK",
              "SGD",
              "USD"
            ]
          },
          "billing_emails": {
            "type": "array",
            "description": "List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "email"
              ]
            }
          },
          "billing_extra_text": {
            "type": "string",
            "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
            "maxLength": 1000
          },
          "billing_group_name": {
            "type": "string",
            "description": "Billing group name",
            "maxLength": 128
          },
          "card_id": {
            "type": "string",
            "description": "Credit card ID",
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "description": "Address city",
            "maxLength": 512
          },
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "copy_from_billing_group": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          },
          "country_code": {
            "type": "string",
            "description": "Two letter country code for billing country",
            "maxLength": 2
          },
          "state": {
            "type": "string",
            "description": "Address state",
            "maxLength": 128
          },
          "vat_id": {
            "type": "string",
            "description": "EU VAT Identification Number",
            "maxLength": 64
          },
          "zip_code": {
            "type": "string",
            "description": "Address zip code",
            "maxLength": 32
          }
        },
        "required": [
          "billing_group_name"
        ]
      },
      "BillingGroupCreateResponse": {
        "type": "object",
        "description": "BillingGroupCreateResponse",
        "properties": {
          "billing_group": {
            "type": "object",
            "description": "Billing group information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": {
                  "type": "string"
                }
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": {
                    "type": "string",
                    "description": "Brand"
                  },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance in billing currency, before tax"
              },
              "estimated_balance_usd": {
                "type": "string",
                "description": "Estimated balance in USD, before tax"
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method",
                "enum": [
                  "accrual",
                  "card",
                  "disabled",
                  "email",
                  "no_payment_expected",
                  "partner"
                ]
              },
              "state": {
                "type": "string",
                "description": "Address state",
                "maxLength": 128
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "account_name",
              "address_lines",
              "billing_currency",
              "billing_emails",
              "billing_extra_text",
              "billing_group_id",
              "billing_group_name",
              "card_info",
              "city",
              "company",
              "country",
              "country_code",
              "estimated_balance_local",
              "estimated_balance_usd",
              "payment_method",
              "state",
              "vat_id",
              "zip_code"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "billing_group"
        ]
      },
      "BillingGroupCreditsClaimRequestBody": {
        "type": "object",
        "description": "BillingGroupCreditsClaimRequestBody",
        "properties": {
          "code": {
            "type": "string",
            "description": "Credit code",
            "maxLength": 1024
          }
        },
        "required": [
          "code"
        ]
      },
      "BillingGroupCreditsClaimResponse": {
        "type": "object",
        "description": "BillingGroupCreditsClaimResponse",
        "properties": {
          "credit": {
            "type": "object",
            "description": "Assigned credit",
            "properties": {
              "code": {
                "type": "string",
                "description": "Credit code",
                "maxLength": 1024
              },
              "expire_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "remaining_value": {
                "type": "string",
                "description": "Remaining credit value"
              },
              "start_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "type": {
                "type": "string",
                "description": "Credit type",
                "enum": [
                  "discount",
                  "employee",
                  "evaluation",
                  "internal",
                  "other",
                  "outage",
                  "partner",
                  "promotion",
                  "purchase",
                  "sponsorship",
                  "trial",
                  "trial_over"
                ]
              },
              "value": {
                "type": "string",
                "description": "Original credit value, or for expired credits, the consumed credit value"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "credit"
        ]
      },
      "BillingGroupCreditsListResponse": {
        "type": "object",
        "description": "BillingGroupCreditsListResponse",
        "properties": {
          "credits": {
            "type": "array",
            "description": "List of credits assigned to a billing group",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Credit code",
                  "maxLength": 1024
                },
                "expire_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "remaining_value": {
                  "type": "string",
                  "description": "Remaining credit value"
                },
                "start_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "type": {
                  "type": "string",
                  "description": "Credit type",
                  "enum": [
                    "discount",
                    "employee",
                    "evaluation",
                    "internal",
                    "other",
                    "outage",
                    "partner",
                    "promotion",
                    "purchase",
                    "sponsorship",
                    "trial",
                    "trial_over"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "Original credit value, or for expired credits, the consumed credit value"
                }
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "credits"
        ]
      },
      "BillingGroupDeleteResponse": {
        "type": "object",
        "description": "BillingGroupDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "BillingGroupEventListResponse": {
        "type": "object",
        "description": "BillingGroupEventListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "events": {
            "type": "array",
            "description": "List of events related to a billing group",
            "items": {
              "type": "object",
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "Initiator of the event"
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "event_desc": {
                  "type": "string",
                  "description": "Event description"
                },
                "event_type": {
                  "type": "string",
                  "description": "Event type identifier"
                },
                "log_entry_id": {
                  "type": "integer",
                  "description": "Entry ID"
                },
                "project_id": {
                  "type": "string",
                  "description": "Identifier of a project",
                  "maxLength": 36
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "events"
        ]
      },
      "BillingGroupGetResponse": {
        "type": "object",
        "description": "BillingGroupGetResponse",
        "properties": {
          "billing_group": {
            "type": "object",
            "description": "Billing group information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": {
                  "type": "string"
                }
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": {
                    "type": "string",
                    "description": "Brand"
                  },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance in billing currency, before tax"
              },
              "estimated_balance_usd": {
                "type": "string",
                "description": "Estimated balance in USD, before tax"
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method",
                "enum": [
                  "accrual",
                  "card",
                  "disabled",
                  "email",
                  "no_payment_expected",
                  "partner"
                ]
              },
              "state": {
                "type": "string",
                "description": "Address state",
                "maxLength": 128
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "account_name",
              "address_lines",
              "billing_currency",
              "billing_emails",
              "billing_extra_text",
              "billing_group_id",
              "billing_group_name",
              "card_info",
              "city",
              "company",
              "country",
              "country_code",
              "estimated_balance_local",
              "estimated_balance_usd",
              "payment_method",
              "state",
              "vat_id",
              "zip_code"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "billing_group"
        ]
      },
      "BillingGroupInvoiceGetResponse": {
        "type": "object",
        "description": "BillingGroupInvoiceGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "invoice": {
            "type": "object",
            "description": "A single invoice",
            "properties": {
              "invoice_number": {
                "type": "string",
                "description": "Unique invoice reference code"
              },
              "invoice_state": {
                "type": "string",
                "description": "State of this invoice",
                "enum": [
                  "accrual",
                  "consolidated",
                  "due",
                  "estimate",
                  "failed_credit_card_charge",
                  "failed_no_credit_card",
                  "mailed",
                  "no_payment_expected",
                  "paid",
                  "partner_metering",
                  "uncollectible",
                  "waived"
                ]
              },
              "local_inc_vat": {
                "type": "string",
                "description": "Invoice total in chosen billing currency, after VAT"
              },
              "local_vat_zero": {
                "type": "string",
                "description": "Invoice total in chosen billing currency, before VAT"
              }
            },
            "required": [
              "invoice_number",
              "local_inc_vat",
              "local_vat_zero"
            ]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "invoice"
        ]
      },
      "BillingGroupInvoiceLinesListResponse": {
        "type": "object",
        "description": "BillingGroupInvoiceLinesListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "lines": {
            "type": "array",
            "description": "List of invoice lines",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Name of the cloud, if billed resource is associated with a cloud resource"
                },
                "commitment_name": {
                  "type": "string",
                  "description": "Name of the commitment which is referred to this invoice line"
                },
                "description": {
                  "type": "string",
                  "description": "Human-readable short description of the invoice line"
                },
                "line_pre_discount_local": {
                  "type": "string",
                  "description": "Pre-tax sum of invoice line, in local currency, before any discounts"
                },
                "line_total_local": {
                  "type": "string",
                  "description": "Pre-tax sum of invoice line, in the local currency configured for the invoice"
                },
                "line_total_usd": {
                  "type": "string",
                  "description": "Pre-tax sum of invoice line, in USD"
                },
                "line_type": {
                  "type": "string",
                  "description": "Type of the invoice line",
                  "enum": [
                    "commitment_fee",
                    "credit_consumption",
                    "extra_charge",
                    "multiplier",
                    "other_event",
                    "rounding",
                    "service_charge",
                    "support_charge"
                  ]
                },
                "local_currency": {
                  "type": "string",
                  "description": "Currency used for line_local_total"
                },
                "project_name": {
                  "type": "string",
                  "description": "Name of the project this line is associated with, if any"
                },
                "service_name": {
                  "type": "string",
                  "description": "Name of the service, if invoice line is for service use"
                },
                "service_plan": {
                  "type": "string",
                  "description": "Service plan name, if invoice line is for service use"
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type, if invoice line is for service use",
                  "enum": [
                    "alertmanager",
                    "cassandra",
                    "clickhouse",
                    "elasticsearch",
                    "flink",
                    "grafana",
                    "influxdb",
                    "kafka",
                    "kafka_connect",
                    "kafka_mirrormaker",
                    "m3aggregator",
                    "m3coordinator",
                    "m3db",
                    "mysql",
                    "opensearch",
                    "pg",
                    "redis",
                    "stresstester",
                    "sw",
                    "thanos",
                    "thanoscompactor",
                    "thanosquery",
                    "thanosreceiver",
                    "thanosstore",
                    "vmalert"
                  ]
                },
                "tags": {
                  "type": "object",
                  "description": "Billing tags",
                  "properties": {}
                },
                "timestamp_begin": {
                  "type": "string",
                  "description": "Begin timestamp of the billed time period, for resources billed by time"
                },
                "timestamp_end": {
                  "type": "string",
                  "description": "End timestamp of the billed time period, for resources billed by time"
                }
              },
              "required": [
                "description",
                "line_total_usd",
                "line_type"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "BillingGroupInvoiceListResponse": {
        "type": "object",
        "description": "BillingGroupInvoiceListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "invoices": {
            "type": "array",
            "description": "List of billing group invoices",
            "items": {
              "type": "object",
              "properties": {
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "download_cookie": {
                  "type": "string",
                  "description": "Authentication cookie for downloads"
                },
                "invoice_number": {
                  "type": "string",
                  "description": "Invoice number",
                  "maxLength": 128
                },
                "period_begin": {
                  "type": "string",
                  "description": "Period begin",
                  "maxLength": 36
                },
                "period_end": {
                  "type": "string",
                  "description": "Period end",
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Invoice state"
                },
                "total_inc_vat": {
                  "type": "string",
                  "description": "Total including taxes"
                },
                "total_vat_zero": {
                  "type": "string",
                  "description": "Total excluding taxes"
                }
              },
              "required": [
                "billing_group_id",
                "billing_group_name",
                "currency",
                "download_cookie",
                "invoice_number",
                "period_begin",
                "period_end",
                "state",
                "total_inc_vat",
                "total_vat_zero"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "invoices"
        ]
      },
      "BillingGroupListResponse": {
        "type": "object",
        "description": "BillingGroupListResponse",
        "properties": {
          "billing_groups": {
            "type": "array",
            "description": "List of billing groups",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": {
                    "type": "string"
                  }
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": [
                      "email"
                    ]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": {
                      "type": "string",
                      "description": "Brand"
                    },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance in billing currency, before tax"
                },
                "estimated_balance_usd": {
                  "type": "string",
                  "description": "Estimated balance in USD, before tax"
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method",
                  "enum": [
                    "accrual",
                    "card",
                    "disabled",
                    "email",
                    "no_payment_expected",
                    "partner"
                  ]
                },
                "state": {
                  "type": "string",
                  "description": "Address state",
                  "maxLength": 128
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "account_name",
                "address_lines",
                "billing_currency",
                "billing_emails",
                "billing_extra_text",
                "billing_group_id",
                "billing_group_name",
                "card_info",
                "city",
                "company",
                "country",
                "country_code",
                "estimated_balance_local",
                "estimated_balance_usd",
                "payment_method",
                "state",
                "vat_id",
                "zip_code"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "billing_groups"
        ]
      },
      "BillingGroupProjectAssignResponse": {
        "type": "object",
        "description": "BillingGroupProjectAssignResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "BillingGroupProjectListResponse": {
        "type": "object",
        "description": "BillingGroupProjectListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "projects": {
            "type": "array",
            "description": "List of projects assigned to billing group",
            "items": {
              "type": "object",
              "properties": {
                "available_credits": {
                  "type": "string",
                  "description": "Available credits"
                },
                "estimated_balance": {
                  "type": "string",
                  "description": "Estimated balance"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                }
              },
              "required": [
                "available_credits",
                "estimated_balance",
                "project_name"
              ]
            }
          }
        },
        "required": [
          "projects"
        ]
      },
      "BillingGroupProjectsAssignRequestBody": {
        "type": "object",
        "description": "BillingGroupProjectsAssignRequestBody",
        "properties": {
          "projects_names": {
            "type": "array",
            "description": "Projects names",
            "minItems": 1,
            "maxItems": 1024,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "projects_names"
        ]
      },
      "BillingGroupProjectsAssignResponse": {
        "type": "object",
        "description": "BillingGroupProjectsAssignResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "BillingGroupUpdateRequestBody": {
        "type": "object",
        "description": "BillingGroupUpdateRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "address_lines": {
            "type": "array",
            "description": "Address lines",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          },
          "billing_currency": {
            "type": "string",
            "description": "Billing currency",
            "enum": [
              "AUD",
              "CAD",
              "CHF",
              "DKK",
              "EUR",
              "GBP",
              "JPY",
              "NOK",
              "NZD",
              "SEK",
              "SGD",
              "USD"
            ]
          },
          "billing_emails": {
            "type": "array",
            "description": "List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "email"
              ]
            }
          },
          "billing_extra_text": {
            "type": "string",
            "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
            "maxLength": 1000
          },
          "billing_group_name": {
            "type": "string",
            "description": "Billing group name",
            "maxLength": 128
          },
          "card_id": {
            "type": "string",
            "description": "Credit card ID",
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "description": "Address city",
            "maxLength": 512
          },
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "country_code": {
            "type": "string",
            "description": "Two letter country code for billing country",
            "maxLength": 2
          },
          "state": {
            "type": "string",
            "description": "Address state",
            "maxLength": 128
          },
          "vat_id": {
            "type": "string",
            "description": "EU VAT Identification Number",
            "maxLength": 64
          },
          "zip_code": {
            "type": "string",
            "description": "Address zip code",
            "maxLength": 32
          }
        }
      },
      "BillingGroupUpdateResponse": {
        "type": "object",
        "description": "BillingGroupUpdateResponse",
        "properties": {
          "billing_group": {
            "type": "object",
            "description": "Billing group information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": {
                  "type": "string"
                }
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": {
                    "type": "string",
                    "description": "Brand"
                  },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance in billing currency, before tax"
              },
              "estimated_balance_usd": {
                "type": "string",
                "description": "Estimated balance in USD, before tax"
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method",
                "enum": [
                  "accrual",
                  "card",
                  "disabled",
                  "email",
                  "no_payment_expected",
                  "partner"
                ]
              },
              "state": {
                "type": "string",
                "description": "Address state",
                "maxLength": 128
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "account_name",
              "address_lines",
              "billing_currency",
              "billing_emails",
              "billing_extra_text",
              "billing_group_id",
              "billing_group_name",
              "card_info",
              "city",
              "company",
              "country",
              "country_code",
              "estimated_balance_local",
              "estimated_balance_usd",
              "payment_method",
              "state",
              "vat_id",
              "zip_code"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "billing_group"
        ]
      },
      "ListCloudsResponse": {
        "type": "object",
        "description": "ListCloudsResponse",
        "properties": {
          "clouds": {
            "type": "array",
            "description": "List of available clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_description": {
                  "type": "string",
                  "description": "Cloud provider and location"
                },
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "geo_latitude": {
                  "type": "number",
                  "description": "Approximate geographic latitude of the datacenters"
                },
                "geo_longitude": {
                  "type": "number",
                  "description": "Approximate geographic longitude of the datacenters"
                },
                "geo_region": {
                  "type": "string",
                  "description": "Geographical region"
                },
                "provider": {
                  "type": "string",
                  "description": "Cloud provider name"
                },
                "provider_description": {
                  "type": "string",
                  "description": "Cloud provider description"
                }
              },
              "required": [
                "cloud_name",
                "geo_region"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "clouds"
        ]
      },
      "ListProjectCloudsResponse": {
        "type": "object",
        "description": "ListProjectCloudsResponse",
        "properties": {
          "clouds": {
            "type": "array",
            "description": "List of available clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_description": {
                  "type": "string",
                  "description": "Cloud provider and location"
                },
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "geo_latitude": {
                  "type": "number",
                  "description": "Approximate geographic latitude of the datacenters"
                },
                "geo_longitude": {
                  "type": "number",
                  "description": "Approximate geographic longitude of the datacenters"
                },
                "geo_region": {
                  "type": "string",
                  "description": "Geographical region"
                },
                "provider": {
                  "type": "string",
                  "description": "Cloud provider name"
                },
                "provider_description": {
                  "type": "string",
                  "description": "Cloud provider description"
                }
              },
              "required": [
                "cloud_name",
                "geo_region"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "clouds"
        ]
      },
      "PublicPrivatelinkAvailabilityListResponse": {
        "type": "object",
        "description": "PublicPrivatelinkAvailabilityListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "privatelink_availability": {
            "type": "array",
            "description": "Privatelink pricing information for supported clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly privatelink price in this cloud region"
                }
              },
              "required": [
                "cloud_name",
                "price_usd"
              ]
            }
          }
        },
        "required": [
          "privatelink_availability"
        ]
      },
      "PublicStaticIPAvailabilityListResponse": {
        "type": "object",
        "description": "PublicStaticIPAvailabilityListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "static_ip_address_availability": {
            "type": "array",
            "description": "Paginated array",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly static IP address price in this cloud region"
                }
              },
              "required": [
                "cloud_name",
                "price_usd"
              ]
            }
          }
        },
        "required": [
          "static_ip_address_availability"
        ]
      },
      "CreditCardAddRequestBody": {
        "type": "object",
        "description": "CreditCardAddRequestBody",
        "properties": {
          "stripe_token": {
            "type": "string",
            "description": "Credit card Stripe token",
            "maxLength": 256
          }
        },
        "required": [
          "stripe_token"
        ]
      },
      "CreditCardAddResponse": {
        "type": "object",
        "description": "CreditCardAddResponse",
        "properties": {
          "card": {
            "type": "object",
            "description": "Credit card information",
            "properties": {
              "brand": {
                "type": "string",
                "description": "Brand"
              },
              "card_id": {
                "type": "string",
                "description": "Credit card ID",
                "maxLength": 64
              },
              "country": {
                "type": "string",
                "description": "Country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "exp_month": {
                "type": "integer",
                "description": "Expiration month",
                "minimum": 1,
                "maximum": 12
              },
              "exp_year": {
                "type": "integer",
                "description": "Expiration year",
                "minimum": 2015,
                "maximum": 2100
              },
              "last4": {
                "type": "string",
                "description": "Credit card last four digits"
              },
              "name": {
                "type": "string",
                "description": "Name on the credit card",
                "maxLength": 256
              },
              "projects": {
                "type": "array",
                "description": "List of projects the card is assigned to",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "brand",
              "card_id",
              "country",
              "country_code",
              "exp_month",
              "exp_year",
              "last4",
              "name",
              "projects"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "card"
        ]
      },
      "CreditCardDeleteResponse": {
        "type": "object",
        "description": "CreditCardDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "CreditCardUpdateRequestBody": {
        "type": "object",
        "description": "CreditCardUpdateRequestBody",
        "properties": {
          "exp_month": {
            "type": "integer",
            "description": "Expiration month",
            "minimum": 1,
            "maximum": 12
          },
          "exp_year": {
            "type": "integer",
            "description": "Expiration year",
            "minimum": 2015,
            "maximum": 2100
          },
          "name": {
            "type": "string",
            "description": "Name on the credit card",
            "maxLength": 256
          }
        }
      },
      "CreditCardUpdateResponse": {
        "type": "object",
        "description": "CreditCardUpdateResponse",
        "properties": {
          "card": {
            "type": "object",
            "description": "Credit card information",
            "properties": {
              "brand": {
                "type": "string",
                "description": "Brand"
              },
              "card_id": {
                "type": "string",
                "description": "Credit card ID",
                "maxLength": 64
              },
              "country": {
                "type": "string",
                "description": "Country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "exp_month": {
                "type": "integer",
                "description": "Expiration month",
                "minimum": 1,
                "maximum": 12
              },
              "exp_year": {
                "type": "integer",
                "description": "Expiration year",
                "minimum": 2015,
                "maximum": 2100
              },
              "last4": {
                "type": "string",
                "description": "Credit card last four digits"
              },
              "name": {
                "type": "string",
                "description": "Name on the credit card",
                "maxLength": 256
              },
              "projects": {
                "type": "array",
                "description": "List of projects the card is assigned to",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "brand",
              "card_id",
              "country",
              "country_code",
              "exp_month",
              "exp_year",
              "last4",
              "name",
              "projects"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "card"
        ]
      },
      "CreditCardsListResponse": {
        "type": "object",
        "description": "CreditCardsListResponse",
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of user's credit cards",
            "items": {
              "type": "object",
              "properties": {
                "brand": {
                  "type": "string",
                  "description": "Brand"
                },
                "card_id": {
                  "type": "string",
                  "description": "Credit card ID",
                  "maxLength": 64
                },
                "country": {
                  "type": "string",
                  "description": "Country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "exp_month": {
                  "type": "integer",
                  "description": "Expiration month",
                  "minimum": 1,
                  "maximum": 12
                },
                "exp_year": {
                  "type": "integer",
                  "description": "Expiration year",
                  "minimum": 2015,
                  "maximum": 2100
                },
                "last4": {
                  "type": "string",
                  "description": "Credit card last four digits"
                },
                "name": {
                  "type": "string",
                  "description": "Name on the credit card",
                  "maxLength": 256
                },
                "projects": {
                  "type": "array",
                  "description": "List of projects the card is assigned to",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "brand",
                "card_id",
                "country",
                "country_code",
                "exp_month",
                "exp_year",
                "last4",
                "name",
                "projects"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "cards"
        ]
      },
      "ListProjectVpcPeeringConnectionTypesResponse": {
        "type": "object",
        "description": "ListProjectVpcPeeringConnectionTypesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "vpc_peering_connection_types": {
            "type": "array",
            "description": "Supported VPC peering connection types with pricing information for supported clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly peering connection price in this cloud region"
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering"
                  ]
                }
              },
              "required": [
                "cloud_name",
                "price_usd",
                "vpc_peering_connection_type"
              ]
            }
          }
        },
        "required": [
          "vpc_peering_connection_types"
        ]
      },
      "ProjectAlertsListResponse": {
        "type": "object",
        "description": "ProjectAlertsListResponse",
        "properties": {
          "alerts": {
            "type": "array",
            "description": "List of active alerts for the service",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Event creation timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "event": {
                  "type": "string",
                  "description": "Name of the alerting event"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "severity": {
                  "type": "string",
                  "description": "Severity of the event"
                }
              },
              "required": [
                "create_time",
                "event",
                "project_name",
                "severity"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "alerts"
        ]
      },
      "ProjectCreateRequestBody": {
        "type": "object",
        "description": "ProjectCreateRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "add_account_owners_admin_access": {
            "type": "boolean",
            "description": "If account_id is set, grant account owner team admin access to the new project"
          },
          "address_lines": {
            "type": "array",
            "description": "Address lines",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          },
          "billing_address": {
            "type": "string",
            "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
            "maxLength": 1000
          },
          "billing_currency": {
            "type": "string",
            "description": "Billing currency",
            "enum": [
              "AUD",
              "CAD",
              "CHF",
              "DKK",
              "EUR",
              "GBP",
              "JPY",
              "NOK",
              "NZD",
              "SEK",
              "SGD",
              "USD"
            ]
          },
          "billing_emails": {
            "type": "array",
            "description": "List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "email"
              ]
            }
          },
          "billing_extra_text": {
            "type": "string",
            "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
            "maxLength": 1000
          },
          "billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          },
          "card_id": {
            "type": "string",
            "description": "Credit card ID",
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "description": "Address city",
            "maxLength": 512
          },
          "cloud": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "copy_from_project": {
            "type": "string",
            "description": "Project name from which to copy settings to the new project",
            "maxLength": 63
          },
          "copy_tags": {
            "type": "boolean",
            "description": "Copy tags from the source project. If request contains additional tags, the tags copied from source are updated with them."
          },
          "country_code": {
            "type": "string",
            "description": "Two letter country code for billing country",
            "maxLength": 2
          },
          "project": {
            "type": "string",
            "description": "Project name",
            "maxLength": 63
          },
          "state": {
            "type": "string",
            "description": "Address state",
            "maxLength": 128
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          },
          "tech_emails": {
            "type": "array",
            "description": "List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "email"
              ]
            }
          },
          "use_source_project_billing_group": {
            "type": "boolean",
            "description": "Use the same billing group that is used in source project."
          },
          "vat_id": {
            "type": "string",
            "description": "EU VAT Identification Number",
            "maxLength": 64
          },
          "zip_code": {
            "type": "string",
            "description": "Address zip code",
            "maxLength": 32
          }
        },
        "required": [
          "project"
        ]
      },
      "ProjectCreateResponse": {
        "type": "object",
        "description": "ProjectCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "project": {
            "type": "object",
            "description": "Project information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": {
                  "type": "string"
                }
              },
              "available_credits": {
                "type": "string",
                "description": "Available credits, in USD"
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": {
                    "type": "string",
                    "description": "Brand"
                  },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "default_cloud": {
                "type": "string",
                "description": "Default cloud to use when launching services",
                "maxLength": 256
              },
              "end_of_life_extension": {
                "type": "object",
                "description": "End of life extension information",
                "properties": {
                  "elasticsearch": {
                    "type": "object",
                    "description": "Service EOL extension",
                    "properties": {
                      "eol_date": {
                        "type": "string",
                        "description": "Extended EOL date"
                      },
                      "version": {
                        "type": "string",
                        "description": "Service version"
                      }
                    },
                    "required": [
                      "eol_date",
                      "version"
                    ]
                  }
                }
              },
              "estimated_balance": {
                "type": "string",
                "description": "Estimated balance, in USD"
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance, in billing currency"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method"
              },
              "project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "state": {
                "type": "string",
                "description": "Address state",
                "maxLength": 128
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant ID"
              },
              "trial_expiration_time": {
                "type": "string",
                "description": "Trial expiration time (ISO 8601)",
                "maxLength": 36
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "billing_address",
              "billing_emails",
              "billing_group_id",
              "billing_group_name",
              "country",
              "country_code",
              "default_cloud",
              "estimated_balance",
              "payment_method",
              "project_name",
              "vat_id"
            ]
          }
        },
        "required": [
          "project"
        ]
      },
      "ProjectDeleteResponse": {
        "type": "object",
        "description": "ProjectDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectGenerateSbomDownloadUrlResponse": {
        "type": "object",
        "description": "ProjectGenerateSbomDownloadUrlResponse",
        "properties": {
          "download_url": {
            "type": "string",
            "description": "Relative signed URL for report download",
            "maxLength": 2048
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "download_url"
        ]
      },
      "ProjectGetResponse": {
        "type": "object",
        "description": "ProjectGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "project": {
            "type": "object",
            "description": "Project information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": {
                  "type": "string"
                }
              },
              "available_credits": {
                "type": "string",
                "description": "Available credits, in USD"
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": {
                    "type": "string",
                    "description": "Brand"
                  },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "default_cloud": {
                "type": "string",
                "description": "Default cloud to use when launching services",
                "maxLength": 256
              },
              "end_of_life_extension": {
                "type": "object",
                "description": "End of life extension information",
                "properties": {
                  "elasticsearch": {
                    "type": "object",
                    "description": "Service EOL extension",
                    "properties": {
                      "eol_date": {
                        "type": "string",
                        "description": "Extended EOL date"
                      },
                      "version": {
                        "type": "string",
                        "description": "Service version"
                      }
                    },
                    "required": [
                      "eol_date",
                      "version"
                    ]
                  }
                }
              },
              "estimated_balance": {
                "type": "string",
                "description": "Estimated balance, in USD"
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance, in billing currency"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method"
              },
              "project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "state": {
                "type": "string",
                "description": "Address state",
                "maxLength": 128
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant ID"
              },
              "trial_expiration_time": {
                "type": "string",
                "description": "Trial expiration time (ISO 8601)",
                "maxLength": 36
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "billing_address",
              "billing_emails",
              "billing_group_id",
              "billing_group_name",
              "country",
              "country_code",
              "default_cloud",
              "estimated_balance",
              "payment_method",
              "project_name",
              "vat_id"
            ]
          }
        },
        "required": [
          "project"
        ]
      },
      "ProjectGetEventLogsResponse": {
        "type": "object",
        "description": "ProjectGetEventLogsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "events": {
            "type": "array",
            "description": "List of project event log entries",
            "items": {
              "type": "object",
              "properties": {
                "actor": {
                  "type": "string",
                  "description": "Initiator of the event"
                },
                "event_desc": {
                  "type": "string",
                  "description": "Event description"
                },
                "event_type": {
                  "type": "string",
                  "description": "Event type identifier"
                },
                "id": {
                  "type": "string",
                  "description": "Event identifier (unique across all projects)",
                  "maxLength": 40
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              },
              "required": [
                "actor",
                "event_desc",
                "event_type",
                "id",
                "service_name",
                "time"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "events"
        ]
      },
      "ProjectInviteRequestBody": {
        "type": "object",
        "description": "ProjectInviteRequestBody",
        "properties": {
          "member_type": {
            "type": "string",
            "description": "Project member type",
            "enum": [
              "admin",
              "developer",
              "operator",
              "read_only"
            ]
          },
          "user_email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": [
          "user_email"
        ]
      },
      "ProjectInviteResponse": {
        "type": "object",
        "description": "ProjectInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectInviteAcceptResponse": {
        "type": "object",
        "description": "ProjectInviteAcceptResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "invite_details": {
            "type": "object",
            "description": "Details of verified invite",
            "properties": {
              "user_email": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              }
            },
            "required": [
              "user_email"
            ]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "invite_details"
        ]
      },
      "ProjectInviteDeleteResponse": {
        "type": "object",
        "description": "ProjectInviteDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectListResponse": {
        "type": "object",
        "description": "ProjectListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "project_membership": {
            "type": "object",
            "description": "Project membership and type of membership",
            "properties": {
              "ANY": {
                "type": "string",
                "description": "Project member type",
                "enum": [
                  "admin",
                  "developer",
                  "operator",
                  "read_only"
                ]
              }
            }
          },
          "project_memberships": {
            "type": "object",
            "description": "List of project membership and type of membership",
            "properties": {
              "ANY": {
                "type": "array",
                "description": "List of project member type",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "projects": {
            "type": "array",
            "description": "List of projects",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "address_lines": {
                  "type": "array",
                  "description": "Address lines",
                  "maxItems": 16,
                  "items": {
                    "type": "string"
                  }
                },
                "available_credits": {
                  "type": "string",
                  "description": "Available credits, in USD"
                },
                "billing_address": {
                  "type": "string",
                  "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                  "maxLength": 1000
                },
                "billing_currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "billing_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": [
                      "email"
                    ]
                  }
                },
                "billing_extra_text": {
                  "type": "string",
                  "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                  "maxLength": 1000
                },
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "card_info": {
                  "type": "object",
                  "description": "Credit card assigned to the project",
                  "properties": {
                    "brand": {
                      "type": "string",
                      "description": "Brand"
                    },
                    "card_id": {
                      "type": "string",
                      "description": "Credit card ID",
                      "maxLength": 64
                    },
                    "country": {
                      "type": "string",
                      "description": "Country",
                      "maxLength": 128
                    },
                    "country_code": {
                      "type": "string",
                      "description": "Two letter ISO country code",
                      "maxLength": 2
                    },
                    "exp_month": {
                      "type": "integer",
                      "description": "Expiration month",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "exp_year": {
                      "type": "integer",
                      "description": "Expiration year",
                      "minimum": 2015,
                      "maximum": 2100
                    },
                    "last4": {
                      "type": "string",
                      "description": "Credit card last four digits"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name on the credit card",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "brand",
                    "card_id",
                    "country",
                    "country_code",
                    "exp_month",
                    "exp_year",
                    "last4",
                    "name",
                    "user_email"
                  ]
                },
                "city": {
                  "type": "string",
                  "description": "Address city",
                  "maxLength": 512
                },
                "company": {
                  "type": "string",
                  "description": "Name of a company",
                  "maxLength": 128
                },
                "country": {
                  "type": "string",
                  "description": "Billing country",
                  "maxLength": 128
                },
                "country_code": {
                  "type": "string",
                  "description": "Two letter ISO country code",
                  "maxLength": 2
                },
                "default_cloud": {
                  "type": "string",
                  "description": "Default cloud to use when launching services",
                  "maxLength": 256
                },
                "end_of_life_extension": {
                  "type": "object",
                  "description": "End of life extension information",
                  "properties": {
                    "elasticsearch": {
                      "type": "object",
                      "description": "Service EOL extension",
                      "properties": {
                        "eol_date": {
                          "type": "string",
                          "description": "Extended EOL date"
                        },
                        "version": {
                          "type": "string",
                          "description": "Service version"
                        }
                      },
                      "required": [
                        "eol_date",
                        "version"
                      ]
                    }
                  }
                },
                "estimated_balance": {
                  "type": "string",
                  "description": "Estimated balance, in USD"
                },
                "estimated_balance_local": {
                  "type": "string",
                  "description": "Estimated balance, in billing currency"
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "state": {
                  "type": "string",
                  "description": "Address state",
                  "maxLength": 128
                },
                "tags": {
                  "type": "object",
                  "description": "Set of resource tags",
                  "properties": {}
                },
                "tech_emails": {
                  "type": "array",
                  "description": "List of project billing email addresses",
                  "maxItems": 10,
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      }
                    },
                    "required": [
                      "email"
                    ]
                  }
                },
                "tenant_id": {
                  "type": "string",
                  "description": "Tenant ID"
                },
                "trial_expiration_time": {
                  "type": "string",
                  "description": "Trial expiration time (ISO 8601)",
                  "maxLength": 36
                },
                "vat_id": {
                  "type": "string",
                  "description": "EU VAT Identification Number",
                  "maxLength": 64
                },
                "zip_code": {
                  "type": "string",
                  "description": "Address zip code",
                  "maxLength": 32
                }
              },
              "required": [
                "account_id",
                "billing_address",
                "billing_emails",
                "billing_group_id",
                "billing_group_name",
                "country",
                "country_code",
                "default_cloud",
                "estimated_balance",
                "payment_method",
                "project_name",
                "vat_id"
              ]
            }
          }
        },
        "required": [
          "project_membership",
          "projects"
        ]
      },
      "ProjectPrivatelinkAvailabilityListResponse": {
        "type": "object",
        "description": "ProjectPrivatelinkAvailabilityListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "privatelink_availability": {
            "type": "array",
            "description": "Privatelink pricing information for supported clouds",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly privatelink price in this cloud region"
                }
              },
              "required": [
                "cloud_name",
                "price_usd"
              ]
            }
          }
        },
        "required": [
          "privatelink_availability"
        ]
      },
      "ProjectTagsListResponse": {
        "type": "object",
        "description": "ProjectTagsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        }
      },
      "ProjectTagsReplaceRequestBody": {
        "type": "object",
        "description": "ProjectTagsReplaceRequestBody",
        "properties": {
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        }
      },
      "ProjectTagsReplaceResponse": {
        "type": "object",
        "description": "ProjectTagsReplaceResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectTagsUpdateRequestBody": {
        "type": "object",
        "description": "ProjectTagsUpdateRequestBody",
        "properties": {
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        }
      },
      "ProjectTagsUpdateResponse": {
        "type": "object",
        "description": "ProjectTagsUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectUpdateRequestBody": {
        "type": "object",
        "description": "ProjectUpdateRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "add_account_owners_admin_access": {
            "type": "boolean",
            "description": "If account_id is set, grant account owner team admin access to this project"
          },
          "address_lines": {
            "type": "array",
            "description": "Address lines",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          },
          "billing_address": {
            "type": "string",
            "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
            "maxLength": 1000
          },
          "billing_currency": {
            "type": "string",
            "description": "Billing currency",
            "enum": [
              "AUD",
              "CAD",
              "CHF",
              "DKK",
              "EUR",
              "GBP",
              "JPY",
              "NOK",
              "NZD",
              "SEK",
              "SGD",
              "USD"
            ]
          },
          "billing_emails": {
            "type": "array",
            "description": "List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "email"
              ]
            }
          },
          "billing_extra_text": {
            "type": "string",
            "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
            "maxLength": 1000
          },
          "billing_group_id": {
            "type": "string",
            "description": "Billing group ID",
            "minLength": 36,
            "maxLength": 36
          },
          "card_id": {
            "type": "string",
            "description": "Credit card ID",
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "description": "Address city",
            "maxLength": 512
          },
          "cloud": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "country_code": {
            "type": "string",
            "description": "Two letter country code for billing country",
            "maxLength": 2
          },
          "project_name": {
            "type": "string",
            "description": "Project name",
            "maxLength": 63
          },
          "state": {
            "type": "string",
            "description": "Address state",
            "maxLength": 128
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          },
          "tech_emails": {
            "type": "array",
            "description": "List of project billing email addresses",
            "maxItems": 10,
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "email"
              ]
            }
          },
          "vat_id": {
            "type": "string",
            "description": "EU VAT Identification Number",
            "maxLength": 64
          },
          "zip_code": {
            "type": "string",
            "description": "Address zip code",
            "maxLength": 32
          }
        }
      },
      "ProjectUpdateResponse": {
        "type": "object",
        "description": "ProjectUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "project": {
            "type": "object",
            "description": "Project information",
            "properties": {
              "account_id": {
                "type": "string",
                "description": "Account ID",
                "maxLength": 36
              },
              "account_name": {
                "type": "string",
                "description": "Account name",
                "maxLength": 128
              },
              "address_lines": {
                "type": "array",
                "description": "Address lines",
                "maxItems": 16,
                "items": {
                  "type": "string"
                }
              },
              "available_credits": {
                "type": "string",
                "description": "Available credits, in USD"
              },
              "billing_address": {
                "type": "string",
                "description": "DEPRECATED: use split address fields like company, address_lines, zip_code, city and state instead",
                "maxLength": 1000
              },
              "billing_currency": {
                "type": "string",
                "description": "Billing currency",
                "enum": [
                  "AUD",
                  "CAD",
                  "CHF",
                  "DKK",
                  "EUR",
                  "GBP",
                  "JPY",
                  "NOK",
                  "NZD",
                  "SEK",
                  "SGD",
                  "USD"
                ]
              },
              "billing_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "billing_extra_text": {
                "type": "string",
                "description": "Extra text to be included in all project invoices, e.g. purchase order or cost center number",
                "maxLength": 1000
              },
              "billing_group_id": {
                "type": "string",
                "description": "Billing group ID",
                "minLength": 36,
                "maxLength": 36
              },
              "billing_group_name": {
                "type": "string",
                "description": "Billing group name",
                "maxLength": 128
              },
              "card_info": {
                "type": "object",
                "description": "Credit card assigned to the project",
                "properties": {
                  "brand": {
                    "type": "string",
                    "description": "Brand"
                  },
                  "card_id": {
                    "type": "string",
                    "description": "Credit card ID",
                    "maxLength": 64
                  },
                  "country": {
                    "type": "string",
                    "description": "Country",
                    "maxLength": 128
                  },
                  "country_code": {
                    "type": "string",
                    "description": "Two letter ISO country code",
                    "maxLength": 2
                  },
                  "exp_month": {
                    "type": "integer",
                    "description": "Expiration month",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "exp_year": {
                    "type": "integer",
                    "description": "Expiration year",
                    "minimum": 2015,
                    "maximum": 2100
                  },
                  "last4": {
                    "type": "string",
                    "description": "Credit card last four digits"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name on the credit card",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  }
                },
                "required": [
                  "brand",
                  "card_id",
                  "country",
                  "country_code",
                  "exp_month",
                  "exp_year",
                  "last4",
                  "name",
                  "user_email"
                ]
              },
              "city": {
                "type": "string",
                "description": "Address city",
                "maxLength": 512
              },
              "company": {
                "type": "string",
                "description": "Name of a company",
                "maxLength": 128
              },
              "country": {
                "type": "string",
                "description": "Billing country",
                "maxLength": 128
              },
              "country_code": {
                "type": "string",
                "description": "Two letter ISO country code",
                "maxLength": 2
              },
              "default_cloud": {
                "type": "string",
                "description": "Default cloud to use when launching services",
                "maxLength": 256
              },
              "end_of_life_extension": {
                "type": "object",
                "description": "End of life extension information",
                "properties": {
                  "elasticsearch": {
                    "type": "object",
                    "description": "Service EOL extension",
                    "properties": {
                      "eol_date": {
                        "type": "string",
                        "description": "Extended EOL date"
                      },
                      "version": {
                        "type": "string",
                        "description": "Service version"
                      }
                    },
                    "required": [
                      "eol_date",
                      "version"
                    ]
                  }
                }
              },
              "estimated_balance": {
                "type": "string",
                "description": "Estimated balance, in USD"
              },
              "estimated_balance_local": {
                "type": "string",
                "description": "Estimated balance, in billing currency"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method"
              },
              "project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "state": {
                "type": "string",
                "description": "Address state",
                "maxLength": 128
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "tech_emails": {
                "type": "array",
                "description": "List of project billing email addresses",
                "maxItems": 10,
                "items": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    }
                  },
                  "required": [
                    "email"
                  ]
                }
              },
              "tenant_id": {
                "type": "string",
                "description": "Tenant ID"
              },
              "trial_expiration_time": {
                "type": "string",
                "description": "Trial expiration time (ISO 8601)",
                "maxLength": 36
              },
              "vat_id": {
                "type": "string",
                "description": "EU VAT Identification Number",
                "maxLength": 64
              },
              "zip_code": {
                "type": "string",
                "description": "Address zip code",
                "maxLength": 32
              }
            },
            "required": [
              "account_id",
              "billing_address",
              "billing_emails",
              "billing_group_id",
              "billing_group_name",
              "country",
              "country_code",
              "default_cloud",
              "estimated_balance",
              "payment_method",
              "project_name",
              "vat_id"
            ]
          }
        },
        "required": [
          "project"
        ]
      },
      "ProjectUserListResponse": {
        "type": "object",
        "description": "ProjectUserListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "invitations": {
            "type": "array",
            "description": "List of pending invitations",
            "items": {
              "type": "object",
              "properties": {
                "invite_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "inviting_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "member_type": {
                  "type": "string",
                  "description": "Project member type",
                  "enum": [
                    "admin",
                    "developer",
                    "operator",
                    "read_only"
                  ]
                }
              },
              "required": [
                "invite_time",
                "invited_user_email",
                "inviting_user_email",
                "member_type"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "users": {
            "type": "array",
            "description": "List of project's users",
            "items": {
              "type": "object",
              "properties": {
                "auth": {
                  "type": "array",
                  "description": "List of user's required authentication methods",
                  "items": {
                    "type": "string"
                  }
                },
                "billing_contact": {
                  "type": "boolean",
                  "description": "Set for project's billing contacts"
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "member_type": {
                  "type": "string",
                  "description": "Project member type",
                  "enum": [
                    "admin",
                    "developer",
                    "operator",
                    "read_only"
                  ]
                },
                "real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "auth",
                "billing_contact",
                "create_time",
                "member_type",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          }
        },
        "required": [
          "invitations",
          "users"
        ]
      },
      "ProjectUserRemoveResponse": {
        "type": "object",
        "description": "ProjectUserRemoveResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectUserUpdateRequestBody": {
        "type": "object",
        "description": "ProjectUserUpdateRequestBody",
        "properties": {
          "member_type": {
            "type": "string",
            "description": "Project member type",
            "enum": [
              "admin",
              "developer",
              "operator",
              "read_only"
            ]
          }
        },
        "required": [
          "member_type"
        ]
      },
      "ProjectUserUpdateResponse": {
        "type": "object",
        "description": "ProjectUserUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "VpcCreateRequestBody": {
        "type": "object",
        "description": "VpcCreateRequestBody",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connection requests for the VPC",
            "maxItems": 128,
            "items": {
              "type": "object",
              "properties": {
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region on AWS. May be omitted or set to null if the peer is in the same region as the Aiven project VPC. Omit or set to null on GCP",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
                  "maxLength": 1024
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "peer_cloud_account",
                "peer_vpc"
              ]
            }
          }
        },
        "required": [
          "cloud_name",
          "network_cidr",
          "peering_connections"
        ]
      },
      "VpcCreateResponse": {
        "type": "object",
        "description": "VpcCreateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "create_time": {
            "type": "string",
            "description": "VPC creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connections",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "VPC peering connection creation timestamp",
                  "maxLength": 36
                },
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region in AWS clouds. Always null in GCP and Azure clouds",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
                  "maxLength": 1024
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC peering connection state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "APPROVED_PEER_REQUESTED",
                    "DELETED",
                    "DELETED_BY_PEER",
                    "DELETING",
                    "INVALID_SPECIFICATION",
                    "PENDING_PEER",
                    "REJECTED_BY_PEER"
                  ]
                },
                "state_info": {
                  "type": "object",
                  "description": "State-specific help or error information",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Human-readable information message"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of state information"
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings if any",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conflicting_aws_account_id": {
                            "type": "string",
                            "description": "AWS account id of conflicting VPC"
                          },
                          "conflicting_aws_vpc_id": {
                            "type": "string",
                            "description": "VPC id which is conflicting with the current one"
                          },
                          "conflicting_aws_vpc_peering_connection_id": {
                            "type": "string",
                            "description": "AWS VPC connection id which is conflicting with current VPC"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message to be shown to the user"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of warning",
                            "enum": [
                              "overlapping-peer-vpc-ip-ranges"
                            ]
                          }
                        },
                        "required": [
                          "message",
                          "type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to the VPC peering connection",
                  "maxLength": 36
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": {
                    "type": "string"
                  }
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering"
                  ]
                }
              },
              "required": [
                "create_time",
                "peer_azure_app_id",
                "peer_azure_tenant_id",
                "peer_cloud_account",
                "peer_resource_group",
                "peer_vpc",
                "state",
                "state_info",
                "update_time",
                "user_peer_network_cidrs",
                "vpc_peering_connection_type"
              ]
            }
          },
          "pending_build_only_peering_connections": {
            "type": "string",
            "description": "VPC rebuild is scheduled",
            "maxLength": 36
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "DELETED",
              "DELETING"
            ]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to VPC",
            "maxLength": 36
          }
        },
        "required": [
          "cloud_name",
          "create_time",
          "network_cidr",
          "peering_connections",
          "project_vpc_id",
          "state",
          "update_time"
        ]
      },
      "VpcDeleteResponse": {
        "type": "object",
        "description": "VpcDeleteResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "create_time": {
            "type": "string",
            "description": "VPC creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connections",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "VPC peering connection creation timestamp",
                  "maxLength": 36
                },
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region in AWS clouds. Always null in GCP and Azure clouds",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
                  "maxLength": 1024
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC peering connection state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "APPROVED_PEER_REQUESTED",
                    "DELETED",
                    "DELETED_BY_PEER",
                    "DELETING",
                    "INVALID_SPECIFICATION",
                    "PENDING_PEER",
                    "REJECTED_BY_PEER"
                  ]
                },
                "state_info": {
                  "type": "object",
                  "description": "State-specific help or error information",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Human-readable information message"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of state information"
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings if any",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conflicting_aws_account_id": {
                            "type": "string",
                            "description": "AWS account id of conflicting VPC"
                          },
                          "conflicting_aws_vpc_id": {
                            "type": "string",
                            "description": "VPC id which is conflicting with the current one"
                          },
                          "conflicting_aws_vpc_peering_connection_id": {
                            "type": "string",
                            "description": "AWS VPC connection id which is conflicting with current VPC"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message to be shown to the user"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of warning",
                            "enum": [
                              "overlapping-peer-vpc-ip-ranges"
                            ]
                          }
                        },
                        "required": [
                          "message",
                          "type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to the VPC peering connection",
                  "maxLength": 36
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": {
                    "type": "string"
                  }
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering"
                  ]
                }
              },
              "required": [
                "create_time",
                "peer_azure_app_id",
                "peer_azure_tenant_id",
                "peer_cloud_account",
                "peer_resource_group",
                "peer_vpc",
                "state",
                "state_info",
                "update_time",
                "user_peer_network_cidrs",
                "vpc_peering_connection_type"
              ]
            }
          },
          "pending_build_only_peering_connections": {
            "type": "string",
            "description": "VPC rebuild is scheduled",
            "maxLength": 36
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "DELETED",
              "DELETING"
            ]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to VPC",
            "maxLength": 36
          }
        },
        "required": [
          "cloud_name",
          "create_time",
          "network_cidr",
          "peering_connections",
          "project_vpc_id",
          "state",
          "update_time"
        ]
      },
      "VpcGetResponse": {
        "type": "object",
        "description": "VpcGetResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "create_time": {
            "type": "string",
            "description": "VPC creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connections",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "VPC peering connection creation timestamp",
                  "maxLength": 36
                },
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region in AWS clouds. Always null in GCP and Azure clouds",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
                  "maxLength": 1024
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC peering connection state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "APPROVED_PEER_REQUESTED",
                    "DELETED",
                    "DELETED_BY_PEER",
                    "DELETING",
                    "INVALID_SPECIFICATION",
                    "PENDING_PEER",
                    "REJECTED_BY_PEER"
                  ]
                },
                "state_info": {
                  "type": "object",
                  "description": "State-specific help or error information",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Human-readable information message"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of state information"
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings if any",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conflicting_aws_account_id": {
                            "type": "string",
                            "description": "AWS account id of conflicting VPC"
                          },
                          "conflicting_aws_vpc_id": {
                            "type": "string",
                            "description": "VPC id which is conflicting with the current one"
                          },
                          "conflicting_aws_vpc_peering_connection_id": {
                            "type": "string",
                            "description": "AWS VPC connection id which is conflicting with current VPC"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message to be shown to the user"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of warning",
                            "enum": [
                              "overlapping-peer-vpc-ip-ranges"
                            ]
                          }
                        },
                        "required": [
                          "message",
                          "type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to the VPC peering connection",
                  "maxLength": 36
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": {
                    "type": "string"
                  }
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering"
                  ]
                }
              },
              "required": [
                "create_time",
                "peer_azure_app_id",
                "peer_azure_tenant_id",
                "peer_cloud_account",
                "peer_resource_group",
                "peer_vpc",
                "state",
                "state_info",
                "update_time",
                "user_peer_network_cidrs",
                "vpc_peering_connection_type"
              ]
            }
          },
          "pending_build_only_peering_connections": {
            "type": "string",
            "description": "VPC rebuild is scheduled",
            "maxLength": 36
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "DELETED",
              "DELETING"
            ]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to VPC",
            "maxLength": 36
          }
        },
        "required": [
          "cloud_name",
          "create_time",
          "network_cidr",
          "peering_connections",
          "project_vpc_id",
          "state",
          "update_time"
        ]
      },
      "VpcListResponse": {
        "type": "object",
        "description": "VpcListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "vpcs": {
            "type": "array",
            "description": "List of VPCs",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "create_time": {
                  "type": "string",
                  "description": "VPC creation timestamp",
                  "maxLength": 36
                },
                "network_cidr": {
                  "type": "string",
                  "description": "IPv4 network range CIDR",
                  "maxLength": 18
                },
                "project_vpc_id": {
                  "type": "string",
                  "description": "Project VPC ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "DELETED",
                    "DELETING"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to VPC",
                  "maxLength": 36
                }
              },
              "required": [
                "cloud_name",
                "create_time",
                "network_cidr",
                "project_vpc_id",
                "state",
                "update_time"
              ]
            }
          }
        },
        "required": [
          "vpcs"
        ]
      },
      "VpcPeeringConnectionCreateRequestBody": {
        "type": "object",
        "description": "VpcPeeringConnectionCreateRequestBody",
        "properties": {
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region on AWS. May be omitted or set to null if the peer is in the same region as the Aiven project VPC. Omit or set to null on GCP",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
            "maxLength": 1024
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "peer_cloud_account",
          "peer_vpc"
        ]
      },
      "VpcPeeringConnectionCreateResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionCreateResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "VPC peering connection creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region in AWS clouds. Always null in GCP and Azure clouds",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
            "maxLength": 1024
          },
          "state": {
            "type": "string",
            "description": "Project VPC peering connection state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "APPROVED_PEER_REQUESTED",
              "DELETED",
              "DELETED_BY_PEER",
              "DELETING",
              "INVALID_SPECIFICATION",
              "PENDING_PEER",
              "REJECTED_BY_PEER"
            ]
          },
          "state_info": {
            "type": "object",
            "description": "State-specific help or error information",
            "properties": {
              "message": {
                "type": "string",
                "description": "Human-readable information message"
              },
              "type": {
                "type": "string",
                "description": "Type of state information"
              },
              "warnings": {
                "type": "array",
                "description": "List of warnings if any",
                "items": {
                  "type": "object",
                  "properties": {
                    "conflicting_aws_account_id": {
                      "type": "string",
                      "description": "AWS account id of conflicting VPC"
                    },
                    "conflicting_aws_vpc_id": {
                      "type": "string",
                      "description": "VPC id which is conflicting with the current one"
                    },
                    "conflicting_aws_vpc_peering_connection_id": {
                      "type": "string",
                      "description": "AWS VPC connection id which is conflicting with current VPC"
                    },
                    "message": {
                      "type": "string",
                      "description": "Warning message to be shown to the user"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of warning",
                      "enum": [
                        "overlapping-peer-vpc-ip-ranges"
                      ]
                    }
                  },
                  "required": [
                    "message",
                    "type"
                  ]
                }
              }
            },
            "required": [
              "message",
              "type"
            ]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to the VPC peering connection",
            "maxLength": 36
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": {
              "type": "string"
            }
          },
          "vpc_peering_connection_type": {
            "type": "string",
            "description": "Type of network connection from the VPC",
            "enum": [
              "aws-tgw-vpc-attachment",
              "aws-vpc-peering-connection",
              "azure-vnet-peering",
              "google-vpc-peering"
            ]
          }
        },
        "required": [
          "create_time",
          "peer_azure_app_id",
          "peer_azure_tenant_id",
          "peer_cloud_account",
          "peer_resource_group",
          "peer_vpc",
          "state",
          "state_info",
          "update_time",
          "user_peer_network_cidrs",
          "vpc_peering_connection_type"
        ]
      },
      "VpcPeeringConnectionDeleteResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionDeleteResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "VPC peering connection creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region in AWS clouds. Always null in GCP and Azure clouds",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
            "maxLength": 1024
          },
          "state": {
            "type": "string",
            "description": "Project VPC peering connection state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "APPROVED_PEER_REQUESTED",
              "DELETED",
              "DELETED_BY_PEER",
              "DELETING",
              "INVALID_SPECIFICATION",
              "PENDING_PEER",
              "REJECTED_BY_PEER"
            ]
          },
          "state_info": {
            "type": "object",
            "description": "State-specific help or error information",
            "properties": {
              "message": {
                "type": "string",
                "description": "Human-readable information message"
              },
              "type": {
                "type": "string",
                "description": "Type of state information"
              },
              "warnings": {
                "type": "array",
                "description": "List of warnings if any",
                "items": {
                  "type": "object",
                  "properties": {
                    "conflicting_aws_account_id": {
                      "type": "string",
                      "description": "AWS account id of conflicting VPC"
                    },
                    "conflicting_aws_vpc_id": {
                      "type": "string",
                      "description": "VPC id which is conflicting with the current one"
                    },
                    "conflicting_aws_vpc_peering_connection_id": {
                      "type": "string",
                      "description": "AWS VPC connection id which is conflicting with current VPC"
                    },
                    "message": {
                      "type": "string",
                      "description": "Warning message to be shown to the user"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of warning",
                      "enum": [
                        "overlapping-peer-vpc-ip-ranges"
                      ]
                    }
                  },
                  "required": [
                    "message",
                    "type"
                  ]
                }
              }
            },
            "required": [
              "message",
              "type"
            ]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to the VPC peering connection",
            "maxLength": 36
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": {
              "type": "string"
            }
          },
          "vpc_peering_connection_type": {
            "type": "string",
            "description": "Type of network connection from the VPC",
            "enum": [
              "aws-tgw-vpc-attachment",
              "aws-vpc-peering-connection",
              "azure-vnet-peering",
              "google-vpc-peering"
            ]
          }
        },
        "required": [
          "create_time",
          "peer_azure_app_id",
          "peer_azure_tenant_id",
          "peer_cloud_account",
          "peer_resource_group",
          "peer_vpc",
          "state",
          "state_info",
          "update_time",
          "user_peer_network_cidrs",
          "vpc_peering_connection_type"
        ]
      },
      "VpcPeeringConnectionUpdateRequestBody": {
        "type": "object",
        "description": "VpcPeeringConnectionUpdateRequestBody",
        "properties": {
          "add": {
            "type": "array",
            "description": "CIDRs to add using a specific peering connection",
            "maxItems": 128,
            "items": {
              "type": "object",
              "properties": {
                "cidr": {
                  "type": "string",
                  "description": "IPv4 network range CIDR",
                  "maxLength": 18
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
                  "maxLength": 1024
                }
              },
              "required": [
                "cidr",
                "peer_cloud_account",
                "peer_vpc"
              ]
            }
          },
          "delete": {
            "type": "array",
            "description": "Network CIDRs to remove from the VPC's peering connections' user_peer_network_cidrs",
            "maxItems": 128,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VpcPeeringConnectionUpdateResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionUpdateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "create_time": {
            "type": "string",
            "description": "VPC creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "network_cidr": {
            "type": "string",
            "description": "IPv4 network range CIDR",
            "maxLength": 18
          },
          "peering_connections": {
            "type": "array",
            "description": "List of peering connections",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "VPC peering connection creation timestamp",
                  "maxLength": 36
                },
                "peer_azure_app_id": {
                  "type": "string",
                  "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
                  "maxLength": 1024
                },
                "peer_azure_tenant_id": {
                  "type": "string",
                  "description": "Azure tenant id in UUID4 form",
                  "maxLength": 1024
                },
                "peer_cloud_account": {
                  "type": "string",
                  "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
                  "maxLength": 1024
                },
                "peer_region": {
                  "type": "string",
                  "description": "The peer VPC's region in AWS clouds. Always null in GCP and Azure clouds",
                  "maxLength": 1024
                },
                "peer_resource_group": {
                  "type": "string",
                  "description": "Azure resource group name of the peered VPC",
                  "maxLength": 1024
                },
                "peer_vpc": {
                  "type": "string",
                  "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
                  "maxLength": 1024
                },
                "state": {
                  "type": "string",
                  "description": "Project VPC peering connection state",
                  "enum": [
                    "ACTIVE",
                    "APPROVED",
                    "APPROVED_PEER_REQUESTED",
                    "DELETED",
                    "DELETED_BY_PEER",
                    "DELETING",
                    "INVALID_SPECIFICATION",
                    "PENDING_PEER",
                    "REJECTED_BY_PEER"
                  ]
                },
                "state_info": {
                  "type": "object",
                  "description": "State-specific help or error information",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Human-readable information message"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of state information"
                    },
                    "warnings": {
                      "type": "array",
                      "description": "List of warnings if any",
                      "items": {
                        "type": "object",
                        "properties": {
                          "conflicting_aws_account_id": {
                            "type": "string",
                            "description": "AWS account id of conflicting VPC"
                          },
                          "conflicting_aws_vpc_id": {
                            "type": "string",
                            "description": "VPC id which is conflicting with the current one"
                          },
                          "conflicting_aws_vpc_peering_connection_id": {
                            "type": "string",
                            "description": "AWS VPC connection id which is conflicting with current VPC"
                          },
                          "message": {
                            "type": "string",
                            "description": "Warning message to be shown to the user"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of warning",
                            "enum": [
                              "overlapping-peer-vpc-ip-ranges"
                            ]
                          }
                        },
                        "required": [
                          "message",
                          "type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "message",
                    "type"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp of last change to the VPC peering connection",
                  "maxLength": 36
                },
                "user_peer_network_cidrs": {
                  "type": "array",
                  "description": "List of private IPv4 ranges to route through the peering connection",
                  "maxItems": 128,
                  "items": {
                    "type": "string"
                  }
                },
                "vpc_peering_connection_type": {
                  "type": "string",
                  "description": "Type of network connection from the VPC",
                  "enum": [
                    "aws-tgw-vpc-attachment",
                    "aws-vpc-peering-connection",
                    "azure-vnet-peering",
                    "google-vpc-peering"
                  ]
                }
              },
              "required": [
                "create_time",
                "peer_azure_app_id",
                "peer_azure_tenant_id",
                "peer_cloud_account",
                "peer_resource_group",
                "peer_vpc",
                "state",
                "state_info",
                "update_time",
                "user_peer_network_cidrs",
                "vpc_peering_connection_type"
              ]
            }
          },
          "pending_build_only_peering_connections": {
            "type": "string",
            "description": "VPC rebuild is scheduled",
            "maxLength": 36
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "state": {
            "type": "string",
            "description": "Project VPC state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "DELETED",
              "DELETING"
            ]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to VPC",
            "maxLength": 36
          }
        },
        "required": [
          "cloud_name",
          "create_time",
          "network_cidr",
          "peering_connections",
          "project_vpc_id",
          "state",
          "update_time"
        ]
      },
      "VpcPeeringConnectionWithRegionDeleteResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionWithRegionDeleteResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "VPC peering connection creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region in AWS clouds. Always null in GCP and Azure clouds",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
            "maxLength": 1024
          },
          "state": {
            "type": "string",
            "description": "Project VPC peering connection state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "APPROVED_PEER_REQUESTED",
              "DELETED",
              "DELETED_BY_PEER",
              "DELETING",
              "INVALID_SPECIFICATION",
              "PENDING_PEER",
              "REJECTED_BY_PEER"
            ]
          },
          "state_info": {
            "type": "object",
            "description": "State-specific help or error information",
            "properties": {
              "message": {
                "type": "string",
                "description": "Human-readable information message"
              },
              "type": {
                "type": "string",
                "description": "Type of state information"
              },
              "warnings": {
                "type": "array",
                "description": "List of warnings if any",
                "items": {
                  "type": "object",
                  "properties": {
                    "conflicting_aws_account_id": {
                      "type": "string",
                      "description": "AWS account id of conflicting VPC"
                    },
                    "conflicting_aws_vpc_id": {
                      "type": "string",
                      "description": "VPC id which is conflicting with the current one"
                    },
                    "conflicting_aws_vpc_peering_connection_id": {
                      "type": "string",
                      "description": "AWS VPC connection id which is conflicting with current VPC"
                    },
                    "message": {
                      "type": "string",
                      "description": "Warning message to be shown to the user"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of warning",
                      "enum": [
                        "overlapping-peer-vpc-ip-ranges"
                      ]
                    }
                  },
                  "required": [
                    "message",
                    "type"
                  ]
                }
              }
            },
            "required": [
              "message",
              "type"
            ]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to the VPC peering connection",
            "maxLength": 36
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": {
              "type": "string"
            }
          },
          "vpc_peering_connection_type": {
            "type": "string",
            "description": "Type of network connection from the VPC",
            "enum": [
              "aws-tgw-vpc-attachment",
              "aws-vpc-peering-connection",
              "azure-vnet-peering",
              "google-vpc-peering"
            ]
          }
        },
        "required": [
          "create_time",
          "peer_azure_app_id",
          "peer_azure_tenant_id",
          "peer_cloud_account",
          "peer_resource_group",
          "peer_vpc",
          "state",
          "state_info",
          "update_time",
          "user_peer_network_cidrs",
          "vpc_peering_connection_type"
        ]
      },
      "VpcPeeringConnectionWithResourceGroupDeleteResponse": {
        "type": "object",
        "description": "VpcPeeringConnectionWithResourceGroupDeleteResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "VPC peering connection creation timestamp",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "peer_azure_app_id": {
            "type": "string",
            "description": "Azure app registration id in UUID4 form that is allowed to create a peering to the peer vnet",
            "maxLength": 1024
          },
          "peer_azure_tenant_id": {
            "type": "string",
            "description": "Azure tenant id in UUID4 form",
            "maxLength": 1024
          },
          "peer_cloud_account": {
            "type": "string",
            "description": "AWS account ID, GCP project ID, or Azure subscription ID of the peered VPC",
            "maxLength": 1024
          },
          "peer_region": {
            "type": "string",
            "description": "The peer VPC's region in AWS clouds. Always null in GCP and Azure clouds",
            "maxLength": 1024
          },
          "peer_resource_group": {
            "type": "string",
            "description": "Azure resource group name of the peered VPC",
            "maxLength": 1024
          },
          "peer_vpc": {
            "type": "string",
            "description": "AWS VPC ID, GCP VPC network name, or Azure Virtual network name of the peered VPC",
            "maxLength": 1024
          },
          "state": {
            "type": "string",
            "description": "Project VPC peering connection state",
            "enum": [
              "ACTIVE",
              "APPROVED",
              "APPROVED_PEER_REQUESTED",
              "DELETED",
              "DELETED_BY_PEER",
              "DELETING",
              "INVALID_SPECIFICATION",
              "PENDING_PEER",
              "REJECTED_BY_PEER"
            ]
          },
          "state_info": {
            "type": "object",
            "description": "State-specific help or error information",
            "properties": {
              "message": {
                "type": "string",
                "description": "Human-readable information message"
              },
              "type": {
                "type": "string",
                "description": "Type of state information"
              },
              "warnings": {
                "type": "array",
                "description": "List of warnings if any",
                "items": {
                  "type": "object",
                  "properties": {
                    "conflicting_aws_account_id": {
                      "type": "string",
                      "description": "AWS account id of conflicting VPC"
                    },
                    "conflicting_aws_vpc_id": {
                      "type": "string",
                      "description": "VPC id which is conflicting with the current one"
                    },
                    "conflicting_aws_vpc_peering_connection_id": {
                      "type": "string",
                      "description": "AWS VPC connection id which is conflicting with current VPC"
                    },
                    "message": {
                      "type": "string",
                      "description": "Warning message to be shown to the user"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of warning",
                      "enum": [
                        "overlapping-peer-vpc-ip-ranges"
                      ]
                    }
                  },
                  "required": [
                    "message",
                    "type"
                  ]
                }
              }
            },
            "required": [
              "message",
              "type"
            ]
          },
          "update_time": {
            "type": "string",
            "description": "Timestamp of last change to the VPC peering connection",
            "maxLength": 36
          },
          "user_peer_network_cidrs": {
            "type": "array",
            "description": "List of private IPv4 ranges to route through the peering connection",
            "maxItems": 128,
            "items": {
              "type": "string"
            }
          },
          "vpc_peering_connection_type": {
            "type": "string",
            "description": "Type of network connection from the VPC",
            "enum": [
              "aws-tgw-vpc-attachment",
              "aws-vpc-peering-connection",
              "azure-vnet-peering",
              "google-vpc-peering"
            ]
          }
        },
        "required": [
          "create_time",
          "peer_azure_app_id",
          "peer_azure_tenant_id",
          "peer_cloud_account",
          "peer_resource_group",
          "peer_vpc",
          "state",
          "state_info",
          "update_time",
          "user_peer_network_cidrs",
          "vpc_peering_connection_type"
        ]
      },
      "ProjectCreditsClaimRequestBody": {
        "type": "object",
        "description": "ProjectCreditsClaimRequestBody",
        "properties": {
          "code": {
            "type": "string",
            "description": "Credit code",
            "maxLength": 1024
          }
        },
        "required": [
          "code"
        ]
      },
      "ProjectCreditsClaimResponse": {
        "type": "object",
        "description": "ProjectCreditsClaimResponse",
        "properties": {
          "credit": {
            "type": "object",
            "description": "Assigned credit",
            "properties": {
              "code": {
                "type": "string",
                "description": "Credit code",
                "maxLength": 1024
              },
              "expire_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "remaining_value": {
                "type": "string",
                "description": "Remaining credit value"
              },
              "start_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "type": {
                "type": "string",
                "description": "Credit type",
                "enum": [
                  "discount",
                  "employee",
                  "evaluation",
                  "internal",
                  "other",
                  "outage",
                  "partner",
                  "promotion",
                  "purchase",
                  "sponsorship",
                  "trial",
                  "trial_over"
                ]
              },
              "value": {
                "type": "string",
                "description": "Original credit value, or for expired credits, the consumed credit value"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "credit"
        ]
      },
      "ProjectCreditsListResponse": {
        "type": "object",
        "description": "ProjectCreditsListResponse",
        "properties": {
          "credits": {
            "type": "array",
            "description": "List of credits assigned to a project",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Credit code",
                  "maxLength": 1024
                },
                "expire_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "remaining_value": {
                  "type": "string",
                  "description": "Remaining credit value"
                },
                "start_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "type": {
                  "type": "string",
                  "description": "Credit type",
                  "enum": [
                    "discount",
                    "employee",
                    "evaluation",
                    "internal",
                    "other",
                    "outage",
                    "partner",
                    "promotion",
                    "purchase",
                    "sponsorship",
                    "trial",
                    "trial_over"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "Original credit value, or for expired credits, the consumed credit value"
                }
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "credits"
        ]
      },
      "ProjectInvoiceListResponse": {
        "type": "object",
        "description": "ProjectInvoiceListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "invoices": {
            "type": "array",
            "description": "List of project invoices",
            "items": {
              "type": "object",
              "properties": {
                "billing_group_id": {
                  "type": "string",
                  "description": "Billing group ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "billing_group_name": {
                  "type": "string",
                  "description": "Billing group name",
                  "maxLength": 128
                },
                "currency": {
                  "type": "string",
                  "description": "Billing currency",
                  "enum": [
                    "AUD",
                    "CAD",
                    "CHF",
                    "DKK",
                    "EUR",
                    "GBP",
                    "JPY",
                    "NOK",
                    "NZD",
                    "SEK",
                    "SGD",
                    "USD"
                  ]
                },
                "download_cookie": {
                  "type": "string",
                  "description": "Authentication cookie for downloads"
                },
                "invoice_number": {
                  "type": "string",
                  "description": "Invoice number",
                  "maxLength": 128
                },
                "period_begin": {
                  "type": "string",
                  "description": "Period begin",
                  "maxLength": 36
                },
                "period_end": {
                  "type": "string",
                  "description": "Period end",
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Invoice state"
                },
                "total_inc_vat": {
                  "type": "string",
                  "description": "Total including taxes"
                },
                "total_vat_zero": {
                  "type": "string",
                  "description": "Total excluding taxes"
                }
              },
              "required": [
                "billing_group_id",
                "billing_group_name",
                "currency",
                "download_cookie",
                "invoice_number",
                "period_begin",
                "period_end",
                "state",
                "total_inc_vat",
                "total_vat_zero"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "invoices"
        ]
      },
      "ProjectKmsGetCAResponse": {
        "type": "object",
        "description": "ProjectKmsGetCAResponse",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM encoded certificate"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "certificate"
        ]
      },
      "ServiceClickHouseDatabaseCreateRequestBody": {
        "type": "object",
        "description": "ServiceClickHouseDatabaseCreateRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 40
          }
        },
        "required": [
          "database"
        ]
      },
      "ServiceClickHouseDatabaseCreateResponse": {
        "type": "object",
        "description": "ServiceClickHouseDatabaseCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceClickHouseDatabaseDeleteResponse": {
        "type": "object",
        "description": "ServiceClickHouseDatabaseDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceClickHouseQueryStatsResponse": {
        "type": "object",
        "description": "ServiceClickHouseQueryStatsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {
                "calls": {
                  "type": "integer",
                  "description": "Number of calls"
                },
                "database": {
                  "type": "string",
                  "description": "Database"
                },
                "max_time": {
                  "type": "integer",
                  "description": "Maximum query duration in milliseconds"
                },
                "mean_time": {
                  "type": "integer",
                  "description": "Average query duration in milliseconds"
                },
                "min_time": {
                  "type": "integer",
                  "description": "Minimum query duration in milliseconds"
                },
                "p95_time": {
                  "type": "integer",
                  "description": "Query duration 95th percentile in milliseconds"
                },
                "query": {
                  "type": "string",
                  "description": "Normalized query"
                },
                "rows": {
                  "type": "number",
                  "description": "Average number of rows per call"
                },
                "stddev_time": {
                  "type": "integer",
                  "description": "Query duration standard deviation in milliseconds"
                },
                "total_time": {
                  "type": "integer",
                  "description": "Total duration of all calls in milliseconds"
                }
              }
            }
          }
        },
        "required": [
          "queries"
        ]
      },
      "ServiceEsAclGetResponse": {
        "type": "object",
        "description": "ServiceEsAclGetResponse",
        "properties": {
          "elasticsearch_acl_config": {
            "type": "object",
            "description": "Elasticsearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of Elasticsearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Elasticsearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "Elasticsearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "Elasticsearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": [
              "acls",
              "enabled"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "elasticsearch_acl_config"
        ]
      },
      "ServiceEsAclSetRequestBody": {
        "type": "object",
        "description": "ServiceEsAclSetRequestBody",
        "properties": {
          "elasticsearch_acl_config": {
            "type": "object",
            "description": "Elasticsearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of Elasticsearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Elasticsearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "Elasticsearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "Elasticsearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": [
              "acls",
              "enabled"
            ]
          }
        },
        "required": [
          "elasticsearch_acl_config"
        ]
      },
      "ServiceEsAclSetResponse": {
        "type": "object",
        "description": "ServiceEsAclSetResponse",
        "properties": {
          "elasticsearch_acl_config": {
            "type": "object",
            "description": "Elasticsearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of Elasticsearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Elasticsearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "Elasticsearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "Elasticsearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": [
              "acls",
              "enabled"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "elasticsearch_acl_config"
        ]
      },
      "ServiceEsAclUpdateRequestBody": {
        "type": "object",
        "description": "ServiceEsAclUpdateRequestBody",
        "properties": {
          "elasticsearch_acl_config": {
            "type": "object",
            "description": "Elasticsearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of Elasticsearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Elasticsearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "Elasticsearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "Elasticsearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            }
          }
        },
        "required": [
          "elasticsearch_acl_config"
        ]
      },
      "ServiceEsAclUpdateResponse": {
        "type": "object",
        "description": "ServiceEsAclUpdateResponse",
        "properties": {
          "elasticsearch_acl_config": {
            "type": "object",
            "description": "Elasticsearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of Elasticsearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Elasticsearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "Elasticsearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "Elasticsearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable Elasticsearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": [
              "acls",
              "enabled"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "elasticsearch_acl_config"
        ]
      },
      "ServiceEsIndexDeleteResponse": {
        "type": "object",
        "description": "ServiceEsIndexDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceEsIndexListResponse": {
        "type": "object",
        "description": "ServiceEsIndexListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "indexes": {
            "type": "array",
            "description": "List of Elasticsearch indexes",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "docs": {
                  "type": "integer",
                  "description": "Number of documents in index. -1 means not available."
                },
                "health": {
                  "type": "string",
                  "description": "Index health",
                  "enum": [
                    "green",
                    "yellow",
                    "red",
                    "red*",
                    "unknown"
                  ]
                },
                "index_name": {
                  "type": "string",
                  "description": "Index name"
                },
                "number_of_replicas": {
                  "type": "integer",
                  "description": "Number of replicas for an index",
                  "minimum": 0
                },
                "number_of_shards": {
                  "type": "integer",
                  "description": "Number of shards in an index",
                  "minimum": 1
                },
                "read_only_allow_delete": {
                  "type": "boolean",
                  "description": "Whether index is set as read-only (but allows deletion). null means unknown."
                },
                "replication": {
                  "type": "object",
                  "description": "Index replication",
                  "properties": {
                    "leader_index": {
                      "type": "string",
                      "description": "Leader index name"
                    },
                    "leader_project": {
                      "type": "string",
                      "description": "Leader project name"
                    },
                    "leader_service": {
                      "type": "string",
                      "description": "Leader service name"
                    }
                  }
                },
                "size": {
                  "type": "integer",
                  "description": "Index size in bytes. -1 means not available."
                },
                "status": {
                  "type": "string",
                  "description": "Index status",
                  "enum": [
                    "unknown",
                    "open",
                    "close",
                    "none"
                  ]
                }
              },
              "required": [
                "create_time",
                "index_name",
                "number_of_replicas",
                "number_of_shards"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "indexes"
        ]
      },
      "ServiceFlinkApplicationVersionDeleteQueryResponse": {
        "type": "object",
        "description": "ServiceFlinkApplicationVersionDeleteQueryResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceFlinkApplicationVersionGetQueryResponse": {
        "type": "object",
        "description": "ServiceFlinkApplicationVersionGetQueryResponse",
        "properties": {
          "columns": {
            "type": "array",
            "description": "Columns",
            "maxItems": 256,
            "items": {
              "type": "object",
              "properties": {
                "data_type": {
                  "type": "string",
                  "description": "The data type of the column",
                  "minLength": 1,
                  "maxLength": 2048
                },
                "extras": {
                  "type": "string",
                  "description": "Column extra information",
                  "maxLength": 256
                },
                "key": {
                  "type": "string",
                  "description": "The key info of the column",
                  "maxLength": 512
                },
                "name": {
                  "type": "string",
                  "description": "The name of the column",
                  "minLength": 1,
                  "maxLength": 256
                },
                "nullable": {
                  "type": "boolean",
                  "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                },
                "watermark": {
                  "type": "string",
                  "description": "Information of the watermark if the column is used for watermark.",
                  "maxLength": 512
                }
              },
              "required": [
                "data_type",
                "name",
                "nullable"
              ]
            }
          },
          "create_time": {
            "type": "string",
            "description": "Timestamp in ISO 8601 format, always in UTC",
            "maxLength": 36
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "job_expire_time": {
            "type": "string",
            "description": "Timestamp in ISO 8601 format, always in UTC",
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Flink job id"
          },
          "job_name": {
            "type": "string",
            "description": "Flink job name"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "query_id": {
            "type": "string",
            "description": "Query id"
          },
          "query_params": {
            "type": "object",
            "description": "Parameters of the query",
            "properties": {
              "job_ttl": {
                "type": "integer",
                "description": "Max time to live (seconds) for the Flink job of the query.",
                "minimum": 5,
                "maximum": 900
              },
              "max_rows": {
                "type": "integer",
                "description": "Max rows",
                "minimum": 1,
                "maximum": 1000
              },
              "sinks": {
                "type": "array",
                "description": "Sinks",
                "maxItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "create_table": {
                      "type": "string",
                      "description": "The CREATE TABLE statement",
                      "maxLength": 4096
                    },
                    "integration_id": {
                      "type": "string",
                      "description": "Integration ID",
                      "minLength": 36,
                      "maxLength": 36
                    }
                  },
                  "required": [
                    "create_table"
                  ]
                }
              },
              "sources": {
                "type": "array",
                "description": "Sources",
                "maxItems": 64,
                "items": {
                  "type": "object",
                  "properties": {
                    "create_table": {
                      "type": "string",
                      "description": "The CREATE TABLE statement",
                      "maxLength": 4096
                    },
                    "integration_id": {
                      "type": "string",
                      "description": "Integration ID",
                      "minLength": 36,
                      "maxLength": 36
                    }
                  },
                  "required": [
                    "create_table"
                  ]
                }
              },
              "statement": {
                "type": "string",
                "description": "Job SQL statement",
                "maxLength": 50000
              }
            },
            "required": [
              "sources"
            ]
          },
          "query_type": {
            "type": "string",
            "description": "Query type",
            "enum": [
              "job",
              "table"
            ]
          },
          "rows": {
            "type": "array",
            "description": "List of rows",
            "items": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "description": "Row data keyed by the column name",
                  "properties": {}
                },
                "index": {
                  "type": "integer",
                  "description": "The unique sequence number of the row, starting from 1"
                },
                "kind": {
                  "type": "string",
                  "description": "Row kind",
                  "enum": [
                    "DELETE",
                    "INSERT",
                    "UPDATE_AFTER",
                    "UPDATE_BEFORE"
                  ]
                }
              },
              "required": [
                "data",
                "index",
                "kind"
              ]
            }
          }
        },
        "required": [
          "columns",
          "create_time",
          "job_expire_time",
          "job_name",
          "query_id",
          "rows"
        ]
      },
      "ServiceFlinkApplicationVersionListQueriesResponse": {
        "type": "object",
        "description": "ServiceFlinkApplicationVersionListQueriesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "Flink query infos",
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "job_expire_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "job_id": {
                  "type": "string",
                  "description": "Flink job id"
                },
                "job_name": {
                  "type": "string",
                  "description": "Flink job name"
                },
                "query_id": {
                  "type": "string",
                  "description": "Query id"
                },
                "query_params": {
                  "type": "object",
                  "description": "Parameters of the query",
                  "properties": {
                    "job_ttl": {
                      "type": "integer",
                      "description": "Max time to live (seconds) for the Flink job of the query.",
                      "minimum": 5,
                      "maximum": 900
                    },
                    "max_rows": {
                      "type": "integer",
                      "description": "Max rows",
                      "minimum": 1,
                      "maximum": 1000
                    },
                    "sinks": {
                      "type": "array",
                      "description": "Sinks",
                      "maxItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "create_table": {
                            "type": "string",
                            "description": "The CREATE TABLE statement",
                            "maxLength": 4096
                          },
                          "integration_id": {
                            "type": "string",
                            "description": "Integration ID",
                            "minLength": 36,
                            "maxLength": 36
                          }
                        },
                        "required": [
                          "create_table"
                        ]
                      }
                    },
                    "sources": {
                      "type": "array",
                      "description": "Sources",
                      "maxItems": 64,
                      "items": {
                        "type": "object",
                        "properties": {
                          "create_table": {
                            "type": "string",
                            "description": "The CREATE TABLE statement",
                            "maxLength": 4096
                          },
                          "integration_id": {
                            "type": "string",
                            "description": "Integration ID",
                            "minLength": 36,
                            "maxLength": 36
                          }
                        },
                        "required": [
                          "create_table"
                        ]
                      }
                    },
                    "statement": {
                      "type": "string",
                      "description": "Job SQL statement",
                      "maxLength": 50000
                    }
                  },
                  "required": [
                    "sources"
                  ]
                },
                "query_type": {
                  "type": "string",
                  "description": "Query type",
                  "enum": [
                    "job",
                    "table"
                  ]
                }
              },
              "required": [
                "columns",
                "create_time",
                "job_expire_time",
                "job_name",
                "query_id",
                "query_params",
                "query_type"
              ]
            }
          }
        },
        "required": [
          "queries"
        ]
      },
      "ServiceFlinkApplicationVersionQueryJobResponse": {
        "type": "object",
        "description": "ServiceFlinkApplicationVersionQueryJobResponse",
        "properties": {
          "canceled": {
            "type": "boolean",
            "description": "true if the job was canceled"
          },
          "details": {
            "type": "string",
            "description": "Details"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "canceled"
        ]
      },
      "ServiceFlinkCancelApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkCancelApplicationDeploymentResponse",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkCreateApplicationRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationRequestBody",
        "properties": {
          "application_version": {
            "type": "object",
            "description": "Flink ApplicationVersion",
            "properties": {
              "sinks": {
                "type": "array",
                "description": "Sinks",
                "maxItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "create_table": {
                      "type": "string",
                      "description": "The CREATE TABLE statement",
                      "maxLength": 4096
                    },
                    "integration_id": {
                      "type": "string",
                      "description": "Integration ID",
                      "minLength": 36,
                      "maxLength": 36
                    }
                  },
                  "required": [
                    "create_table"
                  ]
                }
              },
              "sources": {
                "type": "array",
                "description": "Sources",
                "maxItems": 64,
                "items": {
                  "type": "object",
                  "properties": {
                    "create_table": {
                      "type": "string",
                      "description": "The CREATE TABLE statement",
                      "maxLength": 4096
                    },
                    "integration_id": {
                      "type": "string",
                      "description": "Integration ID",
                      "minLength": 36,
                      "maxLength": 36
                    }
                  },
                  "required": [
                    "create_table"
                  ]
                }
              },
              "statement": {
                "type": "string",
                "description": "Job SQL statement",
                "maxLength": 50000
              }
            },
            "required": [
              "sinks",
              "sources",
              "statement"
            ]
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          }
        },
        "required": [
          "name"
        ]
      },
      "ServiceFlinkCreateApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "ApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Created at"
                },
                "created_by": {
                  "type": "string",
                  "description": "Created by"
                },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "sinks": {
                  "type": "array",
                  "description": "Sinks",
                  "maxItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": [
                            "data_type",
                            "name",
                            "nullable"
                          ]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Sink ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "Sources",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": [
                            "data_type",
                            "name",
                            "nullable"
                          ]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Source ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "statement": {
                  "type": "string",
                  "description": "Job SQL statement",
                  "maxLength": 50000
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "sinks",
                "sources",
                "statement",
                "version"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "current_deployment": {
            "type": "object",
            "description": "Flink ApplicationDeployment",
            "properties": {
              "created_at": {
                "type": "string",
                "description": "Created at"
              },
              "created_by": {
                "type": "string",
                "description": "Created by"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "restart_enabled": {
                "type": "boolean",
                "description": "Specifies whether a Flink Job is restarted in case it fails"
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "restart_enabled",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at"
          },
          "updated_by": {
            "type": "string",
            "description": "Updated by"
          }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkCreateApplicationDeploymentRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationDeploymentRequestBody",
        "properties": {
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "version_id"
        ]
      },
      "ServiceFlinkCreateApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationDeploymentResponse",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkCreateApplicationVersionRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationVersionRequestBody",
        "properties": {
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "create_table"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "create_table"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          }
        },
        "required": [
          "sinks",
          "sources",
          "statement"
        ]
      },
      "ServiceFlinkCreateApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationVersionResponse",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Sink ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": {
                  "type": "string",
                  "description": "Table name"
                }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Source ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": {
                  "type": "string",
                  "description": "Table name"
                }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          },
          "version": {
            "type": "integer",
            "description": "Version number"
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "sinks",
          "sources",
          "statement",
          "version"
        ]
      },
      "ServiceFlinkCreateApplicationVersionQueryRequestBody": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationVersionQueryRequestBody",
        "properties": {
          "job_ttl": {
            "type": "integer",
            "description": "Max time to live (seconds) for the Flink job of the query.",
            "minimum": 5,
            "maximum": 900
          },
          "max_rows": {
            "type": "integer",
            "description": "Max rows",
            "minimum": 1,
            "maximum": 1000
          },
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "create_table"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "create_table"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          }
        },
        "required": [
          "sources"
        ]
      },
      "ServiceFlinkCreateApplicationVersionQueryResponse": {
        "type": "object",
        "description": "ServiceFlinkCreateApplicationVersionQueryResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "query_id": {
            "type": "string",
            "description": "Query id"
          }
        },
        "required": [
          "query_id"
        ]
      },
      "ServiceFlinkDeleteApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "ApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Created at"
                },
                "created_by": {
                  "type": "string",
                  "description": "Created by"
                },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "sinks": {
                  "type": "array",
                  "description": "Sinks",
                  "maxItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": [
                            "data_type",
                            "name",
                            "nullable"
                          ]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Sink ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "Sources",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": [
                            "data_type",
                            "name",
                            "nullable"
                          ]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Source ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "statement": {
                  "type": "string",
                  "description": "Job SQL statement",
                  "maxLength": 50000
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "sinks",
                "sources",
                "statement",
                "version"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "current_deployment": {
            "type": "object",
            "description": "Flink ApplicationDeployment",
            "properties": {
              "created_at": {
                "type": "string",
                "description": "Created at"
              },
              "created_by": {
                "type": "string",
                "description": "Created by"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "restart_enabled": {
                "type": "boolean",
                "description": "Specifies whether a Flink Job is restarted in case it fails"
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "restart_enabled",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at"
          },
          "updated_by": {
            "type": "string",
            "description": "Updated by"
          }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkDeleteApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteApplicationDeploymentResponse",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkDeleteApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkDeleteApplicationVersionResponse",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Sink ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": {
                  "type": "string",
                  "description": "Table name"
                }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Source ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": {
                  "type": "string",
                  "description": "Table name"
                }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          },
          "version": {
            "type": "integer",
            "description": "Version number"
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "sinks",
          "sources",
          "statement",
          "version"
        ]
      },
      "ServiceFlinkGetApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkGetApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "ApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Created at"
                },
                "created_by": {
                  "type": "string",
                  "description": "Created by"
                },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "sinks": {
                  "type": "array",
                  "description": "Sinks",
                  "maxItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": [
                            "data_type",
                            "name",
                            "nullable"
                          ]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Sink ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "Sources",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": [
                            "data_type",
                            "name",
                            "nullable"
                          ]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Source ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "statement": {
                  "type": "string",
                  "description": "Job SQL statement",
                  "maxLength": 50000
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "sinks",
                "sources",
                "statement",
                "version"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "current_deployment": {
            "type": "object",
            "description": "Flink ApplicationDeployment",
            "properties": {
              "created_at": {
                "type": "string",
                "description": "Created at"
              },
              "created_by": {
                "type": "string",
                "description": "Created by"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "restart_enabled": {
                "type": "boolean",
                "description": "Specifies whether a Flink Job is restarted in case it fails"
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "restart_enabled",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at"
          },
          "updated_by": {
            "type": "string",
            "description": "Updated by"
          }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkGetApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkGetApplicationDeploymentResponse",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkGetApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkGetApplicationVersionResponse",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Sink ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": {
                  "type": "string",
                  "description": "Table name"
                }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "table_id": {
                  "type": "string",
                  "description": "Source ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "table_name": {
                  "type": "string",
                  "description": "Table name"
                }
              },
              "required": [
                "columns",
                "create_table",
                "options",
                "table_id",
                "table_name"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          },
          "version": {
            "type": "integer",
            "description": "Version number"
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "sinks",
          "sources",
          "statement",
          "version"
        ]
      },
      "ServiceFlinkJobDetailsResponse": {
        "type": "object",
        "description": "ServiceFlinkJobDetailsResponse",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "Duration of the job"
          },
          "end\\-time": {
            "type": "integer",
            "description": "End time of the job"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "isStoppable": {
            "type": "boolean",
            "description": "Whether the job is stoppable"
          },
          "jid": {
            "type": "string",
            "description": "Job ID"
          },
          "maxParallelism": {
            "type": "integer",
            "description": "Max parallelism"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Job name"
          },
          "now": {
            "type": "integer",
            "description": "Epoch time"
          },
          "plan": {
            "type": "object",
            "description": "Plan",
            "properties": {}
          },
          "start\\-time": {
            "type": "integer",
            "description": "Start time epoch"
          },
          "state": {
            "type": "string",
            "description": "Job state",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "CANCELLING",
              "CANCELED",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "RECONCILING"
            ]
          },
          "status\\-counts": {
            "type": "object",
            "description": "Status counts",
            "properties": {
              "CANCELED": {
                "type": "integer",
                "description": "CANCELED"
              },
              "CANCELING": {
                "type": "integer",
                "description": "CANCELING"
              },
              "CREATED": {
                "type": "integer",
                "description": "CREATED"
              },
              "DEPLOYING": {
                "type": "integer",
                "description": "DEPLOYING"
              },
              "FAILED": {
                "type": "integer",
                "description": "FAILED"
              },
              "FINISHED": {
                "type": "integer",
                "description": "FINISHED"
              },
              "INITIALIZING": {
                "type": "integer",
                "description": "INITIALIZING"
              },
              "RECONCILING": {
                "type": "integer",
                "description": "RECONCILING"
              },
              "RUNNING": {
                "type": "integer",
                "description": "RUNNING"
              },
              "SCHEDULED": {
                "type": "integer",
                "description": "SCHEDULED"
              }
            }
          },
          "timestamps": {
            "type": "object",
            "description": "Timestamps",
            "properties": {}
          },
          "vertices": {
            "type": "array",
            "description": "Vertices",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "ServiceFlinkJobsListResponse": {
        "type": "object",
        "description": "ServiceFlinkJobsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "jobs": {
            "type": "array",
            "description": "Jobs",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Job ID"
                },
                "status": {
                  "type": "string",
                  "description": "Job status",
                  "enum": [
                    "INITIALIZING",
                    "CREATED",
                    "RUNNING",
                    "FAILING",
                    "FAILED",
                    "CANCELLING",
                    "CANCELED",
                    "FINISHED",
                    "RESTARTING",
                    "SUSPENDED",
                    "RECONCILING"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceFlinkListApplicationDeploymentsResponse": {
        "type": "object",
        "description": "ServiceFlinkListApplicationDeploymentsResponse",
        "properties": {
          "deployments": {
            "type": "array",
            "description": "Flink ApplicationDeployments",
            "maxItems": 1024,
            "items": {
              "type": "object",
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Created at"
                },
                "created_by": {
                  "type": "string",
                  "description": "Created by"
                },
                "id": {
                  "type": "string",
                  "description": "Deployment ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "job_id": {
                  "type": "string",
                  "description": "Job ID",
                  "minLength": 1,
                  "maxLength": 128
                },
                "last_savepoint": {
                  "type": "string",
                  "description": "Job savepoint",
                  "minLength": 1,
                  "maxLength": 2048
                },
                "parallelism": {
                  "type": "integer",
                  "description": "Flink Job parallelism",
                  "minimum": 1,
                  "maximum": 128
                },
                "restart_enabled": {
                  "type": "boolean",
                  "description": "Specifies whether a Flink Job is restarted in case it fails"
                },
                "starting_savepoint": {
                  "type": "string",
                  "description": "Job savepoint",
                  "minLength": 1,
                  "maxLength": 2048
                },
                "status": {
                  "type": "string",
                  "description": "Deployment status",
                  "enum": [
                    "INITIALIZING",
                    "CREATED",
                    "RUNNING",
                    "FAILING",
                    "FAILED",
                    "SAVING",
                    "CANCELLING_REQUESTED",
                    "CANCELLING",
                    "CANCELED",
                    "SAVING_AND_STOP_REQUESTED",
                    "SAVING_AND_STOP",
                    "FINISHED",
                    "RESTARTING",
                    "SUSPENDED",
                    "DELETE_REQUESTED",
                    "DELETING",
                    "RECONCILING"
                  ]
                },
                "version_id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "parallelism",
                "restart_enabled",
                "status",
                "version_id"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "deployments"
        ]
      },
      "ServiceFlinkListApplicationsResponse": {
        "type": "object",
        "description": "ServiceFlinkListApplicationsResponse",
        "properties": {
          "applications": {
            "type": "array",
            "description": "Flink Applications",
            "maxItems": 1024,
            "items": {
              "type": "object",
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Created at"
                },
                "created_by": {
                  "type": "string",
                  "description": "Created by"
                },
                "id": {
                  "type": "string",
                  "description": "Application ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "name": {
                  "type": "string",
                  "description": "Application name",
                  "maxLength": 128
                },
                "updated_at": {
                  "type": "string",
                  "description": "Updated at"
                },
                "updated_by": {
                  "type": "string",
                  "description": "Updated by"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "applications"
        ]
      },
      "ServiceFlinkOverviewResponse": {
        "type": "object",
        "description": "ServiceFlinkOverviewResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "flink\\-commit": {
            "type": "string",
            "description": "Commit of Flink version"
          },
          "flink\\-version": {
            "type": "string",
            "description": "Flink version"
          },
          "jobs\\-cancelled": {
            "type": "integer",
            "description": "Number of cancelled jobs"
          },
          "jobs\\-failed": {
            "type": "integer",
            "description": "Number of failed jobs"
          },
          "jobs\\-finished": {
            "type": "integer",
            "description": "Number of finished jobs"
          },
          "jobs\\-running": {
            "type": "integer",
            "description": "Number of running jobs"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "slots\\-available": {
            "type": "integer",
            "description": "Number of slots available"
          },
          "slots\\-total": {
            "type": "integer",
            "description": "Number of slots"
          },
          "taskmanagers": {
            "type": "integer",
            "description": "Number of TaskManagers"
          }
        }
      },
      "ServiceFlinkProxyJobDetailsResponse": {
        "type": "object",
        "description": "ServiceFlinkProxyJobDetailsResponse",
        "properties": {
          "duration": {
            "type": "integer",
            "description": "Duration of the job"
          },
          "end\\-time": {
            "type": "integer",
            "description": "End time of the job"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "isStoppable": {
            "type": "boolean",
            "description": "Whether the job is stoppable"
          },
          "jid": {
            "type": "string",
            "description": "Job ID"
          },
          "maxParallelism": {
            "type": "integer",
            "description": "Max parallelism"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Job name"
          },
          "now": {
            "type": "integer",
            "description": "Epoch time"
          },
          "plan": {
            "type": "object",
            "description": "Plan",
            "properties": {}
          },
          "start\\-time": {
            "type": "integer",
            "description": "Start time epoch"
          },
          "state": {
            "type": "string",
            "description": "Job state",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "CANCELLING",
              "CANCELED",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "RECONCILING"
            ]
          },
          "status\\-counts": {
            "type": "object",
            "description": "Status counts",
            "properties": {
              "CANCELED": {
                "type": "integer",
                "description": "CANCELED"
              },
              "CANCELING": {
                "type": "integer",
                "description": "CANCELING"
              },
              "CREATED": {
                "type": "integer",
                "description": "CREATED"
              },
              "DEPLOYING": {
                "type": "integer",
                "description": "DEPLOYING"
              },
              "FAILED": {
                "type": "integer",
                "description": "FAILED"
              },
              "FINISHED": {
                "type": "integer",
                "description": "FINISHED"
              },
              "INITIALIZING": {
                "type": "integer",
                "description": "INITIALIZING"
              },
              "RECONCILING": {
                "type": "integer",
                "description": "RECONCILING"
              },
              "RUNNING": {
                "type": "integer",
                "description": "RUNNING"
              },
              "SCHEDULED": {
                "type": "integer",
                "description": "SCHEDULED"
              }
            }
          },
          "timestamps": {
            "type": "object",
            "description": "Timestamps",
            "properties": {}
          },
          "vertices": {
            "type": "array",
            "description": "Vertices",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "ServiceFlinkProxyJobExceptionsResponse": {
        "type": "object",
        "description": "ServiceFlinkProxyJobExceptionsResponse",
        "properties": {
          "all\\-exceptions": {
            "type": "array",
            "description": "All exceptions",
            "items": {
              "type": "object",
              "properties": {
                "exception": {
                  "type": "string",
                  "description": "Exception"
                },
                "location": {
                  "type": "string",
                  "description": "Location"
                },
                "task": {
                  "type": "string",
                  "description": "Task"
                },
                "timestamp": {
                  "type": "integer",
                  "description": "Timestamp"
                }
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "exceptionHistory": {
            "type": "object",
            "description": "Exception history",
            "properties": {
              "entries": {
                "type": "array",
                "description": "Exceptions",
                "items": {
                  "type": "object",
                  "properties": {
                    "concurrentExceptions": {
                      "type": "array",
                      "description": "Concurrent exceptions",
                      "items": {
                        "type": "object",
                        "properties": {
                          "exceptionName": {
                            "type": "string",
                            "description": "Exception name"
                          },
                          "location": {
                            "type": "string",
                            "description": "Location"
                          },
                          "stacktrace": {
                            "type": "string",
                            "description": "Stack trace"
                          },
                          "taskName": {
                            "type": "string",
                            "description": "Task name"
                          },
                          "timestamp": {
                            "type": "integer",
                            "description": "Timestamp"
                          }
                        }
                      }
                    },
                    "exceptionName": {
                      "type": "string",
                      "description": "Exception name"
                    },
                    "location": {
                      "type": "string",
                      "description": "Location"
                    },
                    "stacktrace": {
                      "type": "string",
                      "description": "Stack trace"
                    },
                    "taskName": {
                      "type": "string",
                      "description": "Task name"
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "Timestamp"
                    }
                  }
                }
              },
              "truncated": {
                "type": "boolean",
                "description": "Truncated"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "root\\-exception": {
            "type": "string",
            "description": "Root exception"
          },
          "timestamp": {
            "type": "integer",
            "description": "Timestamp"
          },
          "truncated": {
            "type": "boolean",
            "description": "Truncated"
          }
        }
      },
      "ServiceFlinkProxyJobsListResponse": {
        "type": "object",
        "description": "ServiceFlinkProxyJobsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "jobs": {
            "type": "array",
            "description": "Jobs",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Job ID"
                },
                "status": {
                  "type": "string",
                  "description": "Job status",
                  "enum": [
                    "INITIALIZING",
                    "CREATED",
                    "RUNNING",
                    "FAILING",
                    "FAILED",
                    "CANCELLING",
                    "CANCELED",
                    "FINISHED",
                    "RESTARTING",
                    "SUSPENDED",
                    "RECONCILING"
                  ]
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceFlinkProxyJobsOverviewResponse": {
        "type": "object",
        "description": "ServiceFlinkProxyJobsOverviewResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "jobs": {
            "type": "array",
            "description": "Jobs",
            "items": {
              "type": "object",
              "properties": {
                "duration": {
                  "type": "integer",
                  "description": "Duration"
                },
                "end\\-time": {
                  "type": "integer",
                  "description": "End time epoch"
                },
                "jid": {
                  "type": "string",
                  "description": "Job ID"
                },
                "last\\-modification": {
                  "type": "integer",
                  "description": "Last modification epoch"
                },
                "name": {
                  "type": "string",
                  "description": "Job name"
                },
                "start\\-time": {
                  "type": "integer",
                  "description": "Start time epoch"
                },
                "state": {
                  "type": "string",
                  "description": "Job state"
                },
                "tasks": {
                  "type": "object",
                  "description": "Tasks",
                  "properties": {
                    "canceled": {
                      "type": "integer",
                      "description": "Canceled"
                    },
                    "canceling": {
                      "type": "integer",
                      "description": "Canceling"
                    },
                    "created": {
                      "type": "integer",
                      "description": "Created"
                    },
                    "deploying": {
                      "type": "integer",
                      "description": "Deploying"
                    },
                    "failed": {
                      "type": "integer",
                      "description": "Failed"
                    },
                    "finished": {
                      "type": "integer",
                      "description": "Finished"
                    },
                    "initializing": {
                      "type": "integer",
                      "description": "Initializing"
                    },
                    "reconciling": {
                      "type": "integer",
                      "description": "Reconciling"
                    },
                    "running": {
                      "type": "integer",
                      "description": "Running"
                    },
                    "scheduled": {
                      "type": "integer",
                      "description": "Scheduled"
                    },
                    "total": {
                      "type": "integer",
                      "description": "Total"
                    }
                  }
                }
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceFlinkProxyOverviewResponse": {
        "type": "object",
        "description": "ServiceFlinkProxyOverviewResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "flink\\-commit": {
            "type": "string",
            "description": "Commit of Flink version"
          },
          "flink\\-version": {
            "type": "string",
            "description": "Flink version"
          },
          "jobs\\-cancelled": {
            "type": "integer",
            "description": "Number of cancelled jobs"
          },
          "jobs\\-failed": {
            "type": "integer",
            "description": "Number of failed jobs"
          },
          "jobs\\-finished": {
            "type": "integer",
            "description": "Number of finished jobs"
          },
          "jobs\\-running": {
            "type": "integer",
            "description": "Number of running jobs"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "slots\\-available": {
            "type": "integer",
            "description": "Number of slots available"
          },
          "slots\\-total": {
            "type": "integer",
            "description": "Number of slots"
          },
          "taskmanagers": {
            "type": "integer",
            "description": "Number of TaskManagers"
          }
        }
      },
      "ServiceFlinkStopApplicationDeploymentResponse": {
        "type": "object",
        "description": "ServiceFlinkStopApplicationDeploymentResponse",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Deployment ID",
            "minLength": 36,
            "maxLength": 36
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "minLength": 1,
            "maxLength": 128
          },
          "last_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "parallelism": {
            "type": "integer",
            "description": "Flink Job parallelism",
            "minimum": 1,
            "maximum": 128
          },
          "restart_enabled": {
            "type": "boolean",
            "description": "Specifies whether a Flink Job is restarted in case it fails"
          },
          "starting_savepoint": {
            "type": "string",
            "description": "Job savepoint",
            "minLength": 1,
            "maxLength": 2048
          },
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "INITIALIZING",
              "CREATED",
              "RUNNING",
              "FAILING",
              "FAILED",
              "SAVING",
              "CANCELLING_REQUESTED",
              "CANCELLING",
              "CANCELED",
              "SAVING_AND_STOP_REQUESTED",
              "SAVING_AND_STOP",
              "FINISHED",
              "RESTARTING",
              "SUSPENDED",
              "DELETE_REQUESTED",
              "DELETING",
              "RECONCILING"
            ]
          },
          "version_id": {
            "type": "string",
            "description": "ApplicationVersion ID",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "parallelism",
          "restart_enabled",
          "status",
          "version_id"
        ]
      },
      "ServiceFlinkUpdateApplicationRequestBody": {
        "type": "object",
        "description": "ServiceFlinkUpdateApplicationRequestBody",
        "properties": {
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          }
        },
        "required": [
          "name"
        ]
      },
      "ServiceFlinkUpdateApplicationResponse": {
        "type": "object",
        "description": "ServiceFlinkUpdateApplicationResponse",
        "properties": {
          "application_versions": {
            "type": "array",
            "description": "ApplicationVersions",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Created at"
                },
                "created_by": {
                  "type": "string",
                  "description": "Created by"
                },
                "id": {
                  "type": "string",
                  "description": "ApplicationVersion ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "sinks": {
                  "type": "array",
                  "description": "Sinks",
                  "maxItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": [
                            "data_type",
                            "name",
                            "nullable"
                          ]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Sink ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "sources": {
                  "type": "array",
                  "description": "Sources",
                  "maxItems": 64,
                  "items": {
                    "type": "object",
                    "properties": {
                      "columns": {
                        "type": "array",
                        "description": "Columns",
                        "maxItems": 256,
                        "items": {
                          "type": "object",
                          "properties": {
                            "data_type": {
                              "type": "string",
                              "description": "The data type of the column",
                              "minLength": 1,
                              "maxLength": 2048
                            },
                            "extras": {
                              "type": "string",
                              "description": "Column extra information",
                              "maxLength": 256
                            },
                            "key": {
                              "type": "string",
                              "description": "The key info of the column",
                              "maxLength": 512
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the column",
                              "minLength": 1,
                              "maxLength": 256
                            },
                            "nullable": {
                              "type": "boolean",
                              "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                            },
                            "watermark": {
                              "type": "string",
                              "description": "Information of the watermark if the column is used for watermark.",
                              "maxLength": 512
                            }
                          },
                          "required": [
                            "data_type",
                            "name",
                            "nullable"
                          ]
                        }
                      },
                      "create_table": {
                        "type": "string",
                        "description": "The CREATE TABLE statement",
                        "maxLength": 4096
                      },
                      "integration_id": {
                        "type": "string",
                        "description": "Integration ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "options": {
                        "type": "object",
                        "description": "Option",
                        "properties": {}
                      },
                      "table_id": {
                        "type": "string",
                        "description": "Source ID",
                        "minLength": 36,
                        "maxLength": 36
                      },
                      "table_name": {
                        "type": "string",
                        "description": "Table name"
                      }
                    },
                    "required": [
                      "columns",
                      "create_table",
                      "options",
                      "table_id",
                      "table_name"
                    ]
                  }
                },
                "statement": {
                  "type": "string",
                  "description": "Job SQL statement",
                  "maxLength": 50000
                },
                "version": {
                  "type": "integer",
                  "description": "Version number"
                }
              },
              "required": [
                "created_at",
                "created_by",
                "id",
                "sinks",
                "sources",
                "statement",
                "version"
              ]
            }
          },
          "created_at": {
            "type": "string",
            "description": "Created at"
          },
          "created_by": {
            "type": "string",
            "description": "Created by"
          },
          "current_deployment": {
            "type": "object",
            "description": "Flink ApplicationDeployment",
            "properties": {
              "created_at": {
                "type": "string",
                "description": "Created at"
              },
              "created_by": {
                "type": "string",
                "description": "Created by"
              },
              "id": {
                "type": "string",
                "description": "Deployment ID",
                "minLength": 36,
                "maxLength": 36
              },
              "job_id": {
                "type": "string",
                "description": "Job ID",
                "minLength": 1,
                "maxLength": 128
              },
              "last_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "parallelism": {
                "type": "integer",
                "description": "Flink Job parallelism",
                "minimum": 1,
                "maximum": 128
              },
              "restart_enabled": {
                "type": "boolean",
                "description": "Specifies whether a Flink Job is restarted in case it fails"
              },
              "starting_savepoint": {
                "type": "string",
                "description": "Job savepoint",
                "minLength": 1,
                "maxLength": 2048
              },
              "status": {
                "type": "string",
                "description": "Deployment status",
                "enum": [
                  "INITIALIZING",
                  "CREATED",
                  "RUNNING",
                  "FAILING",
                  "FAILED",
                  "SAVING",
                  "CANCELLING_REQUESTED",
                  "CANCELLING",
                  "CANCELED",
                  "SAVING_AND_STOP_REQUESTED",
                  "SAVING_AND_STOP",
                  "FINISHED",
                  "RESTARTING",
                  "SUSPENDED",
                  "DELETE_REQUESTED",
                  "DELETING",
                  "RECONCILING"
                ]
              },
              "version_id": {
                "type": "string",
                "description": "ApplicationVersion ID",
                "minLength": 36,
                "maxLength": 36
              }
            },
            "required": [
              "created_at",
              "created_by",
              "id",
              "parallelism",
              "restart_enabled",
              "status",
              "version_id"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "Application ID",
            "minLength": 36,
            "maxLength": 36
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "name": {
            "type": "string",
            "description": "Application name",
            "maxLength": 128
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at"
          },
          "updated_by": {
            "type": "string",
            "description": "Updated by"
          }
        },
        "required": [
          "application_versions",
          "created_at",
          "created_by",
          "id",
          "name",
          "updated_at",
          "updated_by"
        ]
      },
      "ServiceFlinkValidateApplicationVersionRequestBody": {
        "type": "object",
        "description": "ServiceFlinkValidateApplicationVersionRequestBody",
        "properties": {
          "sinks": {
            "type": "array",
            "description": "Sinks",
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "create_table"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                }
              },
              "required": [
                "create_table"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          }
        },
        "required": [
          "sinks",
          "sources"
        ]
      },
      "ServiceFlinkValidateApplicationVersionResponse": {
        "type": "object",
        "description": "ServiceFlinkValidateApplicationVersionResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "sinks": {
            "type": "array",
            "description": "Sinks and sink validation errors",
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "message": {
                  "type": "string",
                  "description": "The error message."
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "position": {
                  "type": "object",
                  "description": "Error position in the SQL.",
                  "properties": {
                    "character_number": {
                      "type": "integer",
                      "description": "Character number of where the error starts, starting from 1."
                    },
                    "end_character_number": {
                      "type": "integer",
                      "description": "Character number of where the error starts, starting from 1."
                    },
                    "end_line_number": {
                      "type": "integer",
                      "description": "Line number of where the error ends, starting from 1."
                    },
                    "line_number": {
                      "type": "integer",
                      "description": "Line number of where the error starts, starting from 1."
                    }
                  },
                  "required": [
                    "character_number",
                    "end_character_number",
                    "end_line_number",
                    "line_number"
                  ]
                },
                "table_name": {
                  "type": "string",
                  "description": "Table name"
                }
              },
              "required": [
                "create_table"
              ]
            }
          },
          "sources": {
            "type": "array",
            "description": "Sources and source validation errors",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Columns",
                  "maxItems": 256,
                  "items": {
                    "type": "object",
                    "properties": {
                      "data_type": {
                        "type": "string",
                        "description": "The data type of the column",
                        "minLength": 1,
                        "maxLength": 2048
                      },
                      "extras": {
                        "type": "string",
                        "description": "Column extra information",
                        "maxLength": 256
                      },
                      "key": {
                        "type": "string",
                        "description": "The key info of the column",
                        "maxLength": 512
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the column",
                        "minLength": 1,
                        "maxLength": 256
                      },
                      "nullable": {
                        "type": "boolean",
                        "description": "Whether the column is nullable, i.e. if true, the column is NOT NULL"
                      },
                      "watermark": {
                        "type": "string",
                        "description": "Information of the watermark if the column is used for watermark.",
                        "maxLength": 512
                      }
                    },
                    "required": [
                      "data_type",
                      "name",
                      "nullable"
                    ]
                  }
                },
                "create_table": {
                  "type": "string",
                  "description": "The CREATE TABLE statement",
                  "maxLength": 4096
                },
                "integration_id": {
                  "type": "string",
                  "description": "Integration ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "message": {
                  "type": "string",
                  "description": "The error message."
                },
                "options": {
                  "type": "object",
                  "description": "Option",
                  "properties": {}
                },
                "position": {
                  "type": "object",
                  "description": "Error position in the SQL.",
                  "properties": {
                    "character_number": {
                      "type": "integer",
                      "description": "Character number of where the error starts, starting from 1."
                    },
                    "end_character_number": {
                      "type": "integer",
                      "description": "Character number of where the error starts, starting from 1."
                    },
                    "end_line_number": {
                      "type": "integer",
                      "description": "Line number of where the error ends, starting from 1."
                    },
                    "line_number": {
                      "type": "integer",
                      "description": "Line number of where the error starts, starting from 1."
                    }
                  },
                  "required": [
                    "character_number",
                    "end_character_number",
                    "end_line_number",
                    "line_number"
                  ]
                },
                "table_name": {
                  "type": "string",
                  "description": "Table name"
                }
              },
              "required": [
                "create_table"
              ]
            }
          },
          "statement": {
            "type": "string",
            "description": "Job SQL statement",
            "maxLength": 50000
          },
          "statement_error": {
            "type": "object",
            "description": "Job validation error",
            "properties": {
              "message": {
                "type": "string",
                "description": "The error message."
              },
              "position": {
                "type": "object",
                "description": "Error position in the SQL.",
                "properties": {
                  "character_number": {
                    "type": "integer",
                    "description": "Character number of where the error starts, starting from 1."
                  },
                  "end_character_number": {
                    "type": "integer",
                    "description": "Character number of where the error starts, starting from 1."
                  },
                  "end_line_number": {
                    "type": "integer",
                    "description": "Line number of where the error ends, starting from 1."
                  },
                  "line_number": {
                    "type": "integer",
                    "description": "Line number of where the error starts, starting from 1."
                  }
                },
                "required": [
                  "character_number",
                  "end_character_number",
                  "end_line_number",
                  "line_number"
                ]
              }
            },
            "required": [
              "message"
            ]
          }
        },
        "required": [
          "sinks",
          "sources"
        ]
      },
      "ServiceKafkaAclAddRequestBody": {
        "type": "object",
        "description": "ServiceKafkaAclAddRequestBody",
        "properties": {
          "permission": {
            "type": "string",
            "description": "Kafka permission",
            "enum": [
              "admin",
              "read",
              "readwrite",
              "write"
            ]
          },
          "topic": {
            "type": "string",
            "description": "Topic name pattern",
            "minLength": 1,
            "maxLength": 249
          },
          "username": {
            "type": "string",
            "description": "Username",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": [
          "permission",
          "topic",
          "username"
        ]
      },
      "ServiceKafkaAclAddResponse": {
        "type": "object",
        "description": "ServiceKafkaAclAddResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Kafka ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "Kafka permission",
                  "enum": [
                    "admin",
                    "read",
                    "readwrite",
                    "write"
                  ]
                },
                "topic": {
                  "type": "string",
                  "description": "Topic name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": [
                "permission",
                "topic",
                "username"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "acl"
        ]
      },
      "ServiceKafkaAclDeleteResponse": {
        "type": "object",
        "description": "ServiceKafkaAclDeleteResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Kafka ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "Kafka permission",
                  "enum": [
                    "admin",
                    "read",
                    "readwrite",
                    "write"
                  ]
                },
                "topic": {
                  "type": "string",
                  "description": "Topic name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": [
                "permission",
                "topic",
                "username"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "acl"
        ]
      },
      "ServiceKafkaAclListResponse": {
        "type": "object",
        "description": "ServiceKafkaAclListResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Kafka ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "Kafka permission",
                  "enum": [
                    "admin",
                    "read",
                    "readwrite",
                    "write"
                  ]
                },
                "topic": {
                  "type": "string",
                  "description": "Topic name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": [
                "permission",
                "topic",
                "username"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "acl"
        ]
      },
      "ServiceKafkaConnectCreateConnectorRequestBody": {
        "type": "object",
        "description": "ServiceKafkaConnectCreateConnectorRequestBody",
        "properties": {
          "connector.class": {
            "type": "string",
            "description": "The Java class for the connector",
            "maxLength": 1024
          },
          "name": {
            "type": "string",
            "description": "Unique name for the connector",
            "maxLength": 1024
          }
        },
        "required": [
          "name"
        ]
      },
      "ServiceKafkaConnectCreateConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectCreateConnectorResponse",
        "properties": {
          "connector": {
            "type": "object",
            "description": "Kafka connector information",
            "properties": {
              "config": {
                "type": "object",
                "description": "Connector configuration parameters",
                "properties": {
                  "connector.class": {
                    "type": "string",
                    "description": "The Java class for the connector",
                    "maxLength": 1024
                  },
                  "name": {
                    "type": "string",
                    "description": "Unique name for the connector",
                    "maxLength": 1024
                  }
                },
                "required": [
                  "name"
                ]
              },
              "name": {
                "type": "string",
                "description": "Connector name",
                "maxLength": 1024
              },
              "plugin": {
                "type": "object",
                "description": "Kafka Connector plugin information",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "Connector author name"
                  },
                  "class": {
                    "type": "string",
                    "description": "Connector class name"
                  },
                  "docURL": {
                    "type": "string",
                    "description": "Connector documentation URL"
                  },
                  "preview": {
                    "type": "boolean",
                    "description": "Describes if connector is in beta"
                  },
                  "preview_info": {
                    "type": "string",
                    "description": "Information about beta stage of connector"
                  },
                  "title": {
                    "type": "string",
                    "description": "Descriptive human readable name defined by Aiven"
                  },
                  "type": {
                    "type": "string",
                    "description": "Describes whether data flows from or to Kafka",
                    "enum": [
                      "sink",
                      "source",
                      "unknown"
                    ]
                  },
                  "version": {
                    "type": "string",
                    "description": "Connector version number"
                  }
                },
                "required": [
                  "author",
                  "class",
                  "docURL",
                  "title",
                  "type",
                  "version"
                ]
              },
              "tasks": {
                "type": "array",
                "description": "List of tasks of a connector",
                "items": {
                  "type": "object",
                  "properties": {
                    "connector": {
                      "type": "string",
                      "description": "Related connector name"
                    },
                    "task": {
                      "type": "integer",
                      "description": "Task id / number"
                    }
                  },
                  "required": [
                    "connector",
                    "task"
                  ]
                }
              }
            },
            "required": [
              "config",
              "name",
              "plugin",
              "tasks"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "connector"
        ]
      },
      "ServiceKafkaConnectDeleteConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectDeleteConnectorResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaConnectEditConnectorRequestBody": {
        "type": "object",
        "description": "ServiceKafkaConnectEditConnectorRequestBody",
        "properties": {
          "connector.class": {
            "type": "string",
            "description": "The Java class for the connector",
            "maxLength": 1024
          },
          "name": {
            "type": "string",
            "description": "Unique name for the connector",
            "maxLength": 1024
          }
        },
        "required": [
          "name"
        ]
      },
      "ServiceKafkaConnectEditConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectEditConnectorResponse",
        "properties": {
          "connector": {
            "type": "object",
            "description": "Kafka connector information",
            "properties": {
              "config": {
                "type": "object",
                "description": "Connector configuration parameters",
                "properties": {
                  "connector.class": {
                    "type": "string",
                    "description": "The Java class for the connector",
                    "maxLength": 1024
                  },
                  "name": {
                    "type": "string",
                    "description": "Unique name for the connector",
                    "maxLength": 1024
                  }
                },
                "required": [
                  "name"
                ]
              },
              "name": {
                "type": "string",
                "description": "Connector name",
                "maxLength": 1024
              },
              "plugin": {
                "type": "object",
                "description": "Kafka Connector plugin information",
                "properties": {
                  "author": {
                    "type": "string",
                    "description": "Connector author name"
                  },
                  "class": {
                    "type": "string",
                    "description": "Connector class name"
                  },
                  "docURL": {
                    "type": "string",
                    "description": "Connector documentation URL"
                  },
                  "preview": {
                    "type": "boolean",
                    "description": "Describes if connector is in beta"
                  },
                  "preview_info": {
                    "type": "string",
                    "description": "Information about beta stage of connector"
                  },
                  "title": {
                    "type": "string",
                    "description": "Descriptive human readable name defined by Aiven"
                  },
                  "type": {
                    "type": "string",
                    "description": "Describes whether data flows from or to Kafka",
                    "enum": [
                      "sink",
                      "source",
                      "unknown"
                    ]
                  },
                  "version": {
                    "type": "string",
                    "description": "Connector version number"
                  }
                },
                "required": [
                  "author",
                  "class",
                  "docURL",
                  "title",
                  "type",
                  "version"
                ]
              },
              "tasks": {
                "type": "array",
                "description": "List of tasks of a connector",
                "items": {
                  "type": "object",
                  "properties": {
                    "connector": {
                      "type": "string",
                      "description": "Related connector name"
                    },
                    "task": {
                      "type": "integer",
                      "description": "Task id / number"
                    }
                  },
                  "required": [
                    "connector",
                    "task"
                  ]
                }
              }
            },
            "required": [
              "config",
              "name",
              "plugin",
              "tasks"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "connector"
        ]
      },
      "ServiceKafkaConnectGetAvailableConnectorsResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectGetAvailableConnectorsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "plugins": {
            "type": "array",
            "description": "List of available Kafka Connect connector plugins",
            "items": {
              "type": "object",
              "properties": {
                "author": {
                  "type": "string",
                  "description": "Connector author name"
                },
                "class": {
                  "type": "string",
                  "description": "Connector class name"
                },
                "docURL": {
                  "type": "string",
                  "description": "Connector documentation URL"
                },
                "preview": {
                  "type": "boolean",
                  "description": "Describes if connector is in beta"
                },
                "preview_info": {
                  "type": "string",
                  "description": "Information about beta stage of connector"
                },
                "title": {
                  "type": "string",
                  "description": "Descriptive human readable name defined by Aiven"
                },
                "type": {
                  "type": "string",
                  "description": "Describes whether data flows from or to Kafka",
                  "enum": [
                    "sink",
                    "source",
                    "unknown"
                  ]
                },
                "version": {
                  "type": "string",
                  "description": "Connector version number"
                }
              },
              "required": [
                "author",
                "class",
                "docURL",
                "title",
                "type",
                "version"
              ]
            }
          }
        },
        "required": [
          "plugins"
        ]
      },
      "ServiceKafkaConnectGetConnectorConfigurationResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectGetConnectorConfigurationResponse",
        "properties": {
          "configuration_schema": {
            "type": "array",
            "description": "List of connector configuration field definitions",
            "items": {
              "type": "object",
              "properties": {
                "default_value": {
                  "type": "string",
                  "description": "Default value to be set if field omitted in configuration"
                },
                "display_name": {
                  "type": "string",
                  "description": "Human friendly name of the field"
                },
                "documentation": {
                  "type": "string",
                  "description": "Assisting help text"
                },
                "group": {
                  "type": "string",
                  "description": "Name of the field group to which the field belongs to"
                },
                "importance": {
                  "type": "string",
                  "description": "How important is the field",
                  "enum": [
                    "LOW",
                    "MEDIUM",
                    "HIGH"
                  ]
                },
                "name": {
                  "type": "string",
                  "description": "Machine friendly name of the field"
                },
                "order": {
                  "type": "integer",
                  "description": "Position of the field in the configuration form"
                },
                "required": {
                  "type": "boolean",
                  "description": "Defines if the field value is mandatory or not"
                },
                "type": {
                  "type": "string",
                  "description": "Configuration value type",
                  "enum": [
                    "STRING",
                    "INT",
                    "SHORT",
                    "LONG",
                    "DOUBLE",
                    "BOOLEAN",
                    "LIST",
                    "CLASS",
                    "PASSWORD"
                  ]
                },
                "width": {
                  "type": "string",
                  "description": "Expected length of the input value",
                  "enum": [
                    "NONE",
                    "SHORT",
                    "MEDIUM",
                    "LONG"
                  ]
                }
              },
              "required": [
                "default_value",
                "display_name",
                "documentation",
                "group",
                "importance",
                "name",
                "order",
                "required",
                "type",
                "width"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "configuration_schema"
        ]
      },
      "ServiceKafkaConnectGetConnectorStatusResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectGetConnectorStatusResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "status": {
            "type": "object",
            "description": "Connector status information",
            "properties": {
              "state": {
                "type": "string",
                "description": "Current status of the connector",
                "enum": [
                  "FAILED",
                  "PAUSED",
                  "RUNNING",
                  "UNASSIGNED"
                ]
              },
              "tasks": {
                "type": "array",
                "description": "List of tasks currently running for the connector",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Task identifier"
                    },
                    "state": {
                      "type": "string",
                      "description": "Current status of the task",
                      "enum": [
                        "FAILED",
                        "PAUSED",
                        "RUNNING",
                        "UNASSIGNED"
                      ]
                    },
                    "trace": {
                      "type": "string",
                      "description": "Task error information"
                    }
                  },
                  "required": [
                    "id",
                    "state",
                    "trace"
                  ]
                }
              }
            },
            "required": [
              "state",
              "tasks"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "ServiceKafkaConnectListResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectListResponse",
        "properties": {
          "connectors": {
            "type": "array",
            "description": "List of active Kafka Connect connectors",
            "items": {
              "type": "object",
              "properties": {
                "config": {
                  "type": "object",
                  "description": "Connector configuration parameters",
                  "properties": {
                    "connector.class": {
                      "type": "string",
                      "description": "The Java class for the connector",
                      "maxLength": 1024
                    },
                    "name": {
                      "type": "string",
                      "description": "Unique name for the connector",
                      "maxLength": 1024
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "name": {
                  "type": "string",
                  "description": "Connector name",
                  "maxLength": 1024
                },
                "plugin": {
                  "type": "object",
                  "description": "Kafka Connector plugin information",
                  "properties": {
                    "author": {
                      "type": "string",
                      "description": "Connector author name"
                    },
                    "class": {
                      "type": "string",
                      "description": "Connector class name"
                    },
                    "docURL": {
                      "type": "string",
                      "description": "Connector documentation URL"
                    },
                    "preview": {
                      "type": "boolean",
                      "description": "Describes if connector is in beta"
                    },
                    "preview_info": {
                      "type": "string",
                      "description": "Information about beta stage of connector"
                    },
                    "title": {
                      "type": "string",
                      "description": "Descriptive human readable name defined by Aiven"
                    },
                    "type": {
                      "type": "string",
                      "description": "Describes whether data flows from or to Kafka",
                      "enum": [
                        "sink",
                        "source",
                        "unknown"
                      ]
                    },
                    "version": {
                      "type": "string",
                      "description": "Connector version number"
                    }
                  },
                  "required": [
                    "author",
                    "class",
                    "docURL",
                    "title",
                    "type",
                    "version"
                  ]
                },
                "tasks": {
                  "type": "array",
                  "description": "List of tasks of a connector",
                  "items": {
                    "type": "object",
                    "properties": {
                      "connector": {
                        "type": "string",
                        "description": "Related connector name"
                      },
                      "task": {
                        "type": "integer",
                        "description": "Task id / number"
                      }
                    },
                    "required": [
                      "connector",
                      "task"
                    ]
                  }
                }
              },
              "required": [
                "config",
                "name",
                "plugin",
                "tasks"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "connectors"
        ]
      },
      "ServiceKafkaConnectPauseConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectPauseConnectorResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaConnectRestartConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectRestartConnectorResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaConnectRestartConnectorTaskResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectRestartConnectorTaskResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaConnectResumeConnectorResponse": {
        "type": "object",
        "description": "ServiceKafkaConnectResumeConnectorResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaTopicCreateRequestBody": {
        "type": "object",
        "description": "ServiceKafkaTopicCreateRequestBody",
        "properties": {
          "cleanup_policy": {
            "type": "string",
            "description": "DEPRECATED: use config.cleanup_policy",
            "enum": [
              "delete",
              "compact",
              "compact,delete"
            ]
          },
          "config": {
            "type": "object",
            "description": "Kafka topic configuration",
            "properties": {
              "cleanup_policy": {
                "type": "string",
                "description": "cleanup.policy",
                "enum": [
                  "delete",
                  "compact",
                  "compact,delete"
                ]
              },
              "compression_type": {
                "type": "string",
                "description": "compression.type",
                "enum": [
                  "snappy",
                  "gzip",
                  "lz4",
                  "producer",
                  "uncompressed",
                  "zstd"
                ]
              },
              "delete_retention_ms": {
                "type": "integer",
                "description": "delete.retention.ms",
                "minimum": 0
              },
              "file_delete_delay_ms": {
                "type": "integer",
                "description": "file.delete.delay.ms",
                "minimum": 0
              },
              "flush_messages": {
                "type": "integer",
                "description": "flush.messages",
                "minimum": 0
              },
              "flush_ms": {
                "type": "integer",
                "description": "flush.ms",
                "minimum": 0
              },
              "index_interval_bytes": {
                "type": "integer",
                "description": "index.interval.bytes",
                "minimum": 0
              },
              "max_compaction_lag_ms": {
                "type": "integer",
                "description": "max.compaction.lag.ms",
                "minimum": 0
              },
              "max_message_bytes": {
                "type": "integer",
                "description": "max.message.bytes",
                "minimum": 0
              },
              "message_downconversion_enable": {
                "type": "boolean",
                "description": "message.downconversion.enable"
              },
              "message_format_version": {
                "type": "string",
                "description": "message.format.version",
                "enum": [
                  "0.8.0",
                  "0.8.1",
                  "0.8.2",
                  "0.9.0",
                  "0.10.0",
                  "0.10.0-IV0",
                  "0.10.0-IV1",
                  "0.10.1",
                  "0.10.1-IV0",
                  "0.10.1-IV1",
                  "0.10.1-IV2",
                  "0.10.2",
                  "0.10.2-IV0",
                  "0.11.0",
                  "0.11.0-IV0",
                  "0.11.0-IV1",
                  "0.11.0-IV2",
                  "1.0",
                  "1.0-IV0",
                  "1.1",
                  "1.1-IV0",
                  "2.0",
                  "2.0-IV0",
                  "2.0-IV1",
                  "2.1",
                  "2.1-IV0",
                  "2.1-IV1",
                  "2.1-IV2",
                  "2.2",
                  "2.2-IV0",
                  "2.2-IV1",
                  "2.3",
                  "2.3-IV0",
                  "2.3-IV1",
                  "2.4",
                  "2.4-IV0",
                  "2.4-IV1",
                  "2.5",
                  "2.5-IV0",
                  "2.6",
                  "2.6-IV0",
                  "2.7",
                  "2.7-IV0",
                  "2.7-IV1",
                  "2.7-IV2",
                  "2.8",
                  "2.8-IV0",
                  "2.8-IV1",
                  "3.0",
                  "3.0-IV0",
                  "3.0-IV1",
                  "3.1",
                  "3.1-IV0",
                  "3.2",
                  "3.2-IV0",
                  "3.3",
                  "3.3-IV0",
                  "3.3-IV1",
                  "3.3-IV2",
                  "3.3-IV3",
                  "3.4",
                  "3.4-IV0"
                ]
              },
              "message_timestamp_difference_max_ms": {
                "type": "integer",
                "description": "message.timestamp.difference.max.ms",
                "minimum": 0
              },
              "message_timestamp_type": {
                "type": "string",
                "description": "message.timestamp.type",
                "enum": [
                  "CreateTime",
                  "LogAppendTime"
                ]
              },
              "min_cleanable_dirty_ratio": {
                "type": "number",
                "description": "min.cleanable.dirty.ratio",
                "minimum": 0,
                "maximum": 1
              },
              "min_compaction_lag_ms": {
                "type": "integer",
                "description": "min.compaction.lag.ms",
                "minimum": 0
              },
              "min_insync_replicas": {
                "type": "integer",
                "description": "min.insync.replicas",
                "minimum": 1
              },
              "preallocate": {
                "type": "boolean",
                "description": "preallocate"
              },
              "retention_bytes": {
                "type": "integer",
                "description": "retention.bytes"
              },
              "retention_ms": {
                "type": "integer",
                "description": "retention.ms"
              },
              "segment_bytes": {
                "type": "integer",
                "description": "segment.bytes",
                "minimum": 14
              },
              "segment_index_bytes": {
                "type": "integer",
                "description": "segment.index.bytes",
                "minimum": 0
              },
              "segment_jitter_ms": {
                "type": "integer",
                "description": "segment.jitter.ms",
                "minimum": 0
              },
              "segment_ms": {
                "type": "integer",
                "description": "segment.ms",
                "minimum": 1
              },
              "unclean_leader_election_enable": {
                "type": "boolean",
                "description": "unclean.leader.election.enable"
              }
            }
          },
          "min_insync_replicas": {
            "type": "integer",
            "description": "DEPRECATED: use config.min_insync_replicas",
            "minimum": 1
          },
          "partitions": {
            "type": "integer",
            "description": "Number of partitions",
            "minimum": 1,
            "maximum": 1000000
          },
          "replication": {
            "type": "integer",
            "description": "Number of replicas",
            "minimum": 1
          },
          "retention_bytes": {
            "type": "integer",
            "description": "DEPRECATED: use config.retention_bytes"
          },
          "retention_hours": {
            "type": "integer",
            "description": "DEPRECATED: use config.retention_ms",
            "maximum": 2562047788015
          },
          "tags": {
            "type": "array",
            "description": "Topic tags",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Tag key",
                  "minLength": 1,
                  "maxLength": 64
                },
                "value": {
                  "type": "string",
                  "description": "Tag value",
                  "minLength": 0,
                  "maxLength": 256
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          },
          "topic_name": {
            "type": "string",
            "description": "Topic name",
            "minLength": 1,
            "maxLength": 249
          }
        },
        "required": [
          "topic_name"
        ]
      },
      "ServiceKafkaTopicCreateResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaTopicDeleteResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaTopicGetResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "topic": {
            "type": "object",
            "description": "Kafka topic information",
            "properties": {
              "cleanup_policy": {
                "type": "string",
                "description": "DEPRECATED: use config.cleanup_policy",
                "maxLength": 64
              },
              "config": {
                "type": "object",
                "description": "Kafka topic configuration",
                "properties": {
                  "cleanup_policy": {
                    "type": "object",
                    "description": "cleanup.policy value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "string",
                        "description": "cleanup.policy",
                        "maxLength": 64
                      }
                    }
                  },
                  "compression_type": {
                    "type": "object",
                    "description": "compression.type value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "string",
                        "description": "compression.type",
                        "enum": [
                          "snappy",
                          "gzip",
                          "lz4",
                          "producer",
                          "uncompressed",
                          "zstd"
                        ]
                      }
                    }
                  },
                  "delete_retention_ms": {
                    "type": "object",
                    "description": "delete.retention.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "delete.retention.ms",
                        "minimum": 0
                      }
                    }
                  },
                  "file_delete_delay_ms": {
                    "type": "object",
                    "description": "file.delete.delay.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "file.delete.delay.ms",
                        "minimum": 0
                      }
                    }
                  },
                  "flush_messages": {
                    "type": "object",
                    "description": "flush.messages value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "flush.messages",
                        "minimum": 0
                      }
                    }
                  },
                  "flush_ms": {
                    "type": "object",
                    "description": "flush.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "flush.ms",
                        "minimum": 0
                      }
                    }
                  },
                  "index_interval_bytes": {
                    "type": "object",
                    "description": "index.interval.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "index.interval.bytes",
                        "minimum": 0
                      }
                    }
                  },
                  "max_compaction_lag_ms": {
                    "type": "object",
                    "description": "max.compaction.lag.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "max.compaction.lag.ms",
                        "minimum": 0
                      }
                    }
                  },
                  "max_message_bytes": {
                    "type": "object",
                    "description": "max.message.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "max.message.bytes",
                        "minimum": 0
                      }
                    }
                  },
                  "message_downconversion_enable": {
                    "type": "object",
                    "description": "message.downconversion.enable value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "boolean",
                        "description": "message.downconversion.enable"
                      }
                    }
                  },
                  "message_format_version": {
                    "type": "object",
                    "description": "message.format.version value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "string",
                        "description": "message.format.version",
                        "enum": [
                          "0.8.0",
                          "0.8.1",
                          "0.8.2",
                          "0.9.0",
                          "0.10.0",
                          "0.10.0-IV0",
                          "0.10.0-IV1",
                          "0.10.1",
                          "0.10.1-IV0",
                          "0.10.1-IV1",
                          "0.10.1-IV2",
                          "0.10.2",
                          "0.10.2-IV0",
                          "0.11.0",
                          "0.11.0-IV0",
                          "0.11.0-IV1",
                          "0.11.0-IV2",
                          "1.0",
                          "1.0-IV0",
                          "1.1",
                          "1.1-IV0",
                          "2.0",
                          "2.0-IV0",
                          "2.0-IV1",
                          "2.1",
                          "2.1-IV0",
                          "2.1-IV1",
                          "2.1-IV2",
                          "2.2",
                          "2.2-IV0",
                          "2.2-IV1",
                          "2.3",
                          "2.3-IV0",
                          "2.3-IV1",
                          "2.4",
                          "2.4-IV0",
                          "2.4-IV1",
                          "2.5",
                          "2.5-IV0",
                          "2.6",
                          "2.6-IV0",
                          "2.7",
                          "2.7-IV0",
                          "2.7-IV1",
                          "2.7-IV2",
                          "2.8",
                          "2.8-IV0",
                          "2.8-IV1",
                          "3.0",
                          "3.0-IV0",
                          "3.0-IV1",
                          "3.1",
                          "3.1-IV0",
                          "3.2",
                          "3.2-IV0",
                          "3.3",
                          "3.3-IV0",
                          "3.3-IV1",
                          "3.3-IV2",
                          "3.3-IV3",
                          "3.4",
                          "3.4-IV0"
                        ]
                      }
                    }
                  },
                  "message_timestamp_difference_max_ms": {
                    "type": "object",
                    "description": "message.timestamp.difference.max.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "message.timestamp.difference.max.ms",
                        "minimum": 0
                      }
                    }
                  },
                  "message_timestamp_type": {
                    "type": "object",
                    "description": "message.timestamp.type value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "string",
                        "description": "message.timestamp.type",
                        "enum": [
                          "CreateTime",
                          "LogAppendTime"
                        ]
                      }
                    }
                  },
                  "min_cleanable_dirty_ratio": {
                    "type": "object",
                    "description": "min.cleanable.dirty.ratio value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "number",
                        "description": "min.cleanable.dirty.ratio",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  },
                  "min_compaction_lag_ms": {
                    "type": "object",
                    "description": "min.compaction.lag.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "min.compaction.lag.ms",
                        "minimum": 0
                      }
                    }
                  },
                  "min_insync_replicas": {
                    "type": "object",
                    "description": "min.insync.replicas value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "min.insync.replicas",
                        "minimum": 1
                      }
                    }
                  },
                  "preallocate": {
                    "type": "object",
                    "description": "preallocate value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "boolean",
                        "description": "preallocate"
                      }
                    }
                  },
                  "retention_bytes": {
                    "type": "object",
                    "description": "retention.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "retention.bytes"
                      }
                    }
                  },
                  "retention_ms": {
                    "type": "object",
                    "description": "retention.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "retention.ms"
                      }
                    }
                  },
                  "segment_bytes": {
                    "type": "object",
                    "description": "segment.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "segment.bytes",
                        "minimum": 14
                      }
                    }
                  },
                  "segment_index_bytes": {
                    "type": "object",
                    "description": "segment.index.bytes value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "segment.index.bytes",
                        "minimum": 0
                      }
                    }
                  },
                  "segment_jitter_ms": {
                    "type": "object",
                    "description": "segment.jitter.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "segment.jitter.ms",
                        "minimum": 0
                      }
                    }
                  },
                  "segment_ms": {
                    "type": "object",
                    "description": "segment.ms value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "integer",
                        "description": "segment.ms",
                        "minimum": 1
                      }
                    }
                  },
                  "unclean_leader_election_enable": {
                    "type": "object",
                    "description": "unclean.leader.election.enable value, source and synonyms",
                    "properties": {
                      "source": {
                        "type": "string",
                        "description": "Source of the Kafka topic configuration entry",
                        "enum": [
                          "unknown_config",
                          "topic_config",
                          "dynamic_broker_config",
                          "dynamic_default_broker_config",
                          "static_broker_config",
                          "default_config",
                          "dynamic_broker_logger_config"
                        ]
                      },
                      "synonyms": {
                        "type": "array",
                        "description": "Configuration synonyms",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Synonym name"
                            },
                            "source": {
                              "type": "string",
                              "description": "Source of the Kafka topic configuration entry",
                              "enum": [
                                "unknown_config",
                                "topic_config",
                                "dynamic_broker_config",
                                "dynamic_default_broker_config",
                                "static_broker_config",
                                "default_config",
                                "dynamic_broker_logger_config"
                              ]
                            },
                            "value": {
                              "type": "boolean",
                              "description": "Synonym value"
                            }
                          }
                        }
                      },
                      "value": {
                        "type": "boolean",
                        "description": "unclean.leader.election.enable"
                      }
                    }
                  }
                }
              },
              "min_insync_replicas": {
                "type": "integer",
                "description": "DEPRECATED: use config.min_insync_replicas",
                "minimum": 1
              },
              "partitions": {
                "type": "array",
                "description": "Topic partitions",
                "items": {
                  "type": "object",
                  "properties": {
                    "consumer_groups": {
                      "type": "array",
                      "description": "List of Kafka consumer groups",
                      "items": {
                        "type": "object",
                        "properties": {
                          "group_name": {
                            "type": "string",
                            "description": "consumer group"
                          },
                          "offset": {
                            "type": "integer",
                            "description": "Latest partition message offset",
                            "minimum": 0
                          }
                        },
                        "required": [
                          "group_name",
                          "offset"
                        ]
                      }
                    },
                    "earliest_offset": {
                      "type": "integer",
                      "description": "Earliest partition message offset"
                    },
                    "isr": {
                      "type": "integer",
                      "description": "Number of In Sync Replicas (ISR)",
                      "minimum": 0
                    },
                    "latest_offset": {
                      "type": "integer",
                      "description": "Latest partition message offset"
                    },
                    "partition": {
                      "type": "integer",
                      "description": "Partition number"
                    },
                    "size": {
                      "type": "integer",
                      "description": "Size of partition in bytes",
                      "minimum": 0
                    }
                  },
                  "required": [
                    "consumer_groups",
                    "earliest_offset",
                    "isr",
                    "latest_offset",
                    "partition",
                    "size"
                  ]
                }
              },
              "replication": {
                "type": "integer",
                "description": "Number of replicas",
                "minimum": 1
              },
              "retention_bytes": {
                "type": "integer",
                "description": "DEPRECATED: use config.retention_bytes"
              },
              "retention_hours": {
                "type": "integer",
                "description": "DEPRECATED: use config.retention_ms",
                "maximum": 2562047788015
              },
              "state": {
                "type": "string",
                "description": "Topic state",
                "enum": [
                  "ACTIVE",
                  "CONFIGURING",
                  "DELETING"
                ]
              },
              "tags": {
                "type": "array",
                "description": "Topic tags",
                "minItems": 0,
                "maxItems": 3,
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Tag key",
                      "minLength": 1,
                      "maxLength": 64
                    },
                    "value": {
                      "type": "string",
                      "description": "Tag value",
                      "minLength": 0,
                      "maxLength": 256
                    }
                  },
                  "required": [
                    "key",
                    "value"
                  ]
                }
              },
              "topic_name": {
                "type": "string",
                "description": "Topic name",
                "minLength": 1,
                "maxLength": 249
              }
            },
            "required": [
              "cleanup_policy",
              "config",
              "min_insync_replicas",
              "partitions",
              "replication",
              "retention_bytes",
              "retention_hours",
              "state",
              "tags",
              "topic_name"
            ]
          }
        },
        "required": [
          "topic"
        ]
      },
      "ServiceKafkaTopicListResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "topics": {
            "type": "array",
            "description": "List of Kafka topics",
            "items": {
              "type": "object",
              "properties": {
                "cleanup_policy": {
                  "type": "string",
                  "description": "cleanup.policy",
                  "maxLength": 64
                },
                "min_insync_replicas": {
                  "type": "integer",
                  "description": "min.insync.replicas",
                  "minimum": 1
                },
                "partitions": {
                  "type": "integer",
                  "description": "Number of partitions",
                  "minimum": 1,
                  "maximum": 1000000
                },
                "replication": {
                  "type": "integer",
                  "description": "Number of replicas",
                  "minimum": 1
                },
                "retention_bytes": {
                  "type": "integer",
                  "description": "retention.bytes"
                },
                "retention_hours": {
                  "type": "integer",
                  "description": "Retention period (hours)",
                  "maximum": 2562047788015
                },
                "state": {
                  "type": "string",
                  "description": "Topic state",
                  "enum": [
                    "ACTIVE",
                    "CONFIGURING",
                    "DELETING"
                  ]
                },
                "tags": {
                  "type": "array",
                  "description": "Topic tags",
                  "minItems": 0,
                  "maxItems": 3,
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "Tag key",
                        "minLength": 1,
                        "maxLength": 64
                      },
                      "value": {
                        "type": "string",
                        "description": "Tag value",
                        "minLength": 0,
                        "maxLength": 256
                      }
                    },
                    "required": [
                      "key",
                      "value"
                    ]
                  }
                },
                "topic_name": {
                  "type": "string",
                  "description": "Topic name",
                  "minLength": 1,
                  "maxLength": 249
                }
              },
              "required": [
                "cleanup_policy",
                "min_insync_replicas",
                "partitions",
                "replication",
                "retention_bytes",
                "retention_hours",
                "state",
                "tags",
                "topic_name"
              ]
            }
          }
        },
        "required": [
          "topics"
        ]
      },
      "ServiceKafkaTopicMessageListRequestBody": {
        "type": "object",
        "description": "ServiceKafkaTopicMessageListRequestBody",
        "properties": {
          "format": {
            "type": "string",
            "description": "The format of consumed messages, which is used to convert messages into a JSON-compatible form. If unspecified, defaults to binary",
            "enum": [
              "binary",
              "json",
              "avro",
              "protobuf",
              "jsonschema"
            ]
          },
          "max_bytes": {
            "type": "integer",
            "description": "The maximum number of bytes of unencoded keys and values that should be included in the response. This provides approximate control over the size of responses and the amount of memory required to store the decoded response. The actual limit will be the minimum of this setting and the server-side configuration consumer.request.max.bytes. Default is unlimited",
            "minimum": 1024,
            "maximum": 1000000000
          },
          "partitions": {
            "type": "object",
            "description": "Object of desired partition / offset mappings",
            "properties": {}
          },
          "timeout": {
            "type": "integer",
            "description": "The maximum total time to wait for messages for a request if the maximum request size has not yet been reached",
            "minimum": 3000,
            "maximum": 40000
          }
        },
        "required": [
          "partitions"
        ]
      },
      "ServiceKafkaTopicMessageListResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicMessageListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "messages": {
            "type": "array",
            "description": "List of messages from topic",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "object",
                  "description": "The message key, formatted according to the embedded format",
                  "properties": {}
                },
                "offset": {
                  "type": "integer",
                  "description": "Offset of the message"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition of the message"
                },
                "topic": {
                  "type": "string",
                  "description": "The name of the topic"
                },
                "value": {
                  "type": "object",
                  "description": "The message value, formatted according to the embedded format",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "ServiceKafkaTopicMessageProduceRequestBody": {
        "type": "object",
        "description": "ServiceKafkaTopicMessageProduceRequestBody",
        "properties": {
          "format": {
            "type": "string",
            "description": "The format of the content.",
            "enum": [
              "binary",
              "json",
              "avro",
              "protobuf",
              "jsonschema"
            ]
          },
          "key_schema": {
            "type": "string",
            "description": "Full schema encoded as a string (e.g. JSON serialized for Avro data)",
            "minLength": 18,
            "maxLength": 2048
          },
          "key_schema_id": {
            "type": "integer",
            "description": "ID returned by a previous request using the same schema. This ID corresponds to the ID of the schema in the registry.",
            "minimum": 1,
            "maximum": 50000
          },
          "records": {
            "type": "array",
            "description": "List of records to produce to the topic",
            "maxItems": 32,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "object",
                  "description": "Key for the produced record",
                  "properties": {}
                },
                "partition": {
                  "type": "integer",
                  "description": "Optionally specify the partition where to produce the record",
                  "minimum": 0,
                  "maximum": 10000
                },
                "value": {
                  "type": "object",
                  "description": "Value for the produced record",
                  "properties": {}
                }
              }
            }
          },
          "value_schema": {
            "type": "string",
            "description": "Full schema encoded as a string (e.g. JSON serialized for Avro data)",
            "minLength": 18,
            "maxLength": 2048
          },
          "value_schema_id": {
            "type": "integer",
            "description": "ID returned by a previous request using the same schema. This ID corresponds to the ID of the schema in the registry.",
            "minimum": 1,
            "maximum": 50000
          }
        },
        "required": [
          "format",
          "records"
        ]
      },
      "ServiceKafkaTopicMessageProduceResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicMessageProduceResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "key_schema_id": {
            "type": "integer",
            "description": "The ID for the schema used to produce keys, or null if keys were not used"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "offsets": {
            "type": "array",
            "description": "List of offsets for the produced record",
            "items": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "An error message describing why the operation failed, or null if it succeeded"
                },
                "error_code": {
                  "type": "integer",
                  "description": "An error code classifying the reason this operation failed, or null if it succeeded. 1 = Non-retriable Kafka exception, 2 = Retriable Kafka exception; the message might be sent successfully if retried"
                },
                "offset": {
                  "type": "integer",
                  "description": "Offset of the message, or null if publishing the message failed"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition the message was published to, or null if publishing the message failed"
                }
              }
            }
          },
          "value_schema_id": {
            "type": "integer",
            "description": "The ID for the schema used to produce values"
          }
        }
      },
      "ServiceKafkaTopicUpdateRequestBody": {
        "type": "object",
        "description": "ServiceKafkaTopicUpdateRequestBody",
        "properties": {
          "config": {
            "type": "object",
            "description": "Kafka topic configuration",
            "properties": {
              "cleanup_policy": {
                "type": "string",
                "description": "cleanup.policy",
                "enum": [
                  "delete",
                  "compact",
                  "compact,delete"
                ]
              },
              "compression_type": {
                "type": "string",
                "description": "compression.type",
                "enum": [
                  "snappy",
                  "gzip",
                  "lz4",
                  "producer",
                  "uncompressed",
                  "zstd"
                ]
              },
              "delete_retention_ms": {
                "type": "integer",
                "description": "delete.retention.ms",
                "minimum": 0
              },
              "file_delete_delay_ms": {
                "type": "integer",
                "description": "file.delete.delay.ms",
                "minimum": 0
              },
              "flush_messages": {
                "type": "integer",
                "description": "flush.messages",
                "minimum": 0
              },
              "flush_ms": {
                "type": "integer",
                "description": "flush.ms",
                "minimum": 0
              },
              "index_interval_bytes": {
                "type": "integer",
                "description": "index.interval.bytes",
                "minimum": 0
              },
              "max_compaction_lag_ms": {
                "type": "integer",
                "description": "max.compaction.lag.ms",
                "minimum": 0
              },
              "max_message_bytes": {
                "type": "integer",
                "description": "max.message.bytes",
                "minimum": 0
              },
              "message_downconversion_enable": {
                "type": "boolean",
                "description": "message.downconversion.enable"
              },
              "message_format_version": {
                "type": "string",
                "description": "message.format.version",
                "enum": [
                  "0.8.0",
                  "0.8.1",
                  "0.8.2",
                  "0.9.0",
                  "0.10.0",
                  "0.10.0-IV0",
                  "0.10.0-IV1",
                  "0.10.1",
                  "0.10.1-IV0",
                  "0.10.1-IV1",
                  "0.10.1-IV2",
                  "0.10.2",
                  "0.10.2-IV0",
                  "0.11.0",
                  "0.11.0-IV0",
                  "0.11.0-IV1",
                  "0.11.0-IV2",
                  "1.0",
                  "1.0-IV0",
                  "1.1",
                  "1.1-IV0",
                  "2.0",
                  "2.0-IV0",
                  "2.0-IV1",
                  "2.1",
                  "2.1-IV0",
                  "2.1-IV1",
                  "2.1-IV2",
                  "2.2",
                  "2.2-IV0",
                  "2.2-IV1",
                  "2.3",
                  "2.3-IV0",
                  "2.3-IV1",
                  "2.4",
                  "2.4-IV0",
                  "2.4-IV1",
                  "2.5",
                  "2.5-IV0",
                  "2.6",
                  "2.6-IV0",
                  "2.7",
                  "2.7-IV0",
                  "2.7-IV1",
                  "2.7-IV2",
                  "2.8",
                  "2.8-IV0",
                  "2.8-IV1",
                  "3.0",
                  "3.0-IV0",
                  "3.0-IV1",
                  "3.1",
                  "3.1-IV0",
                  "3.2",
                  "3.2-IV0",
                  "3.3",
                  "3.3-IV0",
                  "3.3-IV1",
                  "3.3-IV2",
                  "3.3-IV3",
                  "3.4",
                  "3.4-IV0"
                ]
              },
              "message_timestamp_difference_max_ms": {
                "type": "integer",
                "description": "message.timestamp.difference.max.ms",
                "minimum": 0
              },
              "message_timestamp_type": {
                "type": "string",
                "description": "message.timestamp.type",
                "enum": [
                  "CreateTime",
                  "LogAppendTime"
                ]
              },
              "min_cleanable_dirty_ratio": {
                "type": "number",
                "description": "min.cleanable.dirty.ratio",
                "minimum": 0,
                "maximum": 1
              },
              "min_compaction_lag_ms": {
                "type": "integer",
                "description": "min.compaction.lag.ms",
                "minimum": 0
              },
              "min_insync_replicas": {
                "type": "integer",
                "description": "min.insync.replicas",
                "minimum": 1
              },
              "preallocate": {
                "type": "boolean",
                "description": "preallocate"
              },
              "retention_bytes": {
                "type": "integer",
                "description": "retention.bytes"
              },
              "retention_ms": {
                "type": "integer",
                "description": "retention.ms"
              },
              "segment_bytes": {
                "type": "integer",
                "description": "segment.bytes",
                "minimum": 14
              },
              "segment_index_bytes": {
                "type": "integer",
                "description": "segment.index.bytes",
                "minimum": 0
              },
              "segment_jitter_ms": {
                "type": "integer",
                "description": "segment.jitter.ms",
                "minimum": 0
              },
              "segment_ms": {
                "type": "integer",
                "description": "segment.ms",
                "minimum": 1
              },
              "unclean_leader_election_enable": {
                "type": "boolean",
                "description": "unclean.leader.election.enable"
              }
            }
          },
          "min_insync_replicas": {
            "type": "integer",
            "description": "DEPRECATED: use config.min_insync_replicas",
            "minimum": 1
          },
          "partitions": {
            "type": "integer",
            "description": "Number of partitions",
            "minimum": 1,
            "maximum": 1000000
          },
          "replication": {
            "type": "integer",
            "description": "Number of replicas",
            "minimum": 1
          },
          "retention_bytes": {
            "type": "integer",
            "description": "DEPRECATED: use config.retention_bytes"
          },
          "retention_hours": {
            "type": "integer",
            "description": "DEPRECATED: use config.retention_ms",
            "maximum": 2562047788015
          },
          "tags": {
            "type": "array",
            "description": "Topic tags",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Tag key",
                  "minLength": 1,
                  "maxLength": 64
                },
                "value": {
                  "type": "string",
                  "description": "Tag value",
                  "minLength": 0,
                  "maxLength": 256
                }
              },
              "required": [
                "key",
                "value"
              ]
            }
          }
        }
      },
      "ServiceKafkaTopicUpdateResponse": {
        "type": "object",
        "description": "ServiceKafkaTopicUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistryAclAddRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistryAclAddRequestBody",
        "properties": {
          "permission": {
            "type": "string",
            "description": "ACL entry for Schema Registry",
            "enum": [
              "schema_registry_read",
              "schema_registry_write"
            ]
          },
          "resource": {
            "type": "string",
            "description": "Schema Registry ACL entry resource name pattern",
            "minLength": 1,
            "maxLength": 249
          },
          "username": {
            "type": "string",
            "description": "Username",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": [
          "permission",
          "resource",
          "username"
        ]
      },
      "ServiceSchemaRegistryAclAddResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryAclAddResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Schema Registry ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "ACL entry for Schema Registry",
                  "enum": [
                    "schema_registry_read",
                    "schema_registry_write"
                  ]
                },
                "resource": {
                  "type": "string",
                  "description": "Schema Registry ACL entry resource name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": [
                "permission",
                "resource",
                "username"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "acl"
        ]
      },
      "ServiceSchemaRegistryAclDeleteResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryAclDeleteResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Schema Registry ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "ACL entry for Schema Registry",
                  "enum": [
                    "schema_registry_read",
                    "schema_registry_write"
                  ]
                },
                "resource": {
                  "type": "string",
                  "description": "Schema Registry ACL entry resource name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": [
                "permission",
                "resource",
                "username"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "acl"
        ]
      },
      "ServiceSchemaRegistryAclListResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryAclListResponse",
        "properties": {
          "acl": {
            "type": "array",
            "description": "List of Schema Registry ACL entries",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID",
                  "maxLength": 40
                },
                "permission": {
                  "type": "string",
                  "description": "ACL entry for Schema Registry",
                  "enum": [
                    "schema_registry_read",
                    "schema_registry_write"
                  ]
                },
                "resource": {
                  "type": "string",
                  "description": "Schema Registry ACL entry resource name pattern",
                  "minLength": 1,
                  "maxLength": 249
                },
                "username": {
                  "type": "string",
                  "description": "Username",
                  "minLength": 1,
                  "maxLength": 64
                }
              },
              "required": [
                "permission",
                "resource",
                "username"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "acl"
        ]
      },
      "ServiceSchemaRegistryCompatibilityRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistryCompatibilityRequestBody",
        "properties": {
          "schema": {
            "type": "string",
            "description": "Schema",
            "maxLength": 1048576
          },
          "schemaType": {
            "type": "string",
            "description": "Schema type",
            "enum": [
              "AVRO",
              "JSON",
              "PROTOBUF"
            ]
          }
        },
        "required": [
          "schema"
        ]
      },
      "ServiceSchemaRegistryCompatibilityResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryCompatibilityResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "is_compatible": {
            "type": "boolean",
            "description": "Compatibility"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "is_compatible"
        ]
      },
      "ServiceSchemaRegistryGlobalConfigGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryGlobalConfigGetResponse",
        "properties": {
          "compatibilityLevel": {
            "type": "string",
            "description": "Configuration",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "compatibilityLevel"
        ]
      },
      "ServiceSchemaRegistryGlobalConfigPutRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistryGlobalConfigPutRequestBody",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "Configuration",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          }
        },
        "required": [
          "compatibility"
        ]
      },
      "ServiceSchemaRegistryGlobalConfigPutResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistryGlobalConfigPutResponse",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "Configuration",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "compatibility"
        ]
      },
      "ServiceSchemaRegistrySchemaGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySchemaGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectConfigGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectConfigGetResponse",
        "properties": {
          "compatibilityLevel": {
            "type": "string",
            "description": "Configuration",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "compatibilityLevel"
        ]
      },
      "ServiceSchemaRegistrySubjectConfigPutRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectConfigPutRequestBody",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "Configuration",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          }
        },
        "required": [
          "compatibility"
        ]
      },
      "ServiceSchemaRegistrySubjectConfigPutResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectConfigPutResponse",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "Configuration",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "compatibility"
        ]
      },
      "ServiceSchemaRegistrySubjectDeleteResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectVersionDeleteResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectVersionGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectVersionPostRequestBody": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionPostRequestBody",
        "properties": {
          "schema": {
            "type": "string",
            "description": "Schema",
            "maxLength": 1048576
          },
          "schemaType": {
            "type": "string",
            "description": "Schema type",
            "enum": [
              "AVRO",
              "JSON",
              "PROTOBUF"
            ]
          }
        },
        "required": [
          "schema"
        ]
      },
      "ServiceSchemaRegistrySubjectVersionPostResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionPostResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "id": {
            "type": "integer",
            "description": "Version",
            "minimum": 0
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "id"
        ]
      },
      "ServiceSchemaRegistrySubjectVersionSchemaGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionSchemaGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceSchemaRegistrySubjectVersionsGetResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectVersionsGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "versions": {
            "type": "array",
            "description": "List of available versions for a Schema Registry subject",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "versions"
        ]
      },
      "ServiceSchemaRegistrySubjectsResponse": {
        "type": "object",
        "description": "ServiceSchemaRegistrySubjectsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "subjects": {
            "type": "array",
            "description": "List of available Schema Registry subjects",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "subjects"
        ]
      },
      "ServiceKafkaMirrorMakerCreateReplicationFlowRequestBody": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerCreateReplicationFlowRequestBody",
        "properties": {
          "config_properties_exclude": {
            "type": "string",
            "description": "Topic configuration properties that should not be replicated",
            "maxLength": 2048
          },
          "emit_heartbeats_enabled": {
            "type": "boolean",
            "description": "Emit heartbeats enabled"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is replication flow enabled"
          },
          "offset_syncs_topic_location": {
            "type": "string",
            "description": "Offset syncs topic location",
            "enum": [
              "source",
              "target"
            ]
          },
          "replication_policy_class": {
            "type": "string",
            "description": "Replication policy class",
            "enum": [
              "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
              "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
            ]
          },
          "source_cluster": {
            "type": "string",
            "description": "Source cluster alias",
            "maxLength": 128
          },
          "sync_group_offsets_enabled": {
            "type": "boolean",
            "description": "Sync consumer group offsets"
          },
          "sync_group_offsets_interval_seconds": {
            "type": "integer",
            "description": "Frequency of consumer group offset sync",
            "minimum": 1
          },
          "target_cluster": {
            "type": "string",
            "description": "Target cluster alias",
            "maxLength": 128
          },
          "topics": {
            "type": "array",
            "description": "List of topics and/or regular expressions to replicate.",
            "maxItems": 8192,
            "items": {
              "type": "string"
            }
          },
          "topics.blacklist": {
            "type": "array",
            "description": "List of topics and/or regular expressions to not replicate.",
            "maxItems": 8192,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "enabled",
          "source_cluster",
          "target_cluster"
        ]
      },
      "ServiceKafkaMirrorMakerCreateReplicationFlowResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerCreateReplicationFlowResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaMirrorMakerDeleteReplicationFlowResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerDeleteReplicationFlowResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceKafkaMirrorMakerGetReplicationFlowResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerGetReplicationFlowResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "replication_flow": {
            "type": "object",
            "description": "Replication flow",
            "properties": {
              "config_properties_exclude": {
                "type": "string",
                "description": "Topic configuration properties that should not be replicated",
                "maxLength": 2048
              },
              "emit_heartbeats_enabled": {
                "type": "boolean",
                "description": "Emit heartbeats enabled"
              },
              "enabled": {
                "type": "boolean",
                "description": "Is replication flow enabled"
              },
              "offset_syncs_topic_location": {
                "type": "string",
                "description": "Offset syncs topic location",
                "enum": [
                  "source",
                  "target"
                ]
              },
              "replication_policy_class": {
                "type": "string",
                "description": "Replication policy class",
                "enum": [
                  "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
                  "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
                ]
              },
              "source_cluster": {
                "type": "string",
                "description": "Source cluster alias",
                "maxLength": 128
              },
              "sync_group_offsets_enabled": {
                "type": "boolean",
                "description": "Sync consumer group offsets"
              },
              "sync_group_offsets_interval_seconds": {
                "type": "integer",
                "description": "Frequency of consumer group offset sync",
                "minimum": 1
              },
              "target_cluster": {
                "type": "string",
                "description": "Target cluster alias",
                "maxLength": 128
              },
              "topics": {
                "type": "array",
                "description": "List of topics and/or regular expressions to replicate.",
                "maxItems": 8192,
                "items": {
                  "type": "string"
                }
              },
              "topics.blacklist": {
                "type": "array",
                "description": "List of topics and/or regular expressions to not replicate.",
                "maxItems": 8192,
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "enabled",
              "source_cluster",
              "target_cluster"
            ]
          }
        },
        "required": [
          "replication_flow"
        ]
      },
      "ServiceKafkaMirrorMakerGetReplicationFlowsResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerGetReplicationFlowsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "replication_flows": {
            "type": "array",
            "description": "Replication flows",
            "maxItems": 256,
            "items": {
              "type": "object",
              "properties": {
                "config_properties_exclude": {
                  "type": "string",
                  "description": "Topic configuration properties that should not be replicated",
                  "maxLength": 2048
                },
                "emit_heartbeats_enabled": {
                  "type": "boolean",
                  "description": "Emit heartbeats enabled"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Is replication flow enabled"
                },
                "offset_syncs_topic_location": {
                  "type": "string",
                  "description": "Offset syncs topic location",
                  "enum": [
                    "source",
                    "target"
                  ]
                },
                "replication_policy_class": {
                  "type": "string",
                  "description": "Replication policy class",
                  "enum": [
                    "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
                    "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
                  ]
                },
                "source_cluster": {
                  "type": "string",
                  "description": "Source cluster alias",
                  "maxLength": 128
                },
                "sync_group_offsets_enabled": {
                  "type": "boolean",
                  "description": "Sync consumer group offsets"
                },
                "sync_group_offsets_interval_seconds": {
                  "type": "integer",
                  "description": "Frequency of consumer group offset sync",
                  "minimum": 1
                },
                "target_cluster": {
                  "type": "string",
                  "description": "Target cluster alias",
                  "maxLength": 128
                },
                "topics": {
                  "type": "array",
                  "description": "List of topics and/or regular expressions to replicate.",
                  "maxItems": 8192,
                  "items": {
                    "type": "string"
                  }
                },
                "topics.blacklist": {
                  "type": "array",
                  "description": "List of topics and/or regular expressions to not replicate.",
                  "maxItems": 8192,
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "enabled",
                "source_cluster",
                "target_cluster"
              ]
            }
          }
        },
        "required": [
          "replication_flows"
        ]
      },
      "ServiceKafkaMirrorMakerPatchReplicationFlowRequestBody": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerPatchReplicationFlowRequestBody",
        "properties": {
          "config_properties_exclude": {
            "type": "string",
            "description": "Topic configuration properties that should not be replicated",
            "maxLength": 2048
          },
          "emit_heartbeats_enabled": {
            "type": "boolean",
            "description": "Emit heartbeats enabled"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is replication flow enabled"
          },
          "offset_syncs_topic_location": {
            "type": "string",
            "description": "Offset syncs topic location",
            "enum": [
              "source",
              "target"
            ]
          },
          "replication_policy_class": {
            "type": "string",
            "description": "Replication policy class",
            "enum": [
              "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
              "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
            ]
          },
          "sync_group_offsets_enabled": {
            "type": "boolean",
            "description": "Sync consumer group offsets"
          },
          "sync_group_offsets_interval_seconds": {
            "type": "integer",
            "description": "Frequency of consumer group offset sync",
            "minimum": 1
          },
          "topics": {
            "type": "array",
            "description": "List of topics and/or regular expressions to replicate.",
            "maxItems": 8192,
            "items": {
              "type": "string"
            }
          },
          "topics.blacklist": {
            "type": "array",
            "description": "List of topics and/or regular expressions to not replicate.",
            "maxItems": 8192,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ServiceKafkaMirrorMakerPatchReplicationFlowResponse": {
        "type": "object",
        "description": "ServiceKafkaMirrorMakerPatchReplicationFlowResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "replication_flow": {
            "type": "object",
            "description": "Replication flow",
            "properties": {
              "config_properties_exclude": {
                "type": "string",
                "description": "Topic configuration properties that should not be replicated",
                "maxLength": 2048
              },
              "emit_heartbeats_enabled": {
                "type": "boolean",
                "description": "Emit heartbeats enabled"
              },
              "enabled": {
                "type": "boolean",
                "description": "Is replication flow enabled"
              },
              "offset_syncs_topic_location": {
                "type": "string",
                "description": "Offset syncs topic location",
                "enum": [
                  "source",
                  "target"
                ]
              },
              "replication_policy_class": {
                "type": "string",
                "description": "Replication policy class",
                "enum": [
                  "org.apache.kafka.connect.mirror.DefaultReplicationPolicy",
                  "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
                ]
              },
              "source_cluster": {
                "type": "string",
                "description": "Source cluster alias",
                "maxLength": 128
              },
              "sync_group_offsets_enabled": {
                "type": "boolean",
                "description": "Sync consumer group offsets"
              },
              "sync_group_offsets_interval_seconds": {
                "type": "integer",
                "description": "Frequency of consumer group offset sync",
                "minimum": 1
              },
              "target_cluster": {
                "type": "string",
                "description": "Target cluster alias",
                "maxLength": 128
              },
              "topics": {
                "type": "array",
                "description": "List of topics and/or regular expressions to replicate.",
                "maxItems": 8192,
                "items": {
                  "type": "string"
                }
              },
              "topics.blacklist": {
                "type": "array",
                "description": "List of topics and/or regular expressions to not replicate.",
                "maxItems": 8192,
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "enabled",
              "source_cluster",
              "target_cluster"
            ]
          }
        },
        "required": [
          "replication_flow"
        ]
      },
      "MySQLServiceQueryStatisticsRequestBody": {
        "type": "object",
        "description": "MySQLServiceQueryStatisticsRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit for number of results",
            "minimum": 1,
            "maximum": 5000
          },
          "offset": {
            "type": "integer",
            "description": "Offset for retrieved results based on sort order",
            "minimum": 0
          },
          "order_by": {
            "type": "string",
            "description": "Order in which to sort retrieved results",
            "maxLength": 256
          }
        }
      },
      "MySQLServiceQueryStatisticsResponse": {
        "type": "object",
        "description": "MySQLServiceQueryStatisticsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {
                "avg_timer_wait": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "count_star": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "digest": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "digest_text": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "first_seen": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "last_seen": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "max_timer_wait": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_timer_wait": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "quantile_95": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "quantile_99": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "quantile_999": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "query_sample_seen": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "query_sample_text": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "query_sample_timer_wait": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "schema_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "sum_created_tmp_disk_tables": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_created_tmp_tables": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_errors": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_lock_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_no_good_index_used": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_no_index_used": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_rows_affected": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_rows_examined": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_rows_sent": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_full_join": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_full_range_join": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_range": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_range_check": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_select_scan": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_sort_merge_passes": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_sort_range": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_sort_rows": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_sort_scan": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_timer_wait": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "sum_warnings": {
                  "type": "number",
                  "description": "Query statistic"
                }
              }
            }
          }
        },
        "required": [
          "queries"
        ]
      },
      "ServiceOpenSearchAclGetResponse": {
        "type": "object",
        "description": "ServiceOpenSearchAclGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": [
              "acls",
              "enabled"
            ]
          }
        },
        "required": [
          "opensearch_acl_config"
        ]
      },
      "ServiceOpenSearchAclSetRequestBody": {
        "type": "object",
        "description": "ServiceOpenSearchAclSetRequestBody",
        "properties": {
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": [
              "acls",
              "enabled"
            ]
          }
        },
        "required": [
          "opensearch_acl_config"
        ]
      },
      "ServiceOpenSearchAclSetResponse": {
        "type": "object",
        "description": "ServiceOpenSearchAclSetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": [
              "acls",
              "enabled"
            ]
          }
        },
        "required": [
          "opensearch_acl_config"
        ]
      },
      "ServiceOpenSearchAclUpdateRequestBody": {
        "type": "object",
        "description": "ServiceOpenSearchAclUpdateRequestBody",
        "properties": {
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            }
          }
        },
        "required": [
          "opensearch_acl_config"
        ]
      },
      "ServiceOpenSearchAclUpdateResponse": {
        "type": "object",
        "description": "ServiceOpenSearchAclUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "opensearch_acl_config": {
            "type": "object",
            "description": "OpenSearch ACL configuration",
            "properties": {
              "acls": {
                "type": "array",
                "description": "List of OpenSearch ACLs",
                "maxItems": 512,
                "items": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "OpenSearch rules",
                      "maxItems": 256,
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "OpenSearch index pattern",
                            "minLength": 1,
                            "maxLength": 249
                          },
                          "permission": {
                            "type": "string",
                            "description": "OpenSearch permission",
                            "enum": [
                              "deny",
                              "admin",
                              "read",
                              "readwrite",
                              "write"
                            ]
                          }
                        },
                        "required": [
                          "index",
                          "permission"
                        ]
                      }
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "rules",
                    "username"
                  ]
                }
              },
              "enabled": {
                "type": "boolean",
                "description": "Enable OpenSearch ACLs. When disabled authenticated service users have unrestricted access."
              }
            },
            "required": [
              "acls",
              "enabled"
            ]
          }
        },
        "required": [
          "opensearch_acl_config"
        ]
      },
      "PGServiceAvailableExtensionsResponse": {
        "type": "object",
        "description": "PGServiceAvailableExtensionsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "extensions": {
            "type": "array",
            "description": "Extensions available for loading with CREATE EXTENSION in this service",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Extension name"
                },
                "versions": {
                  "type": "array",
                  "description": "Extension versions available",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "extensions"
        ]
      },
      "PGServiceQueryStatisticsRequestBody": {
        "type": "object",
        "description": "PGServiceQueryStatisticsRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit for number of results",
            "minimum": 1,
            "maximum": 5000
          },
          "offset": {
            "type": "integer",
            "description": "Offset for retrieved results based on sort order",
            "minimum": 0
          },
          "order_by": {
            "type": "string",
            "description": "Order in which to sort retrieved results",
            "maxLength": 256
          }
        }
      },
      "PGServiceQueryStatisticsResponse": {
        "type": "object",
        "description": "PGServiceQueryStatisticsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {
                "blk_read_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "blk_write_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "calls": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "database_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "local_blks_dirtied": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_hit": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "query": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "queryid": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "rows": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_dirtied": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_hit": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "temp_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "temp_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "user_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "wal_bytes": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "wal_fpi": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "wal_records": {
                  "type": "number",
                  "description": "Query statistic"
                }
              }
            }
          }
        },
        "required": [
          "queries"
        ]
      },
      "PGServiceQueryStatisticsDeprecatedRequestBody": {
        "type": "object",
        "description": "PGServiceQueryStatisticsDeprecatedRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit for number of results",
            "minimum": 1,
            "maximum": 5000
          },
          "offset": {
            "type": "integer",
            "description": "Offset for retrieved results based on sort order",
            "minimum": 0
          },
          "order_by": {
            "type": "string",
            "description": "Order in which to sort retrieved results",
            "maxLength": 256
          }
        }
      },
      "PGServiceQueryStatisticsDeprecatedResponse": {
        "type": "object",
        "description": "PGServiceQueryStatisticsDeprecatedResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {
                "blk_read_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "blk_write_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "calls": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "database_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "local_blks_dirtied": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_hit": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "local_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "max_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "mean_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "min_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "query": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "queryid": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "rows": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_dirtied": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_hit": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "shared_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "stddev_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "temp_blks_read": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "temp_blks_written": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_exec_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_plan_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "total_time": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "user_name": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "wal_bytes": {
                  "type": "string",
                  "description": "Query statistic"
                },
                "wal_fpi": {
                  "type": "number",
                  "description": "Query statistic"
                },
                "wal_records": {
                  "type": "number",
                  "description": "Query statistic"
                }
              }
            }
          }
        },
        "required": [
          "queries"
        ]
      },
      "ServicePGBouncerCreateRequestBody": {
        "type": "object",
        "description": "ServicePGBouncerCreateRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 63
          },
          "pool_mode": {
            "type": "string",
            "description": "PGBouncer pool mode",
            "enum": [
              "session",
              "transaction",
              "statement"
            ]
          },
          "pool_name": {
            "type": "string",
            "description": "Connection pool name",
            "maxLength": 63
          },
          "pool_size": {
            "type": "integer",
            "description": "Size of PGBouncer's PostgreSQL side connection pool",
            "minimum": 1,
            "maximum": 10000
          },
          "username": {
            "type": "string",
            "description": "Service username",
            "maxLength": 64
          }
        },
        "required": [
          "database",
          "pool_name"
        ]
      },
      "ServicePGBouncerCreateResponse": {
        "type": "object",
        "description": "ServicePGBouncerCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServicePGBouncerDeleteResponse": {
        "type": "object",
        "description": "ServicePGBouncerDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServicePGBouncerUpdateRequestBody": {
        "type": "object",
        "description": "ServicePGBouncerUpdateRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 63
          },
          "pool_mode": {
            "type": "string",
            "description": "PGBouncer pool mode",
            "enum": [
              "session",
              "transaction",
              "statement"
            ]
          },
          "pool_size": {
            "type": "integer",
            "description": "Size of PGBouncer's PostgreSQL side connection pool",
            "minimum": 1,
            "maximum": 10000
          },
          "username": {
            "type": "string",
            "description": "Service username",
            "maxLength": 64
          }
        }
      },
      "ServicePGBouncerUpdateResponse": {
        "type": "object",
        "description": "ServicePGBouncerUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ListProjectServiceTypesResponse": {
        "type": "object",
        "description": "ListProjectServiceTypesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_types": {
            "type": "object",
            "description": "Service types by their code",
            "properties": {
              "ANY": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": [
                                "basic",
                                "pitr"
                              ]
                            }
                          },
                          "required": [
                            "interval",
                            "max_count",
                            "recovery_mode"
                          ]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              }
            }
          }
        },
        "required": [
          "service_types"
        ]
      },
      "ListPublicServiceTypesResponse": {
        "type": "object",
        "description": "ListPublicServiceTypesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_types": {
            "type": "object",
            "description": "Service types by their code",
            "properties": {
              "ANY": {
                "type": "object",
                "description": "Service type information",
                "properties": {
                  "default_version": {
                    "type": "string",
                    "description": "Default version of the service if no explicit version is defined"
                  },
                  "description": {
                    "type": "string",
                    "description": "Single line description of the service"
                  },
                  "latest_available_version": {
                    "type": "string",
                    "description": "Latest available version of the service"
                  },
                  "service_plans": {
                    "type": "array",
                    "description": "List of plans available for this type of service",
                    "items": {
                      "type": "object",
                      "properties": {
                        "backup_config": {
                          "type": "object",
                          "description": "Backup configuration for this service plan",
                          "properties": {
                            "frequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking a frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "frequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest frequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_interval_minutes": {
                              "type": "integer",
                              "description": "Interval of taking an infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "infrequent_oldest_age_minutes": {
                              "type": "integer",
                              "description": "Maximum age of the oldest infrequent backup in service types supporting different backup schedules",
                              "minimum": 0
                            },
                            "interval": {
                              "type": "integer",
                              "description": "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
                              "minimum": 0
                            },
                            "max_count": {
                              "type": "integer",
                              "description": "Maximum number of backups to keep. Zero when no backups are created.",
                              "minimum": 0
                            },
                            "recovery_mode": {
                              "type": "string",
                              "description": "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot.",
                              "enum": [
                                "basic",
                                "pitr"
                              ]
                            }
                          },
                          "required": [
                            "interval",
                            "max_count",
                            "recovery_mode"
                          ]
                        },
                        "max_memory_percent": {
                          "type": "integer",
                          "description": "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
                          "minimum": 0,
                          "maximum": 100
                        },
                        "node_count": {
                          "type": "integer",
                          "description": "Number of nodes in this service plan",
                          "minimum": 1
                        },
                        "regions": {
                          "type": "object",
                          "description": "Service plan hourly price per cloud region",
                          "properties": {}
                        },
                        "service_plan": {
                          "type": "string",
                          "description": "Subscription plan",
                          "maxLength": 128
                        },
                        "service_type": {
                          "type": "string",
                          "description": "Service type code",
                          "maxLength": 64
                        },
                        "shard_count": {
                          "type": "integer",
                          "description": "Number of shards in this service plan",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "backup_config",
                        "service_plan",
                        "service_type"
                      ]
                    }
                  },
                  "user_config_schema": {
                    "type": "object",
                    "description": "JSON-Schema for the 'user_config' properties",
                    "properties": {}
                  }
                },
                "required": [
                  "description",
                  "service_plans",
                  "user_config_schema"
                ]
              }
            }
          }
        },
        "required": [
          "service_types"
        ]
      },
      "ListServiceVersionsResponse": {
        "type": "object",
        "description": "ListServiceVersionsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_versions": {
            "type": "array",
            "description": "Service versions",
            "items": {
              "type": "object",
              "properties": {
                "aiven_end_of_life_time": {
                  "type": "string",
                  "description": "Aiven end-of-life timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "availability_end_time": {
                  "type": "string",
                  "description": "Availability end timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "availability_start_time": {
                  "type": "string",
                  "description": "Availability start timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "end_of_life_help_article_url": {
                  "type": "string",
                  "description": "Link to the help article"
                },
                "major_version": {
                  "type": "string",
                  "description": "Service version",
                  "maxLength": 32
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "state": {
                  "type": "string",
                  "description": "Service state",
                  "enum": [
                    "available",
                    "eol",
                    "preview",
                    "terminated",
                    "unavailable"
                  ]
                },
                "termination_time": {
                  "type": "string",
                  "description": "Termination timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "upgrade_to_service_type": {
                  "type": "string",
                  "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                  "maxLength": 64
                },
                "upgrade_to_version": {
                  "type": "string",
                  "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                  "maxLength": 32
                },
                "upstream_end_of_life_time": {
                  "type": "string",
                  "description": "Upstream end-of-life timestamp (ISO 8601)",
                  "maxLength": 36
                }
              }
            }
          }
        },
        "required": [
          "service_versions"
        ]
      },
      "PgAvailableExtensionsResponse": {
        "type": "object",
        "description": "PgAvailableExtensionsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "pg": {
            "type": "array",
            "description": "Supported PostgreSQL versions",
            "items": {
              "type": "object",
              "properties": {
                "extensions": {
                  "type": "array",
                  "description": "Extensions available for loading with CREATE EXTENSION in this service",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Extension name"
                      },
                      "versions": {
                        "type": "array",
                        "description": "Extension versions available",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                },
                "version": {
                  "type": "string",
                  "description": "PostgreSQL version"
                }
              },
              "required": [
                "extensions",
                "version"
              ]
            }
          }
        }
      },
      "ProjectGetServiceLogsRequestBody": {
        "type": "object",
        "description": "ProjectGetServiceLogsRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "How many log entries to receive at most",
            "minimum": 1,
            "maximum": 500
          },
          "offset": {
            "type": "string",
            "description": "Opaque offset identifier",
            "maxLength": 128
          },
          "sort_order": {
            "type": "string",
            "description": "Sort order for log messages",
            "enum": [
              "desc",
              "asc"
            ]
          }
        }
      },
      "ProjectGetServiceLogsResponse": {
        "type": "object",
        "description": "ProjectGetServiceLogsResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "first_log_offset": {
            "type": "string",
            "description": "Opaque offset identifier of the first received log message. A null value is returned when there are no logs at all."
          },
          "logs": {
            "type": "array",
            "description": "List of log entries",
            "items": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "description": "Log message"
                },
                "time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "unit": {
                  "type": "string",
                  "description": "SystemD unit name"
                }
              },
              "required": [
                "msg"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "offset": {
            "type": "string",
            "description": "Opaque offset identifier. A null value is returned when there are no logs at all."
          }
        },
        "required": [
          "first_log_offset",
          "logs",
          "offset"
        ]
      },
      "ProjectServiceTagsListResponse": {
        "type": "object",
        "description": "ProjectServiceTagsListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        }
      },
      "ProjectServiceTagsReplaceRequestBody": {
        "type": "object",
        "description": "ProjectServiceTagsReplaceRequestBody",
        "properties": {
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        }
      },
      "ProjectServiceTagsReplaceResponse": {
        "type": "object",
        "description": "ProjectServiceTagsReplaceResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ProjectServiceTagsUpdateRequestBody": {
        "type": "object",
        "description": "ProjectServiceTagsUpdateRequestBody",
        "properties": {
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          }
        }
      },
      "ProjectServiceTagsUpdateResponse": {
        "type": "object",
        "description": "ProjectServiceTagsUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceAlertsListResponse": {
        "type": "object",
        "description": "ServiceAlertsListResponse",
        "properties": {
          "alerts": {
            "type": "array",
            "description": "List of active alerts for the service",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Event creation timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "event": {
                  "type": "string",
                  "description": "Name of the alerting event"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "severity": {
                  "type": "string",
                  "description": "Severity of the event"
                }
              },
              "required": [
                "create_time",
                "event",
                "project_name",
                "severity"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "alerts"
        ]
      },
      "ServiceBackupToAnotherRegionReportRequestBody": {
        "type": "object",
        "description": "ServiceBackupToAnotherRegionReportRequestBody",
        "properties": {
          "period": {
            "type": "string",
            "description": "Metrics time period",
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ]
          }
        }
      },
      "ServiceBackupToAnotherRegionReportResponse": {
        "type": "object",
        "description": "ServiceBackupToAnotherRegionReportResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "metrics": {
            "type": "object",
            "description": "Service metrics in Google chart compatible format",
            "properties": {}
          }
        },
        "required": [
          "metrics"
        ]
      },
      "ServiceBackupsGetResponse": {
        "type": "object",
        "description": "ServiceBackupsGetResponse",
        "properties": {
          "backups": {
            "type": "array",
            "description": "List of backups for the service",
            "items": {
              "type": "object",
              "properties": {
                "additional_regions": {
                  "type": "array",
                  "description": "Additional backup regions, if available",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cloud": {
                        "type": "string",
                        "description": "Target cloud",
                        "maxLength": 256
                      },
                      "pause_reason": {
                        "type": "string",
                        "description": "Reason for pausing the backup synchronization"
                      },
                      "paused": {
                        "type": "boolean",
                        "description": "Indicates additional backup synchronization is paused"
                      },
                      "region": {
                        "type": "string",
                        "description": "Cloud storage region name"
                      }
                    },
                    "required": [
                      "cloud"
                    ]
                  }
                },
                "backup_name": {
                  "type": "string",
                  "description": "Internal name of this backup"
                },
                "backup_time": {
                  "type": "string",
                  "description": "Backup timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "data_size": {
                  "type": "integer",
                  "description": "Backup's original size before compression"
                },
                "storage_location": {
                  "type": "string",
                  "description": "Location where this backup is stored"
                }
              },
              "required": [
                "backup_name",
                "backup_time",
                "data_size"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "backups"
        ]
      },
      "ServiceCancelQueryRequestBody": {
        "type": "object",
        "description": "ServiceCancelQueryRequestBody",
        "properties": {
          "pid": {
            "type": "integer",
            "description": "Database server connection ID",
            "minimum": 0
          },
          "terminate": {
            "type": "boolean",
            "description": "Request immediate termination instead of soft cancel"
          }
        }
      },
      "ServiceCancelQueryResponse": {
        "type": "object",
        "description": "ServiceCancelQueryResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "success": {
            "type": "boolean",
            "description": "Status reported by the database server"
          }
        },
        "required": [
          "success"
        ]
      },
      "ServiceCreateRequestBody": {
        "type": "object",
        "description": "ServiceCreateRequestBody",
        "properties": {
          "cloud": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "copy_tags": {
            "type": "boolean",
            "description": "If this is a forked service, copy tags from the source service. If request contains additional tags, the tags copied from source are updated with them."
          },
          "disk_space_mb": {
            "type": "number",
            "description": "Megabytes of disk space for data storage"
          },
          "group_name": {
            "type": "string",
            "description": "Service group name (DEPRECATED: do not use)",
            "maxLength": 256
          },
          "maintenance": {
            "type": "object",
            "description": "Automatic maintenance settings",
            "properties": {
              "dow": {
                "type": "string",
                "description": "Day of week for installing updates",
                "enum": [
                  "monday",
                  "tuesday",
                  "wednesday",
                  "thursday",
                  "friday",
                  "saturday",
                  "sunday"
                ]
              },
              "time": {
                "type": "string",
                "description": "Time for installing updates, UTC",
                "minLength": 8,
                "maxLength": 8
              }
            }
          },
          "plan": {
            "type": "string",
            "description": "Subscription plan",
            "maxLength": 128
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "service_integrations": {
            "type": "array",
            "description": "Service integrations to enable for the service. Some integration types affect how a service is created and they must be provided as part of the creation call instead of being defined later.",
            "maxItems": 64,
            "items": {
              "type": "object",
              "properties": {
                "dest_endpoint_id": {
                  "type": "string",
                  "description": "Integration destination endpoint ID",
                  "maxLength": 36
                },
                "dest_project": {
                  "type": "string",
                  "description": "Destination project name",
                  "maxLength": 63
                },
                "dest_service": {
                  "type": "string",
                  "description": "Destination service name",
                  "maxLength": 64
                },
                "integration_type": {
                  "type": "string",
                  "description": "Service integration type",
                  "enum": [
                    "alertmanager",
                    "autoscaler",
                    "caching",
                    "cassandra_cross_service_cluster",
                    "clickhouse_kafka",
                    "clickhouse_postgresql",
                    "dashboard",
                    "datadog",
                    "datasource",
                    "external_aws_cloudwatch_logs",
                    "external_aws_cloudwatch_metrics",
                    "external_elasticsearch_logs",
                    "external_google_cloud_logging",
                    "external_opensearch_logs",
                    "flink",
                    "flink_external_kafka",
                    "internal_connectivity",
                    "jolokia",
                    "kafka_connect",
                    "kafka_logs",
                    "kafka_mirrormaker",
                    "logs",
                    "m3aggregator",
                    "m3coordinator",
                    "metrics",
                    "opensearch_cross_cluster_replication",
                    "opensearch_cross_cluster_search",
                    "prometheus",
                    "read_replica",
                    "rsyslog",
                    "schema_registry_proxy",
                    "stresstester",
                    "thanoscompactor",
                    "thanosquery",
                    "thanosstore",
                    "vmalert"
                  ]
                },
                "source_endpoint_id": {
                  "type": "string",
                  "description": "Integration source endpoint ID",
                  "maxLength": 36
                },
                "source_project": {
                  "type": "string",
                  "description": "Source project name",
                  "maxLength": 63
                },
                "source_service": {
                  "type": "string",
                  "description": "Source service name",
                  "maxLength": 64
                },
                "user_config": {
                  "type": "object",
                  "description": "Service type-specific settings",
                  "properties": {}
                }
              },
              "required": [
                "integration_type"
              ]
            }
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "service_type": {
            "type": "string",
            "description": "Service type code",
            "maxLength": 64
          },
          "static_ips": {
            "type": "array",
            "description": "Static IP addresses to associate with the service",
            "maxItems": 128,
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "object",
            "description": "Set of resource tags",
            "properties": {}
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Service is protected against termination and powering off"
          },
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        },
        "required": [
          "plan",
          "service_name",
          "service_type"
        ]
      },
      "ServiceCreateResponse": {
        "type": "object",
        "description": "ServiceCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Kafka ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": [
                        "admin",
                        "read",
                        "readwrite",
                        "write"
                      ]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "topic",
                    "username"
                  ]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": [
                          "cloud"
                        ]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    }
                  },
                  "required": [
                    "backup_name",
                    "backup_time",
                    "data_size"
                  ]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": [
                        "certificate",
                        "sasl"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": [
                        "dynamic",
                        "public",
                        "private",
                        "privatelink"
                      ]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": [
                        "primary",
                        "replica"
                      ]
                    }
                  },
                  "required": [
                    "component",
                    "host",
                    "port",
                    "route",
                    "usage"
                  ]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": [
                        "session",
                        "transaction",
                        "statement"
                      ]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": {
                  "type": "string"
                }
              },
              "disk_space_mb": {
                "type": "number",
                "description": "Megabytes of disk space for data storage"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": {
                  "type": "string"
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "dow",
                  "time",
                  "updates"
                ]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": [
                          "completed",
                          "phase"
                        ]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": [
                        "master",
                        "standby",
                        "read-replica"
                      ]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "state"
                  ]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": [
                        "schema_registry_read",
                        "schema_registry_write"
                      ]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "resource",
                    "username"
                  ]
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": {
                                "type": "string"
                              }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": [
                            "errors",
                            "nodes",
                            "status"
                          ]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": [
                        "state",
                        "status_user_desc"
                      ]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": [
                        "notice",
                        "warning"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": [
                    "level",
                    "message",
                    "metadata",
                    "type"
                  ]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": [
                  "POWEROFF",
                  "REBALANCING",
                  "REBUILDING",
                  "RUNNING"
                ]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": [
                        "ACTIVE",
                        "CONFIGURING",
                        "DELETING"
                      ]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user",
                      "properties": {
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": {
                      "type": "string",
                      "description": "Account type"
                    },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": [
                    "password",
                    "type",
                    "username"
                  ]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": [
          "service"
        ]
      },
      "ServiceDatabaseCreateRequestBody": {
        "type": "object",
        "description": "ServiceDatabaseCreateRequestBody",
        "properties": {
          "database": {
            "type": "string",
            "description": "Service database name",
            "maxLength": 40
          },
          "lc_collate": {
            "type": "string",
            "description": "Default string sort order (LC_COLLATE) for PostgreSQL database",
            "maxLength": 128
          },
          "lc_ctype": {
            "type": "string",
            "description": "Default character classification (LC_CTYPE) for PostgreSQL database",
            "maxLength": 128
          }
        },
        "required": [
          "database"
        ]
      },
      "ServiceDatabaseCreateResponse": {
        "type": "object",
        "description": "ServiceDatabaseCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceDatabaseDeleteResponse": {
        "type": "object",
        "description": "ServiceDatabaseDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceDatabaseListResponse": {
        "type": "object",
        "description": "ServiceDatabaseListResponse",
        "properties": {
          "databases": {
            "type": "array",
            "description": "List of databases",
            "items": {
              "type": "object",
              "properties": {
                "database_name": {
                  "type": "string",
                  "description": "Database name or ID"
                }
              },
              "required": [
                "database_name"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "databases"
        ]
      },
      "ServiceDeleteResponse": {
        "type": "object",
        "description": "ServiceDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceEnableWritesResponse": {
        "type": "object",
        "description": "ServiceEnableWritesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "until": {
            "type": "string",
            "description": "Writes enabled until"
          }
        },
        "required": [
          "message"
        ]
      },
      "ServiceGetResponse": {
        "type": "object",
        "description": "ServiceGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Kafka ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": [
                        "admin",
                        "read",
                        "readwrite",
                        "write"
                      ]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "topic",
                    "username"
                  ]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": [
                          "cloud"
                        ]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    }
                  },
                  "required": [
                    "backup_name",
                    "backup_time",
                    "data_size"
                  ]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": [
                        "certificate",
                        "sasl"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": [
                        "dynamic",
                        "public",
                        "private",
                        "privatelink"
                      ]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": [
                        "primary",
                        "replica"
                      ]
                    }
                  },
                  "required": [
                    "component",
                    "host",
                    "port",
                    "route",
                    "usage"
                  ]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": [
                        "session",
                        "transaction",
                        "statement"
                      ]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": {
                  "type": "string"
                }
              },
              "disk_space_mb": {
                "type": "number",
                "description": "Megabytes of disk space for data storage"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": {
                  "type": "string"
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "dow",
                  "time",
                  "updates"
                ]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": [
                          "completed",
                          "phase"
                        ]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": [
                        "master",
                        "standby",
                        "read-replica"
                      ]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "state"
                  ]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": [
                        "schema_registry_read",
                        "schema_registry_write"
                      ]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "resource",
                    "username"
                  ]
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": {
                                "type": "string"
                              }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": [
                            "errors",
                            "nodes",
                            "status"
                          ]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": [
                        "state",
                        "status_user_desc"
                      ]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": [
                        "notice",
                        "warning"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": [
                    "level",
                    "message",
                    "metadata",
                    "type"
                  ]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": [
                  "POWEROFF",
                  "REBALANCING",
                  "REBUILDING",
                  "RUNNING"
                ]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": [
                        "ACTIVE",
                        "CONFIGURING",
                        "DELETING"
                      ]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user",
                      "properties": {
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": {
                      "type": "string",
                      "description": "Account type"
                    },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": [
                    "password",
                    "type",
                    "username"
                  ]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": [
          "service"
        ]
      },
      "ServiceGetMigrationStatusResponse": {
        "type": "object",
        "description": "ServiceGetMigrationStatusResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "migration": {
            "type": "object",
            "description": "Migration status",
            "properties": {
              "error": {
                "type": "string",
                "description": "Error message in case that migration has failed"
              },
              "master_last_io_seconds_ago": {
                "type": "integer",
                "description": "Redis only: how many seconds since last I/O with redis master"
              },
              "master_link_status": {
                "type": "string",
                "description": "Redis only: replication master link status",
                "enum": [
                  "up",
                  "down"
                ]
              },
              "method": {
                "type": "string",
                "description": "Migration method. Empty in case of multiple methods or error"
              },
              "status": {
                "type": "string",
                "description": "Migration status"
              }
            },
            "required": [
              "method",
              "status"
            ]
          },
          "migration_detail": {
            "type": "array",
            "description": "Migration status per database",
            "items": {
              "type": "object",
              "properties": {
                "dbname": {
                  "type": "string",
                  "description": "Migrated db name (PG) or number (Redis)"
                },
                "error": {
                  "type": "string",
                  "description": "Error message in case that migration has failed"
                },
                "method": {
                  "type": "string",
                  "description": "Migration method"
                },
                "status": {
                  "type": "string",
                  "description": "Migration status",
                  "enum": [
                    "done",
                    "running",
                    "syncing",
                    "failed"
                  ]
                }
              },
              "required": [
                "dbname",
                "method",
                "status"
              ]
            }
          }
        },
        "required": [
          "migration"
        ]
      },
      "ServiceInfluxDBStatsResponse": {
        "type": "object",
        "description": "ServiceInfluxDBStatsResponse",
        "properties": {
          "db_stats": {
            "type": "object",
            "description": "result",
            "properties": {}
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "db_stats"
        ]
      },
      "ServiceKmsGetCAResponse": {
        "type": "object",
        "description": "ServiceKmsGetCAResponse",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM encoded certificate"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "certificate"
        ]
      },
      "ServiceKmsGetKeypairResponse": {
        "type": "object",
        "description": "ServiceKmsGetKeypairResponse",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM encoded certificate"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "key": {
            "type": "string",
            "description": "PEM encoded private key"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "certificate",
          "key"
        ]
      },
      "ServiceListResponse": {
        "type": "object",
        "description": "ServiceListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "services": {
            "type": "array",
            "description": "List of services under the project",
            "items": {
              "type": "object",
              "properties": {
                "acl": {
                  "type": "array",
                  "description": "List of Kafka ACL entries",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID",
                        "maxLength": 40
                      },
                      "permission": {
                        "type": "string",
                        "description": "Kafka permission",
                        "enum": [
                          "admin",
                          "read",
                          "readwrite",
                          "write"
                        ]
                      },
                      "topic": {
                        "type": "string",
                        "description": "Topic name pattern",
                        "minLength": 1,
                        "maxLength": 249
                      },
                      "username": {
                        "type": "string",
                        "description": "Username",
                        "minLength": 1,
                        "maxLength": 64
                      }
                    },
                    "required": [
                      "permission",
                      "topic",
                      "username"
                    ]
                  }
                },
                "backups": {
                  "type": "array",
                  "description": "List of backups for the service",
                  "items": {
                    "type": "object",
                    "properties": {
                      "additional_regions": {
                        "type": "array",
                        "description": "Additional backup regions, if available",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cloud": {
                              "type": "string",
                              "description": "Target cloud",
                              "maxLength": 256
                            },
                            "pause_reason": {
                              "type": "string",
                              "description": "Reason for pausing the backup synchronization"
                            },
                            "paused": {
                              "type": "boolean",
                              "description": "Indicates additional backup synchronization is paused"
                            },
                            "region": {
                              "type": "string",
                              "description": "Cloud storage region name"
                            }
                          },
                          "required": [
                            "cloud"
                          ]
                        }
                      },
                      "backup_name": {
                        "type": "string",
                        "description": "Internal name of this backup"
                      },
                      "backup_time": {
                        "type": "string",
                        "description": "Backup timestamp (ISO 8601)",
                        "maxLength": 36
                      },
                      "data_size": {
                        "type": "integer",
                        "description": "Backup's original size before compression"
                      },
                      "storage_location": {
                        "type": "string",
                        "description": "Location where this backup is stored"
                      }
                    },
                    "required": [
                      "backup_name",
                      "backup_time",
                      "data_size"
                    ]
                  }
                },
                "cloud_description": {
                  "type": "string",
                  "description": "Cloud provider and location"
                },
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "components": {
                  "type": "array",
                  "description": "Service component information objects",
                  "items": {
                    "type": "object",
                    "properties": {
                      "component": {
                        "type": "string",
                        "description": "Service component name"
                      },
                      "host": {
                        "type": "string",
                        "description": "DNS name for connecting to the service component"
                      },
                      "kafka_authentication_method": {
                        "type": "string",
                        "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                        "enum": [
                          "certificate",
                          "sasl"
                        ]
                      },
                      "path": {
                        "type": "string",
                        "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                      },
                      "port": {
                        "type": "integer",
                        "description": "Port number for connecting to the service component",
                        "minimum": 0,
                        "maximum": 65535
                      },
                      "privatelink_connection_id": {
                        "type": "string",
                        "description": "Privatelink connection ID"
                      },
                      "route": {
                        "type": "string",
                        "description": "Network access route",
                        "enum": [
                          "dynamic",
                          "public",
                          "private",
                          "privatelink"
                        ]
                      },
                      "ssl": {
                        "type": "boolean",
                        "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                      },
                      "usage": {
                        "type": "string",
                        "description": "DNS usage name",
                        "enum": [
                          "primary",
                          "replica"
                        ]
                      }
                    },
                    "required": [
                      "component",
                      "host",
                      "port",
                      "route",
                      "usage"
                    ]
                  }
                },
                "connection_info": {
                  "type": "object",
                  "description": "Service-specific connection information properties",
                  "properties": {}
                },
                "connection_pools": {
                  "type": "array",
                  "description": "PostgreSQL PGBouncer connection pools",
                  "items": {
                    "type": "object",
                    "properties": {
                      "connection_uri": {
                        "type": "string",
                        "description": "Connection URI for the DB pool"
                      },
                      "database": {
                        "type": "string",
                        "description": "Database name",
                        "maxLength": 63
                      },
                      "pool_mode": {
                        "type": "string",
                        "description": "PGBouncer pool mode",
                        "enum": [
                          "session",
                          "transaction",
                          "statement"
                        ]
                      },
                      "pool_name": {
                        "type": "string",
                        "description": "Connection pool name",
                        "maxLength": 63
                      },
                      "pool_size": {
                        "type": "integer",
                        "description": "Size of PGBouncer's PostgreSQL side connection pool",
                        "minimum": 1,
                        "maximum": 10000
                      },
                      "username": {
                        "type": "string",
                        "description": "Pool username",
                        "maxLength": 64
                      }
                    },
                    "required": [
                      "connection_uri",
                      "database",
                      "pool_mode",
                      "pool_name",
                      "pool_size"
                    ]
                  }
                },
                "create_time": {
                  "type": "string",
                  "description": "Service creation timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "databases": {
                  "type": "array",
                  "description": "List of service's user database names",
                  "items": {
                    "type": "string"
                  }
                },
                "disk_space_mb": {
                  "type": "number",
                  "description": "Megabytes of disk space for data storage"
                },
                "features": {
                  "type": "object",
                  "description": "Feature flags",
                  "properties": {}
                },
                "group_list": {
                  "type": "array",
                  "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                  "items": {
                    "type": "string"
                  }
                },
                "maintenance": {
                  "type": "object",
                  "description": "Automatic maintenance settings",
                  "properties": {
                    "dow": {
                      "type": "string",
                      "description": "Day of week for installing updates",
                      "enum": [
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday",
                        "sunday",
                        "never"
                      ]
                    },
                    "time": {
                      "type": "string",
                      "description": "Time for installing updates, UTC",
                      "minLength": 8,
                      "maxLength": 8
                    },
                    "updates": {
                      "type": "array",
                      "description": "List of updates waiting to be installed",
                      "items": {
                        "type": "object",
                        "properties": {
                          "deadline": {
                            "type": "string",
                            "description": "Deadline for installing the update"
                          },
                          "description": {
                            "type": "string",
                            "description": "Description of the update"
                          },
                          "start_after": {
                            "type": "string",
                            "description": "The earliest time the update will be automatically applied"
                          },
                          "start_at": {
                            "type": "string",
                            "description": "The time when the update will be automatically applied"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "dow",
                    "time",
                    "updates"
                  ]
                },
                "metadata": {
                  "type": "object",
                  "description": "Service type specific metadata",
                  "properties": {}
                },
                "node_count": {
                  "type": "integer",
                  "description": "Number of service nodes in the active plan"
                },
                "node_cpu_count": {
                  "type": "integer",
                  "description": "Number of CPUs for each node"
                },
                "node_memory_mb": {
                  "type": "number",
                  "description": "Megabytes of memory for each node"
                },
                "node_states": {
                  "type": "array",
                  "description": "State of individual service nodes",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the service node"
                      },
                      "progress_updates": {
                        "type": "array",
                        "description": "Extra information regarding the progress for current state",
                        "items": {
                          "type": "object",
                          "properties": {
                            "completed": {
                              "type": "boolean",
                              "description": "Indicates whether this phase has been completed or not"
                            },
                            "current": {
                              "type": "integer",
                              "description": "Current progress for this phase. May be missing or null."
                            },
                            "max": {
                              "type": "integer",
                              "description": "Maximum progress value for this phase. May be missing or null. May change."
                            },
                            "min": {
                              "type": "integer",
                              "description": "Minimum progress value for this phase. May be missing or null."
                            },
                            "phase": {
                              "type": "string",
                              "description": "Key identifying this phase",
                              "enum": [
                                "prepare",
                                "basebackup",
                                "stream",
                                "finalize"
                              ]
                            },
                            "unit": {
                              "type": "string",
                              "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                              "enum": [
                                "binlogs",
                                "bytes_compressed",
                                "bytes_uncompressed",
                                "wal_lsn"
                              ]
                            }
                          },
                          "required": [
                            "completed",
                            "phase"
                          ]
                        }
                      },
                      "role": {
                        "type": "string",
                        "description": "Role of this node. Only returned for a subset of service types",
                        "enum": [
                          "master",
                          "standby",
                          "read-replica"
                        ]
                      },
                      "shard": {
                        "type": "object",
                        "description": "Shard of this node. Only returned for a subset of service types",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the shard."
                          },
                          "position": {
                            "type": "integer",
                            "description": "Position of this shard within the service"
                          }
                        }
                      },
                      "state": {
                        "type": "string",
                        "description": "Current state of the service node",
                        "enum": [
                          "leaving",
                          "running",
                          "setting_up_vm",
                          "syncing_data",
                          "timing_out",
                          "unknown"
                        ]
                      }
                    },
                    "required": [
                      "name",
                      "state"
                    ]
                  }
                },
                "plan": {
                  "type": "string",
                  "description": "Subscription plan",
                  "maxLength": 128
                },
                "project_vpc_id": {
                  "type": "string",
                  "description": "Project VPC ID",
                  "minLength": 36,
                  "maxLength": 36
                },
                "schema_registry_acl": {
                  "type": "array",
                  "description": "List of Schema Registry ACL entries",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID",
                        "maxLength": 40
                      },
                      "permission": {
                        "type": "string",
                        "description": "ACL entry for Schema Registry",
                        "enum": [
                          "schema_registry_read",
                          "schema_registry_write"
                        ]
                      },
                      "resource": {
                        "type": "string",
                        "description": "Schema Registry ACL entry resource name pattern",
                        "minLength": 1,
                        "maxLength": 249
                      },
                      "username": {
                        "type": "string",
                        "description": "Username",
                        "minLength": 1,
                        "maxLength": 64
                      }
                    },
                    "required": [
                      "permission",
                      "resource",
                      "username"
                    ]
                  }
                },
                "service_integrations": {
                  "type": "array",
                  "description": "Integrations with other services",
                  "items": {
                    "type": "object",
                    "properties": {
                      "active": {
                        "type": "boolean",
                        "description": "True when integration is active"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the integration"
                      },
                      "dest_endpoint": {
                        "type": "string",
                        "description": "Destination endpoint name"
                      },
                      "dest_endpoint_id": {
                        "type": "string",
                        "description": "Destination endpoint id"
                      },
                      "dest_project": {
                        "type": "string",
                        "description": "Project name",
                        "maxLength": 63
                      },
                      "dest_service": {
                        "type": "string",
                        "description": "Destination service name"
                      },
                      "dest_service_type": {
                        "type": "string",
                        "description": "Service type code",
                        "maxLength": 64
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "True when integration is enabled"
                      },
                      "integration_status": {
                        "type": "object",
                        "description": "Integration status",
                        "properties": {
                          "state": {
                            "type": "object",
                            "description": "Service integration state",
                            "properties": {
                              "errors": {
                                "type": "array",
                                "description": "Errors",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "likely_error_cause": {
                                "type": "string",
                                "description": "Most likely cause of the errors",
                                "enum": [
                                  "null",
                                  "destination",
                                  "integration",
                                  "source",
                                  "unknown"
                                ]
                              },
                              "nodes": {
                                "type": "object",
                                "description": "Nodes",
                                "properties": {}
                              },
                              "status": {
                                "type": "string",
                                "description": "Service integration status",
                                "enum": [
                                  "failed",
                                  "inactive",
                                  "running",
                                  "starting",
                                  "unknown"
                                ]
                              }
                            },
                            "required": [
                              "errors",
                              "nodes",
                              "status"
                            ]
                          },
                          "status_user_desc": {
                            "type": "string",
                            "description": "Integration status description"
                          }
                        },
                        "required": [
                          "state",
                          "status_user_desc"
                        ]
                      },
                      "integration_type": {
                        "type": "string",
                        "description": "Type of the integration"
                      },
                      "service_integration_id": {
                        "type": "string",
                        "description": "Integration ID"
                      },
                      "source_endpoint": {
                        "type": "string",
                        "description": "Source endpoint name"
                      },
                      "source_endpoint_id": {
                        "type": "string",
                        "description": "Source endpoint ID"
                      },
                      "source_project": {
                        "type": "string",
                        "description": "Project name",
                        "maxLength": 63
                      },
                      "source_service": {
                        "type": "string",
                        "description": "Source service name"
                      },
                      "source_service_type": {
                        "type": "string",
                        "description": "Service type code",
                        "maxLength": 64
                      },
                      "user_config": {
                        "type": "object",
                        "description": "Service integration settings",
                        "properties": {}
                      }
                    },
                    "required": [
                      "active",
                      "description",
                      "dest_project",
                      "dest_service_type",
                      "enabled",
                      "integration_type",
                      "service_integration_id",
                      "source_project",
                      "source_service",
                      "source_service_type"
                    ]
                  }
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "service_notifications": {
                  "type": "array",
                  "description": "Service notifications",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "type": "string",
                        "description": "Notification level",
                        "enum": [
                          "notice",
                          "warning"
                        ]
                      },
                      "message": {
                        "type": "string",
                        "description": "Human notification message",
                        "maxLength": 1024
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Notification metadata",
                        "properties": {
                          "end_of_life_help_article_url": {
                            "type": "string",
                            "description": "Link to the help article"
                          },
                          "end_of_life_policy_url": {
                            "type": "string",
                            "description": "Link to the help article"
                          },
                          "service_end_of_life_time": {
                            "type": "string",
                            "description": "Timestamp in ISO 8601 format, always in UTC",
                            "maxLength": 36
                          },
                          "upgrade_to_service_type": {
                            "type": "string",
                            "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                            "maxLength": 64
                          },
                          "upgrade_to_version": {
                            "type": "string",
                            "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                            "maxLength": 32
                          }
                        }
                      },
                      "type": {
                        "type": "string",
                        "description": "Notification type",
                        "enum": [
                          "service_end_of_life",
                          "service_powered_off_removal"
                        ]
                      }
                    },
                    "required": [
                      "level",
                      "message",
                      "metadata",
                      "type"
                    ]
                  }
                },
                "service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "service_type_description": {
                  "type": "string",
                  "description": "Single line description of the service"
                },
                "service_uri": {
                  "type": "string",
                  "description": "URI for connecting to the service (may be null)"
                },
                "service_uri_params": {
                  "type": "object",
                  "description": "service_uri parameterized into key-value pairs",
                  "properties": {}
                },
                "state": {
                  "type": "string",
                  "description": "State of the service",
                  "enum": [
                    "POWEROFF",
                    "REBALANCING",
                    "REBUILDING",
                    "RUNNING"
                  ]
                },
                "tags": {
                  "type": "object",
                  "description": "Set of resource tags",
                  "properties": {}
                },
                "termination_protection": {
                  "type": "boolean",
                  "description": "Service is protected against termination and powering off"
                },
                "topics": {
                  "type": "array",
                  "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cleanup_policy": {
                        "type": "string",
                        "description": "cleanup.policy",
                        "maxLength": 64
                      },
                      "min_insync_replicas": {
                        "type": "integer",
                        "description": "min.insync.replicas",
                        "minimum": 1
                      },
                      "partitions": {
                        "type": "integer",
                        "description": "Number of partitions",
                        "minimum": 1,
                        "maximum": 1000000
                      },
                      "replication": {
                        "type": "integer",
                        "description": "Number of replicas",
                        "minimum": 1
                      },
                      "retention_bytes": {
                        "type": "integer",
                        "description": "retention.bytes"
                      },
                      "retention_hours": {
                        "type": "integer",
                        "description": "Retention period (hours)",
                        "maximum": 2562047788015
                      },
                      "state": {
                        "type": "string",
                        "description": "Topic state",
                        "enum": [
                          "ACTIVE",
                          "CONFIGURING",
                          "DELETING"
                        ]
                      },
                      "topic_name": {
                        "type": "string",
                        "description": "Topic name",
                        "minLength": 1,
                        "maxLength": 249
                      }
                    },
                    "required": [
                      "cleanup_policy",
                      "min_insync_replicas",
                      "partitions",
                      "replication",
                      "retention_bytes",
                      "retention_hours",
                      "topic_name"
                    ]
                  }
                },
                "update_time": {
                  "type": "string",
                  "description": "Service last update timestamp (ISO 8601)",
                  "maxLength": 36
                },
                "user_config": {
                  "type": "object",
                  "description": "Service type-specific settings",
                  "properties": {}
                },
                "users": {
                  "type": "array",
                  "description": "List of service users",
                  "items": {
                    "type": "object",
                    "properties": {
                      "access_cert": {
                        "type": "string",
                        "description": "Access certificate for TLS client authentication"
                      },
                      "access_cert_not_valid_after_time": {
                        "type": "string",
                        "description": "Validity end time (ISO8601) for the current access certificate"
                      },
                      "access_control": {
                        "type": "object",
                        "description": "Service specific access controls for user",
                        "properties": {
                          "m3_group": {
                            "type": "string",
                            "description": "M3 access group to associate users with",
                            "maxLength": 16
                          },
                          "pg_allow_replication": {
                            "type": "boolean",
                            "description": "Enable REPLICATION role option"
                          },
                          "redis_acl_categories": {
                            "type": "array",
                            "description": "Command category rules",
                            "maxItems": 256,
                            "items": {
                              "type": "string"
                            }
                          },
                          "redis_acl_channels": {
                            "type": "array",
                            "description": "Permitted pub/sub channel patterns",
                            "maxItems": 256,
                            "items": {
                              "type": "string"
                            }
                          },
                          "redis_acl_commands": {
                            "type": "array",
                            "description": "Rules for individual commands",
                            "maxItems": 256,
                            "items": {
                              "type": "string"
                            }
                          },
                          "redis_acl_keys": {
                            "type": "array",
                            "description": "Key access rules",
                            "maxItems": 256,
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "access_key": {
                        "type": "string",
                        "description": "Access key for TLS client authentication"
                      },
                      "authentication": {
                        "type": "string",
                        "description": "Authentication details",
                        "enum": [
                          "null",
                          "caching_sha2_password",
                          "mysql_native_password"
                        ]
                      },
                      "expiring_cert_not_valid_after_time": {
                        "type": "string",
                        "description": "Validity end time (ISO8601) for the expiring access certificate"
                      },
                      "password": {
                        "type": "string",
                        "description": "Account password. A null value indicates a user overridden password."
                      },
                      "type": {
                        "type": "string",
                        "description": "Account type"
                      },
                      "username": {
                        "type": "string",
                        "description": "Account username"
                      }
                    },
                    "required": [
                      "password",
                      "type",
                      "username"
                    ]
                  }
                }
              },
              "required": [
                "cloud_name",
                "create_time",
                "group_list",
                "plan",
                "project_vpc_id",
                "service_integrations",
                "service_name",
                "service_type",
                "service_uri",
                "state",
                "termination_protection",
                "update_time",
                "user_config"
              ]
            }
          }
        },
        "required": [
          "services"
        ]
      },
      "ServiceMaintenanceStartResponse": {
        "type": "object",
        "description": "ServiceMaintenanceStartResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceMetricsFetchRequestBody": {
        "type": "object",
        "description": "ServiceMetricsFetchRequestBody",
        "properties": {
          "period": {
            "type": "string",
            "description": "Metrics time period",
            "enum": [
              "hour",
              "day",
              "week",
              "month",
              "year"
            ]
          }
        }
      },
      "ServiceMetricsFetchResponse": {
        "type": "object",
        "description": "ServiceMetricsFetchResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "metrics": {
            "type": "object",
            "description": "Service metrics in Google chart compatible format",
            "properties": {}
          }
        },
        "required": [
          "metrics"
        ]
      },
      "ServicePrivatelinkAWSConnectionListResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSConnectionListResponse",
        "properties": {
          "connections": {
            "type": "array",
            "description": "AWS Privatelink VPC Endpoint connection list",
            "items": {
              "type": "object",
              "properties": {
                "dns_name": {
                  "type": "string",
                  "description": "AWS VPC Endpoint DNS name"
                },
                "privatelink_connection_id": {
                  "type": "string",
                  "description": "Privatelink connection ID"
                },
                "state": {
                  "type": "string",
                  "description": "Privatelink connection state",
                  "enum": [
                    "pending-user-approval",
                    "user-approved",
                    "connected",
                    "active"
                  ]
                },
                "vpc_endpoint_id": {
                  "type": "string",
                  "description": "AWS VPC Endpoint ID"
                }
              },
              "required": [
                "dns_name",
                "state",
                "vpc_endpoint_id"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "connections"
        ]
      },
      "ServicePrivatelinkAWSCreateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAWSCreateRequestBody",
        "properties": {
          "principals": {
            "type": "array",
            "description": "ARN allowlist",
            "minItems": 1,
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "principals"
        ]
      },
      "ServicePrivatelinkAWSCreateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSCreateResponse",
        "properties": {
          "aws_service_id": {
            "type": "string",
            "description": "AWS VPC endpoint service ID"
          },
          "aws_service_name": {
            "type": "string",
            "description": "AWS VPC endpoint service name"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "principals": {
            "type": "array",
            "description": "ARN allowlist",
            "minItems": 1,
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": [
              "creating",
              "active",
              "deleting"
            ]
          }
        },
        "required": [
          "principals",
          "state"
        ]
      },
      "ServicePrivatelinkAWSDeleteResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSDeleteResponse",
        "properties": {
          "aws_service_id": {
            "type": "string",
            "description": "AWS VPC endpoint service ID"
          },
          "aws_service_name": {
            "type": "string",
            "description": "AWS VPC endpoint service name"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "principals": {
            "type": "array",
            "description": "ARN allowlist",
            "minItems": 1,
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": [
              "creating",
              "active",
              "deleting"
            ]
          }
        },
        "required": [
          "principals",
          "state"
        ]
      },
      "ServicePrivatelinkAWSGetResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSGetResponse",
        "properties": {
          "aws_service_id": {
            "type": "string",
            "description": "AWS VPC endpoint service ID"
          },
          "aws_service_name": {
            "type": "string",
            "description": "AWS VPC endpoint service name"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "principals": {
            "type": "array",
            "description": "ARN allowlist",
            "minItems": 1,
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": [
              "creating",
              "active",
              "deleting"
            ]
          }
        },
        "required": [
          "principals",
          "state"
        ]
      },
      "ServicePrivatelinkAWSUpdateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAWSUpdateRequestBody",
        "properties": {
          "principals": {
            "type": "array",
            "description": "ARN allowlist",
            "minItems": 1,
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "principals"
        ]
      },
      "ServicePrivatelinkAWSUpdateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAWSUpdateResponse",
        "properties": {
          "aws_service_id": {
            "type": "string",
            "description": "AWS VPC endpoint service ID"
          },
          "aws_service_name": {
            "type": "string",
            "description": "AWS VPC endpoint service name"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "principals": {
            "type": "array",
            "description": "ARN allowlist",
            "minItems": 1,
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": [
              "creating",
              "active",
              "deleting"
            ]
          }
        },
        "required": [
          "principals",
          "state"
        ]
      },
      "ServicePrivatelinkAzureConnectionApprovalResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureConnectionApprovalResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "private_endpoint_id": {
            "type": "string",
            "description": "Azure private endpoint ID"
          },
          "privatelink_connection_id": {
            "type": "string",
            "description": "Privatelink connection ID"
          },
          "state": {
            "type": "string",
            "description": "Privatelink connection state",
            "enum": [
              "pending-user-approval",
              "user-approved",
              "connected",
              "active"
            ]
          },
          "user_ip_address": {
            "type": "string",
            "description": "(Private) IP address of Privatelink endpoint",
            "maxLength": 15
          }
        },
        "required": [
          "private_endpoint_id",
          "state",
          "user_ip_address"
        ]
      },
      "ServicePrivatelinkAzureConnectionListResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureConnectionListResponse",
        "properties": {
          "connections": {
            "type": "array",
            "description": "Private endpoint connection list",
            "items": {
              "type": "object",
              "properties": {
                "private_endpoint_id": {
                  "type": "string",
                  "description": "Azure private endpoint ID"
                },
                "privatelink_connection_id": {
                  "type": "string",
                  "description": "Privatelink connection ID"
                },
                "state": {
                  "type": "string",
                  "description": "Privatelink connection state",
                  "enum": [
                    "pending-user-approval",
                    "user-approved",
                    "connected",
                    "active"
                  ]
                },
                "user_ip_address": {
                  "type": "string",
                  "description": "(Private) IP address of Privatelink endpoint",
                  "maxLength": 15
                }
              },
              "required": [
                "private_endpoint_id",
                "state",
                "user_ip_address"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "connections"
        ]
      },
      "ServicePrivatelinkAzureConnectionUpdateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAzureConnectionUpdateRequestBody",
        "properties": {
          "user_ip_address": {
            "type": "string",
            "description": "(Private) IP address of Privatelink endpoint",
            "maxLength": 15
          }
        },
        "required": [
          "user_ip_address"
        ]
      },
      "ServicePrivatelinkAzureConnectionUpdateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureConnectionUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "private_endpoint_id": {
            "type": "string",
            "description": "Azure private endpoint ID"
          },
          "privatelink_connection_id": {
            "type": "string",
            "description": "Privatelink connection ID"
          },
          "state": {
            "type": "string",
            "description": "Privatelink connection state",
            "enum": [
              "pending-user-approval",
              "user-approved",
              "connected",
              "active"
            ]
          },
          "user_ip_address": {
            "type": "string",
            "description": "(Private) IP address of Privatelink endpoint",
            "maxLength": 15
          }
        },
        "required": [
          "private_endpoint_id",
          "state",
          "user_ip_address"
        ]
      },
      "ServicePrivatelinkAzureCreateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAzureCreateRequestBody",
        "properties": {
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "user_subscription_ids"
        ]
      },
      "ServicePrivatelinkAzureCreateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureCreateResponse",
        "properties": {
          "azure_service_alias": {
            "type": "string",
            "description": "Azure Privatelink service alias"
          },
          "azure_service_id": {
            "type": "string",
            "description": "Azure Privatelink service ID"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": [
              "creating",
              "active",
              "deleting"
            ]
          },
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "state",
          "user_subscription_ids"
        ]
      },
      "ServicePrivatelinkAzureDeleteResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureDeleteResponse",
        "properties": {
          "azure_service_alias": {
            "type": "string",
            "description": "Azure Privatelink service alias"
          },
          "azure_service_id": {
            "type": "string",
            "description": "Azure Privatelink service ID"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": [
              "creating",
              "active",
              "deleting"
            ]
          },
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "state",
          "user_subscription_ids"
        ]
      },
      "ServicePrivatelinkAzureGetResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureGetResponse",
        "properties": {
          "azure_service_alias": {
            "type": "string",
            "description": "Azure Privatelink service alias"
          },
          "azure_service_id": {
            "type": "string",
            "description": "Azure Privatelink service ID"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": [
              "creating",
              "active",
              "deleting"
            ]
          },
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "state",
          "user_subscription_ids"
        ]
      },
      "ServicePrivatelinkAzureUpdateRequestBody": {
        "type": "object",
        "description": "ServicePrivatelinkAzureUpdateRequestBody",
        "properties": {
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "user_subscription_ids"
        ]
      },
      "ServicePrivatelinkAzureUpdateResponse": {
        "type": "object",
        "description": "ServicePrivatelinkAzureUpdateResponse",
        "properties": {
          "azure_service_alias": {
            "type": "string",
            "description": "Azure Privatelink service alias"
          },
          "azure_service_id": {
            "type": "string",
            "description": "Azure Privatelink service ID"
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "Privatelink resource state",
            "enum": [
              "creating",
              "active",
              "deleting"
            ]
          },
          "user_subscription_ids": {
            "type": "array",
            "description": "Subscription ID allowlist",
            "maxItems": 16,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "state",
          "user_subscription_ids"
        ]
      },
      "ServiceQueryActivityRequestBody": {
        "type": "object",
        "description": "ServiceQueryActivityRequestBody",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit for number of results",
            "minimum": 1,
            "maximum": 5000
          },
          "offset": {
            "type": "integer",
            "description": "Offset for retrieved results based on sort order",
            "minimum": 0
          },
          "order_by": {
            "type": "string",
            "description": "Order in which to sort retrieved results",
            "maxLength": 256
          }
        }
      },
      "ServiceQueryActivityResponse": {
        "type": "object",
        "description": "ServiceQueryActivityResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of currently running queries and open connections",
            "items": {
              "type": "object",
              "properties": {
                "active_channel_subscriptions": {
                  "type": "integer",
                  "description": "Currently active channel subscriptions"
                },
                "active_database": {
                  "type": "string",
                  "description": "Selected database"
                },
                "active_pattern_matching_channel_subscriptions": {
                  "type": "integer",
                  "description": "Currently active channel subscriptions using pattern matching"
                },
                "application_name": {
                  "type": "string",
                  "description": "Application name when set"
                },
                "backend_start": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "backend_type": {
                  "type": "string",
                  "description": "Backend type"
                },
                "backend_xid": {
                  "type": "integer",
                  "description": "XID for current backend"
                },
                "backend_xmin": {
                  "type": "integer",
                  "description": "xmin for current backend"
                },
                "client_addr": {
                  "type": "string",
                  "description": "IP address:port pair. Not always available due to load balancers"
                },
                "client_hostname": {
                  "type": "string",
                  "description": "Client hostname"
                },
                "client_port": {
                  "type": "integer",
                  "description": "Client port, -1 is unknown",
                  "maximum": 65536
                },
                "connection_age_seconds": {
                  "type": "number",
                  "description": "Connection age in seconds"
                },
                "connection_idle_seconds": {
                  "type": "number",
                  "description": "Connection idle time in seconds"
                },
                "datid": {
                  "type": "integer",
                  "description": "Database ID"
                },
                "datname": {
                  "type": "string",
                  "description": "Database name"
                },
                "flags": {
                  "type": "array",
                  "description": "Connection state flags",
                  "items": {
                    "type": "string"
                  }
                },
                "flags_raw": {
                  "type": "string",
                  "description": "Raw connection flags string"
                },
                "id": {
                  "type": "string",
                  "description": "Unique connection ID"
                },
                "leader_pid": {
                  "type": "integer",
                  "description": "Leader process ID",
                  "minimum": 0
                },
                "multi_exec_commands": {
                  "type": "integer",
                  "description": "Number of MULTI/EXEC comands"
                },
                "name": {
                  "type": "string",
                  "description": "Connection name, if specified"
                },
                "output_buffer": {
                  "type": "integer",
                  "description": "Output buffer length (disabled if 0)"
                },
                "output_buffer_memory": {
                  "type": "integer",
                  "description": "Output buffer memory"
                },
                "output_list_length": {
                  "type": "integer",
                  "description": "Output list, overflow for output buffering"
                },
                "pid": {
                  "type": "integer",
                  "description": "Connection process ID",
                  "minimum": 0
                },
                "query": {
                  "type": "string",
                  "description": "Last/current query running on this connection"
                },
                "query_buffer": {
                  "type": "integer",
                  "description": "Query buffer length (disabled if 0)"
                },
                "query_buffer_free": {
                  "type": "integer",
                  "description": "Free bytes in query buffer, if enabled"
                },
                "query_duration": {
                  "type": "number",
                  "description": "Duration of the last/current query in seconds"
                },
                "query_id": {
                  "type": "integer",
                  "description": "Hash code to identify identical normalized queries."
                },
                "query_start": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "state": {
                  "type": "string",
                  "description": "Connection state"
                },
                "state_change": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "usename": {
                  "type": "string",
                  "description": "Username"
                },
                "usesysid": {
                  "type": "integer",
                  "description": "User ID"
                },
                "wait_event": {
                  "type": "string",
                  "description": "Connection wait event"
                },
                "wait_event_type": {
                  "type": "string",
                  "description": "Connection wait event type"
                },
                "waiting": {
                  "type": "boolean",
                  "description": "Query is waiting"
                },
                "xact_start": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                }
              }
            }
          }
        },
        "required": [
          "queries"
        ]
      },
      "ServiceQueryStatisticsResetResponse": {
        "type": "object",
        "description": "ServiceQueryStatisticsResetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "queries": {
            "type": "array",
            "description": "List of query statistics",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "required": [
          "queries"
        ]
      },
      "ServiceTaskCreateRequestBody": {
        "type": "object",
        "description": "ServiceTaskCreateRequestBody",
        "properties": {
          "dataset_import": {
            "type": "object",
            "description": "Payload to be used with dataset_import",
            "properties": {
              "dataset_name": {
                "type": "string",
                "description": "Name of the dataset to import to PostgreSQL database. Used with dataset_import.",
                "enum": [
                  "pagila"
                ]
              }
            },
            "required": [
              "dataset_name"
            ]
          },
          "migration_check": {
            "type": "object",
            "description": "Payload to be used with migration_check",
            "properties": {
              "ignore_dbs": {
                "type": "string",
                "description": "Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment)",
                "maxLength": 2048
              },
              "method": {
                "type": "string",
                "description": "The migration method to be used (currently supported only by Redis, MySQL and PostgreSQL service types)",
                "enum": [
                  "dump",
                  "replication"
                ]
              },
              "source_service_uri": {
                "type": "string",
                "description": "Service URI of the source MySQL or PostgreSQL database with admin credentials. Used with migration_check.",
                "maxLength": 512
              }
            },
            "required": [
              "source_service_uri"
            ]
          },
          "target_version": {
            "type": "string",
            "description": "Target version used with upgrade_check",
            "enum": [
              "11",
              "12",
              "13",
              "14",
              "15"
            ]
          },
          "task_type": {
            "type": "string",
            "description": "Task type",
            "enum": [
              "upgrade_check",
              "migration_check",
              "dataset_import"
            ]
          }
        },
        "required": [
          "task_type"
        ]
      },
      "ServiceTaskCreateResponse": {
        "type": "object",
        "description": "ServiceTaskCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "task": {
            "type": "object",
            "description": "Task info",
            "properties": {
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "result": {
                "type": "string",
                "description": "Task result"
              },
              "result_codes": {
                "type": "array",
                "description": "List of result codes",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Machine-readable key code, which represents the result of the task"
                    },
                    "dbname": {
                      "type": "string",
                      "description": "Database which related to the result code"
                    }
                  },
                  "required": [
                    "code"
                  ]
                }
              },
              "success": {
                "type": "boolean",
                "description": "Task success"
              },
              "task_type": {
                "type": "string",
                "description": "Task type"
              }
            },
            "required": [
              "create_time",
              "result",
              "success",
              "task_type"
            ]
          }
        },
        "required": [
          "task"
        ]
      },
      "ServiceTaskGetResponse": {
        "type": "object",
        "description": "ServiceTaskGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "task": {
            "type": "object",
            "description": "Task info",
            "properties": {
              "create_time": {
                "type": "string",
                "description": "Timestamp in ISO 8601 format, always in UTC",
                "maxLength": 36
              },
              "result": {
                "type": "string",
                "description": "Task result"
              },
              "result_codes": {
                "type": "array",
                "description": "List of result codes",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Machine-readable key code, which represents the result of the task"
                    },
                    "dbname": {
                      "type": "string",
                      "description": "Database which related to the result code"
                    }
                  },
                  "required": [
                    "code"
                  ]
                }
              },
              "success": {
                "type": "boolean",
                "description": "Task success"
              },
              "task_type": {
                "type": "string",
                "description": "Task type"
              }
            },
            "required": [
              "create_time",
              "result",
              "success",
              "task_type"
            ]
          }
        },
        "required": [
          "task"
        ]
      },
      "ServiceUpdateRequestBody": {
        "type": "object",
        "description": "ServiceUpdateRequestBody",
        "properties": {
          "cloud": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "disk_space_mb": {
            "type": "number",
            "description": "Megabytes of disk space for data storage"
          },
          "group_name": {
            "type": "string",
            "description": "Service group name (DEPRECATED: do not use)",
            "maxLength": 256
          },
          "karapace": {
            "type": "boolean",
            "description": "Switch the service to use Karapace for schema registry and REST proxy"
          },
          "maintenance": {
            "type": "object",
            "description": "Automatic maintenance settings",
            "properties": {
              "dow": {
                "type": "string",
                "description": "Day of week for installing updates",
                "enum": [
                  "monday",
                  "tuesday",
                  "wednesday",
                  "thursday",
                  "friday",
                  "saturday",
                  "sunday"
                ]
              },
              "time": {
                "type": "string",
                "description": "Time for installing updates, UTC",
                "minLength": 8,
                "maxLength": 8
              }
            }
          },
          "plan": {
            "type": "string",
            "description": "Subscription plan",
            "maxLength": 128
          },
          "powered": {
            "type": "boolean",
            "description": "Power-on the service (true) or power-off (false)"
          },
          "project_vpc_id": {
            "type": "string",
            "description": "Project VPC ID",
            "minLength": 36,
            "maxLength": 36
          },
          "schema_registry_authz": {
            "type": "boolean",
            "description": "Enable or disable Schema Registry authorization"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Service is protected against termination and powering off"
          },
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        }
      },
      "ServiceUpdateResponse": {
        "type": "object",
        "description": "ServiceUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Kafka ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": [
                        "admin",
                        "read",
                        "readwrite",
                        "write"
                      ]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "topic",
                    "username"
                  ]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": [
                          "cloud"
                        ]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    }
                  },
                  "required": [
                    "backup_name",
                    "backup_time",
                    "data_size"
                  ]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": [
                        "certificate",
                        "sasl"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": [
                        "dynamic",
                        "public",
                        "private",
                        "privatelink"
                      ]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": [
                        "primary",
                        "replica"
                      ]
                    }
                  },
                  "required": [
                    "component",
                    "host",
                    "port",
                    "route",
                    "usage"
                  ]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": [
                        "session",
                        "transaction",
                        "statement"
                      ]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": {
                  "type": "string"
                }
              },
              "disk_space_mb": {
                "type": "number",
                "description": "Megabytes of disk space for data storage"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": {
                  "type": "string"
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "dow",
                  "time",
                  "updates"
                ]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": [
                          "completed",
                          "phase"
                        ]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": [
                        "master",
                        "standby",
                        "read-replica"
                      ]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "state"
                  ]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": [
                        "schema_registry_read",
                        "schema_registry_write"
                      ]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "resource",
                    "username"
                  ]
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": {
                                "type": "string"
                              }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": [
                            "errors",
                            "nodes",
                            "status"
                          ]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": [
                        "state",
                        "status_user_desc"
                      ]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": [
                        "notice",
                        "warning"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": [
                    "level",
                    "message",
                    "metadata",
                    "type"
                  ]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": [
                  "POWEROFF",
                  "REBALANCING",
                  "REBUILDING",
                  "RUNNING"
                ]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": [
                        "ACTIVE",
                        "CONFIGURING",
                        "DELETING"
                      ]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user",
                      "properties": {
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": {
                      "type": "string",
                      "description": "Account type"
                    },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": [
                    "password",
                    "type",
                    "username"
                  ]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": [
          "service"
        ]
      },
      "ServiceUserCreateRequestBody": {
        "type": "object",
        "description": "ServiceUserCreateRequestBody",
        "properties": {
          "access_control": {
            "type": "object",
            "description": "Service specific access controls for user",
            "properties": {
              "m3_group": {
                "type": "string",
                "description": "M3 access group to associate users with",
                "maxLength": 16
              },
              "pg_allow_replication": {
                "type": "boolean",
                "description": "Enable REPLICATION role option"
              },
              "redis_acl_categories": {
                "type": "array",
                "description": "Command category rules",
                "maxItems": 256,
                "items": {
                  "type": "string"
                }
              },
              "redis_acl_channels": {
                "type": "array",
                "description": "Permitted pub/sub channel patterns",
                "maxItems": 256,
                "items": {
                  "type": "string"
                }
              },
              "redis_acl_commands": {
                "type": "array",
                "description": "Rules for individual commands",
                "maxItems": 256,
                "items": {
                  "type": "string"
                }
              },
              "redis_acl_keys": {
                "type": "array",
                "description": "Key access rules",
                "maxItems": 256,
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "authentication": {
            "type": "string",
            "description": "Authentication details",
            "enum": [
              "null",
              "caching_sha2_password",
              "mysql_native_password"
            ]
          },
          "username": {
            "type": "string",
            "description": "Service username",
            "maxLength": 64
          }
        },
        "required": [
          "username"
        ]
      },
      "ServiceUserCreateResponse": {
        "type": "object",
        "description": "ServiceUserCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user": {
            "type": "object",
            "description": "Service user account",
            "properties": {
              "access_cert": {
                "type": "string",
                "description": "Access certificate for TLS client authentication"
              },
              "access_cert_not_valid_after_time": {
                "type": "string",
                "description": "Validity end time (ISO8601) for the current access certificate"
              },
              "access_control": {
                "type": "object",
                "description": "Service specific access controls for user",
                "properties": {
                  "m3_group": {
                    "type": "string",
                    "description": "M3 access group to associate users with",
                    "maxLength": 16
                  },
                  "pg_allow_replication": {
                    "type": "boolean",
                    "description": "Enable REPLICATION role option"
                  },
                  "redis_acl_categories": {
                    "type": "array",
                    "description": "Command category rules",
                    "maxItems": 256,
                    "items": {
                      "type": "string"
                    }
                  },
                  "redis_acl_channels": {
                    "type": "array",
                    "description": "Permitted pub/sub channel patterns",
                    "maxItems": 256,
                    "items": {
                      "type": "string"
                    }
                  },
                  "redis_acl_commands": {
                    "type": "array",
                    "description": "Rules for individual commands",
                    "maxItems": 256,
                    "items": {
                      "type": "string"
                    }
                  },
                  "redis_acl_keys": {
                    "type": "array",
                    "description": "Key access rules",
                    "maxItems": 256,
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "access_key": {
                "type": "string",
                "description": "Access key for TLS client authentication"
              },
              "authentication": {
                "type": "string",
                "description": "Authentication details",
                "enum": [
                  "null",
                  "caching_sha2_password",
                  "mysql_native_password"
                ]
              },
              "expiring_cert_not_valid_after_time": {
                "type": "string",
                "description": "Validity end time (ISO8601) for the expiring access certificate"
              },
              "password": {
                "type": "string",
                "description": "Account password. A null value indicates a user overridden password."
              },
              "type": {
                "type": "string",
                "description": "Account type"
              },
              "username": {
                "type": "string",
                "description": "Account username"
              }
            },
            "required": [
              "password",
              "type",
              "username"
            ]
          }
        },
        "required": [
          "user"
        ]
      },
      "ServiceUserCredentialsModifyRequestBody": {
        "type": "object",
        "description": "ServiceUserCredentialsModifyRequestBody",
        "properties": {
          "access_control": {
            "type": "object",
            "description": "Service specific access controls for user",
            "properties": {
              "m3_group": {
                "type": "string",
                "description": "M3 access group to associate users with",
                "maxLength": 16
              },
              "pg_allow_replication": {
                "type": "boolean",
                "description": "Enable REPLICATION role option"
              },
              "redis_acl_categories": {
                "type": "array",
                "description": "Command category rules",
                "maxItems": 256,
                "items": {
                  "type": "string"
                }
              },
              "redis_acl_channels": {
                "type": "array",
                "description": "Permitted pub/sub channel patterns",
                "maxItems": 256,
                "items": {
                  "type": "string"
                }
              },
              "redis_acl_commands": {
                "type": "array",
                "description": "Rules for individual commands",
                "maxItems": 256,
                "items": {
                  "type": "string"
                }
              },
              "redis_acl_keys": {
                "type": "array",
                "description": "Key access rules",
                "maxItems": 256,
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "authentication": {
            "type": "string",
            "description": "Authentication details",
            "enum": [
              "null",
              "caching_sha2_password",
              "mysql_native_password"
            ]
          },
          "new_password": {
            "type": "string",
            "description": "New password",
            "minLength": 8,
            "maxLength": 256
          },
          "operation": {
            "type": "string",
            "description": "Operation type",
            "enum": [
              "acknowledge-renewal",
              "reset-credentials",
              "set-access-control"
            ]
          }
        },
        "required": [
          "operation"
        ]
      },
      "ServiceUserCredentialsModifyResponse": {
        "type": "object",
        "description": "ServiceUserCredentialsModifyResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Kafka ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": [
                        "admin",
                        "read",
                        "readwrite",
                        "write"
                      ]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "topic",
                    "username"
                  ]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": [
                          "cloud"
                        ]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    }
                  },
                  "required": [
                    "backup_name",
                    "backup_time",
                    "data_size"
                  ]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": [
                        "certificate",
                        "sasl"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": [
                        "dynamic",
                        "public",
                        "private",
                        "privatelink"
                      ]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": [
                        "primary",
                        "replica"
                      ]
                    }
                  },
                  "required": [
                    "component",
                    "host",
                    "port",
                    "route",
                    "usage"
                  ]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": [
                        "session",
                        "transaction",
                        "statement"
                      ]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": {
                  "type": "string"
                }
              },
              "disk_space_mb": {
                "type": "number",
                "description": "Megabytes of disk space for data storage"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": {
                  "type": "string"
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "dow",
                  "time",
                  "updates"
                ]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": [
                          "completed",
                          "phase"
                        ]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": [
                        "master",
                        "standby",
                        "read-replica"
                      ]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "state"
                  ]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": [
                        "schema_registry_read",
                        "schema_registry_write"
                      ]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "resource",
                    "username"
                  ]
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": {
                                "type": "string"
                              }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": [
                            "errors",
                            "nodes",
                            "status"
                          ]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": [
                        "state",
                        "status_user_desc"
                      ]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": [
                        "notice",
                        "warning"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": [
                    "level",
                    "message",
                    "metadata",
                    "type"
                  ]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": [
                  "POWEROFF",
                  "REBALANCING",
                  "REBUILDING",
                  "RUNNING"
                ]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": [
                        "ACTIVE",
                        "CONFIGURING",
                        "DELETING"
                      ]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user",
                      "properties": {
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": {
                      "type": "string",
                      "description": "Account type"
                    },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": [
                    "password",
                    "type",
                    "username"
                  ]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": [
          "service"
        ]
      },
      "ServiceUserCredentialsResetResponse": {
        "type": "object",
        "description": "ServiceUserCredentialsResetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service": {
            "type": "object",
            "description": "Service information",
            "properties": {
              "acl": {
                "type": "array",
                "description": "List of Kafka ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "Kafka permission",
                      "enum": [
                        "admin",
                        "read",
                        "readwrite",
                        "write"
                      ]
                    },
                    "topic": {
                      "type": "string",
                      "description": "Topic name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "topic",
                    "username"
                  ]
                }
              },
              "backups": {
                "type": "array",
                "description": "List of backups for the service",
                "items": {
                  "type": "object",
                  "properties": {
                    "additional_regions": {
                      "type": "array",
                      "description": "Additional backup regions, if available",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cloud": {
                            "type": "string",
                            "description": "Target cloud",
                            "maxLength": 256
                          },
                          "pause_reason": {
                            "type": "string",
                            "description": "Reason for pausing the backup synchronization"
                          },
                          "paused": {
                            "type": "boolean",
                            "description": "Indicates additional backup synchronization is paused"
                          },
                          "region": {
                            "type": "string",
                            "description": "Cloud storage region name"
                          }
                        },
                        "required": [
                          "cloud"
                        ]
                      }
                    },
                    "backup_name": {
                      "type": "string",
                      "description": "Internal name of this backup"
                    },
                    "backup_time": {
                      "type": "string",
                      "description": "Backup timestamp (ISO 8601)",
                      "maxLength": 36
                    },
                    "data_size": {
                      "type": "integer",
                      "description": "Backup's original size before compression"
                    },
                    "storage_location": {
                      "type": "string",
                      "description": "Location where this backup is stored"
                    }
                  },
                  "required": [
                    "backup_name",
                    "backup_time",
                    "data_size"
                  ]
                }
              },
              "cloud_description": {
                "type": "string",
                "description": "Cloud provider and location"
              },
              "cloud_name": {
                "type": "string",
                "description": "Target cloud",
                "maxLength": 256
              },
              "components": {
                "type": "array",
                "description": "Service component information objects",
                "items": {
                  "type": "object",
                  "properties": {
                    "component": {
                      "type": "string",
                      "description": "Service component name"
                    },
                    "host": {
                      "type": "string",
                      "description": "DNS name for connecting to the service component"
                    },
                    "kafka_authentication_method": {
                      "type": "string",
                      "description": "Kafka authentication method. This is a value specific to the 'kafka' service component",
                      "enum": [
                        "certificate",
                        "sasl"
                      ]
                    },
                    "path": {
                      "type": "string",
                      "description": "Path component of the service URL (useful only if service component is HTTP or HTTPS endpoint)"
                    },
                    "port": {
                      "type": "integer",
                      "description": "Port number for connecting to the service component",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "privatelink_connection_id": {
                      "type": "string",
                      "description": "Privatelink connection ID"
                    },
                    "route": {
                      "type": "string",
                      "description": "Network access route",
                      "enum": [
                        "dynamic",
                        "public",
                        "private",
                        "privatelink"
                      ]
                    },
                    "ssl": {
                      "type": "boolean",
                      "description": "Whether the endpoint is encrypted or accepts plaintext. By default endpoints are always encrypted andthis property is only included for service components that may disable encryption."
                    },
                    "usage": {
                      "type": "string",
                      "description": "DNS usage name",
                      "enum": [
                        "primary",
                        "replica"
                      ]
                    }
                  },
                  "required": [
                    "component",
                    "host",
                    "port",
                    "route",
                    "usage"
                  ]
                }
              },
              "connection_info": {
                "type": "object",
                "description": "Service-specific connection information properties",
                "properties": {}
              },
              "connection_pools": {
                "type": "array",
                "description": "PostgreSQL PGBouncer connection pools",
                "items": {
                  "type": "object",
                  "properties": {
                    "connection_uri": {
                      "type": "string",
                      "description": "Connection URI for the DB pool"
                    },
                    "database": {
                      "type": "string",
                      "description": "Database name",
                      "maxLength": 63
                    },
                    "pool_mode": {
                      "type": "string",
                      "description": "PGBouncer pool mode",
                      "enum": [
                        "session",
                        "transaction",
                        "statement"
                      ]
                    },
                    "pool_name": {
                      "type": "string",
                      "description": "Connection pool name",
                      "maxLength": 63
                    },
                    "pool_size": {
                      "type": "integer",
                      "description": "Size of PGBouncer's PostgreSQL side connection pool",
                      "minimum": 1,
                      "maximum": 10000
                    },
                    "username": {
                      "type": "string",
                      "description": "Pool username",
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "connection_uri",
                    "database",
                    "pool_mode",
                    "pool_name",
                    "pool_size"
                  ]
                }
              },
              "create_time": {
                "type": "string",
                "description": "Service creation timestamp (ISO 8601)",
                "maxLength": 36
              },
              "databases": {
                "type": "array",
                "description": "List of service's user database names",
                "items": {
                  "type": "string"
                }
              },
              "disk_space_mb": {
                "type": "number",
                "description": "Megabytes of disk space for data storage"
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "group_list": {
                "type": "array",
                "description": "List of service groups the service belongs to. This field is deprecated. It is always set to single element with value 'default'",
                "items": {
                  "type": "string"
                }
              },
              "maintenance": {
                "type": "object",
                "description": "Automatic maintenance settings",
                "properties": {
                  "dow": {
                    "type": "string",
                    "description": "Day of week for installing updates",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday",
                      "never"
                    ]
                  },
                  "time": {
                    "type": "string",
                    "description": "Time for installing updates, UTC",
                    "minLength": 8,
                    "maxLength": 8
                  },
                  "updates": {
                    "type": "array",
                    "description": "List of updates waiting to be installed",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deadline": {
                          "type": "string",
                          "description": "Deadline for installing the update"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the update"
                        },
                        "start_after": {
                          "type": "string",
                          "description": "The earliest time the update will be automatically applied"
                        },
                        "start_at": {
                          "type": "string",
                          "description": "The time when the update will be automatically applied"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "dow",
                  "time",
                  "updates"
                ]
              },
              "metadata": {
                "type": "object",
                "description": "Service type specific metadata",
                "properties": {}
              },
              "node_count": {
                "type": "integer",
                "description": "Number of service nodes in the active plan"
              },
              "node_cpu_count": {
                "type": "integer",
                "description": "Number of CPUs for each node"
              },
              "node_memory_mb": {
                "type": "number",
                "description": "Megabytes of memory for each node"
              },
              "node_states": {
                "type": "array",
                "description": "State of individual service nodes",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the service node"
                    },
                    "progress_updates": {
                      "type": "array",
                      "description": "Extra information regarding the progress for current state",
                      "items": {
                        "type": "object",
                        "properties": {
                          "completed": {
                            "type": "boolean",
                            "description": "Indicates whether this phase has been completed or not"
                          },
                          "current": {
                            "type": "integer",
                            "description": "Current progress for this phase. May be missing or null."
                          },
                          "max": {
                            "type": "integer",
                            "description": "Maximum progress value for this phase. May be missing or null. May change."
                          },
                          "min": {
                            "type": "integer",
                            "description": "Minimum progress value for this phase. May be missing or null."
                          },
                          "phase": {
                            "type": "string",
                            "description": "Key identifying this phase",
                            "enum": [
                              "prepare",
                              "basebackup",
                              "stream",
                              "finalize"
                            ]
                          },
                          "unit": {
                            "type": "string",
                            "description": "Unit for current/min/max values. New units may be added. If null should be treated as generic unit",
                            "enum": [
                              "binlogs",
                              "bytes_compressed",
                              "bytes_uncompressed",
                              "wal_lsn"
                            ]
                          }
                        },
                        "required": [
                          "completed",
                          "phase"
                        ]
                      }
                    },
                    "role": {
                      "type": "string",
                      "description": "Role of this node. Only returned for a subset of service types",
                      "enum": [
                        "master",
                        "standby",
                        "read-replica"
                      ]
                    },
                    "shard": {
                      "type": "object",
                      "description": "Shard of this node. Only returned for a subset of service types",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the shard."
                        },
                        "position": {
                          "type": "integer",
                          "description": "Position of this shard within the service"
                        }
                      }
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the service node",
                      "enum": [
                        "leaving",
                        "running",
                        "setting_up_vm",
                        "syncing_data",
                        "timing_out",
                        "unknown"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "state"
                  ]
                }
              },
              "plan": {
                "type": "string",
                "description": "Subscription plan",
                "maxLength": 128
              },
              "project_vpc_id": {
                "type": "string",
                "description": "Project VPC ID",
                "minLength": 36,
                "maxLength": 36
              },
              "schema_registry_acl": {
                "type": "array",
                "description": "List of Schema Registry ACL entries",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID",
                      "maxLength": 40
                    },
                    "permission": {
                      "type": "string",
                      "description": "ACL entry for Schema Registry",
                      "enum": [
                        "schema_registry_read",
                        "schema_registry_write"
                      ]
                    },
                    "resource": {
                      "type": "string",
                      "description": "Schema Registry ACL entry resource name pattern",
                      "minLength": 1,
                      "maxLength": 249
                    },
                    "username": {
                      "type": "string",
                      "description": "Username",
                      "minLength": 1,
                      "maxLength": 64
                    }
                  },
                  "required": [
                    "permission",
                    "resource",
                    "username"
                  ]
                }
              },
              "service_integrations": {
                "type": "array",
                "description": "Integrations with other services",
                "items": {
                  "type": "object",
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "description": "True when integration is active"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the integration"
                    },
                    "dest_endpoint": {
                      "type": "string",
                      "description": "Destination endpoint name"
                    },
                    "dest_endpoint_id": {
                      "type": "string",
                      "description": "Destination endpoint id"
                    },
                    "dest_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "dest_service": {
                      "type": "string",
                      "description": "Destination service name"
                    },
                    "dest_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "True when integration is enabled"
                    },
                    "integration_status": {
                      "type": "object",
                      "description": "Integration status",
                      "properties": {
                        "state": {
                          "type": "object",
                          "description": "Service integration state",
                          "properties": {
                            "errors": {
                              "type": "array",
                              "description": "Errors",
                              "items": {
                                "type": "string"
                              }
                            },
                            "likely_error_cause": {
                              "type": "string",
                              "description": "Most likely cause of the errors",
                              "enum": [
                                "null",
                                "destination",
                                "integration",
                                "source",
                                "unknown"
                              ]
                            },
                            "nodes": {
                              "type": "object",
                              "description": "Nodes",
                              "properties": {}
                            },
                            "status": {
                              "type": "string",
                              "description": "Service integration status",
                              "enum": [
                                "failed",
                                "inactive",
                                "running",
                                "starting",
                                "unknown"
                              ]
                            }
                          },
                          "required": [
                            "errors",
                            "nodes",
                            "status"
                          ]
                        },
                        "status_user_desc": {
                          "type": "string",
                          "description": "Integration status description"
                        }
                      },
                      "required": [
                        "state",
                        "status_user_desc"
                      ]
                    },
                    "integration_type": {
                      "type": "string",
                      "description": "Type of the integration"
                    },
                    "service_integration_id": {
                      "type": "string",
                      "description": "Integration ID"
                    },
                    "source_endpoint": {
                      "type": "string",
                      "description": "Source endpoint name"
                    },
                    "source_endpoint_id": {
                      "type": "string",
                      "description": "Source endpoint ID"
                    },
                    "source_project": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    },
                    "source_service": {
                      "type": "string",
                      "description": "Source service name"
                    },
                    "source_service_type": {
                      "type": "string",
                      "description": "Service type code",
                      "maxLength": 64
                    },
                    "user_config": {
                      "type": "object",
                      "description": "Service integration settings",
                      "properties": {}
                    }
                  },
                  "required": [
                    "active",
                    "description",
                    "dest_project",
                    "dest_service_type",
                    "enabled",
                    "integration_type",
                    "service_integration_id",
                    "source_project",
                    "source_service",
                    "source_service_type"
                  ]
                }
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "service_notifications": {
                "type": "array",
                "description": "Service notifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "type": "string",
                      "description": "Notification level",
                      "enum": [
                        "notice",
                        "warning"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Human notification message",
                      "maxLength": 1024
                    },
                    "metadata": {
                      "type": "object",
                      "description": "Notification metadata",
                      "properties": {
                        "end_of_life_help_article_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "end_of_life_policy_url": {
                          "type": "string",
                          "description": "Link to the help article"
                        },
                        "service_end_of_life_time": {
                          "type": "string",
                          "description": "Timestamp in ISO 8601 format, always in UTC",
                          "maxLength": 36
                        },
                        "upgrade_to_service_type": {
                          "type": "string",
                          "description": "If the customer takes no action, the service is updated to this service type when end of life is reached on the Aiven platform. If it is the same as the service type, the platform only upgrades the version.",
                          "maxLength": 64
                        },
                        "upgrade_to_version": {
                          "type": "string",
                          "description": "The version to which the service will be updated at the end of life on the Aiven platform if the user does not take any action",
                          "maxLength": 32
                        }
                      }
                    },
                    "type": {
                      "type": "string",
                      "description": "Notification type",
                      "enum": [
                        "service_end_of_life",
                        "service_powered_off_removal"
                      ]
                    }
                  },
                  "required": [
                    "level",
                    "message",
                    "metadata",
                    "type"
                  ]
                }
              },
              "service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "service_type_description": {
                "type": "string",
                "description": "Single line description of the service"
              },
              "service_uri": {
                "type": "string",
                "description": "URI for connecting to the service (may be null)"
              },
              "service_uri_params": {
                "type": "object",
                "description": "service_uri parameterized into key-value pairs",
                "properties": {}
              },
              "state": {
                "type": "string",
                "description": "State of the service",
                "enum": [
                  "POWEROFF",
                  "REBALANCING",
                  "REBUILDING",
                  "RUNNING"
                ]
              },
              "tags": {
                "type": "object",
                "description": "Set of resource tags",
                "properties": {}
              },
              "termination_protection": {
                "type": "boolean",
                "description": "Service is protected against termination and powering off"
              },
              "topics": {
                "type": "array",
                "description": "Kafka topics. DEPRECATED: Use /project/$project/service/$service/topic instead",
                "items": {
                  "type": "object",
                  "properties": {
                    "cleanup_policy": {
                      "type": "string",
                      "description": "cleanup.policy",
                      "maxLength": 64
                    },
                    "min_insync_replicas": {
                      "type": "integer",
                      "description": "min.insync.replicas",
                      "minimum": 1
                    },
                    "partitions": {
                      "type": "integer",
                      "description": "Number of partitions",
                      "minimum": 1,
                      "maximum": 1000000
                    },
                    "replication": {
                      "type": "integer",
                      "description": "Number of replicas",
                      "minimum": 1
                    },
                    "retention_bytes": {
                      "type": "integer",
                      "description": "retention.bytes"
                    },
                    "retention_hours": {
                      "type": "integer",
                      "description": "Retention period (hours)",
                      "maximum": 2562047788015
                    },
                    "state": {
                      "type": "string",
                      "description": "Topic state",
                      "enum": [
                        "ACTIVE",
                        "CONFIGURING",
                        "DELETING"
                      ]
                    },
                    "topic_name": {
                      "type": "string",
                      "description": "Topic name",
                      "minLength": 1,
                      "maxLength": 249
                    }
                  },
                  "required": [
                    "cleanup_policy",
                    "min_insync_replicas",
                    "partitions",
                    "replication",
                    "retention_bytes",
                    "retention_hours",
                    "topic_name"
                  ]
                }
              },
              "update_time": {
                "type": "string",
                "description": "Service last update timestamp (ISO 8601)",
                "maxLength": 36
              },
              "user_config": {
                "type": "object",
                "description": "Service type-specific settings",
                "properties": {}
              },
              "users": {
                "type": "array",
                "description": "List of service users",
                "items": {
                  "type": "object",
                  "properties": {
                    "access_cert": {
                      "type": "string",
                      "description": "Access certificate for TLS client authentication"
                    },
                    "access_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the current access certificate"
                    },
                    "access_control": {
                      "type": "object",
                      "description": "Service specific access controls for user",
                      "properties": {
                        "m3_group": {
                          "type": "string",
                          "description": "M3 access group to associate users with",
                          "maxLength": 16
                        },
                        "pg_allow_replication": {
                          "type": "boolean",
                          "description": "Enable REPLICATION role option"
                        },
                        "redis_acl_categories": {
                          "type": "array",
                          "description": "Command category rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_channels": {
                          "type": "array",
                          "description": "Permitted pub/sub channel patterns",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_commands": {
                          "type": "array",
                          "description": "Rules for individual commands",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        },
                        "redis_acl_keys": {
                          "type": "array",
                          "description": "Key access rules",
                          "maxItems": 256,
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "access_key": {
                      "type": "string",
                      "description": "Access key for TLS client authentication"
                    },
                    "authentication": {
                      "type": "string",
                      "description": "Authentication details",
                      "enum": [
                        "null",
                        "caching_sha2_password",
                        "mysql_native_password"
                      ]
                    },
                    "expiring_cert_not_valid_after_time": {
                      "type": "string",
                      "description": "Validity end time (ISO8601) for the expiring access certificate"
                    },
                    "password": {
                      "type": "string",
                      "description": "Account password. A null value indicates a user overridden password."
                    },
                    "type": {
                      "type": "string",
                      "description": "Account type"
                    },
                    "username": {
                      "type": "string",
                      "description": "Account username"
                    }
                  },
                  "required": [
                    "password",
                    "type",
                    "username"
                  ]
                }
              }
            },
            "required": [
              "cloud_name",
              "create_time",
              "group_list",
              "plan",
              "project_vpc_id",
              "service_integrations",
              "service_name",
              "service_type",
              "service_uri",
              "state",
              "termination_protection",
              "update_time",
              "user_config"
            ]
          }
        },
        "required": [
          "service"
        ]
      },
      "ServiceUserDeleteResponse": {
        "type": "object",
        "description": "ServiceUserDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceUserGetResponse": {
        "type": "object",
        "description": "ServiceUserGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user": {
            "type": "object",
            "description": "Service user account",
            "properties": {
              "access_cert": {
                "type": "string",
                "description": "Access certificate for TLS client authentication"
              },
              "access_cert_not_valid_after_time": {
                "type": "string",
                "description": "Validity end time (ISO8601) for the current access certificate"
              },
              "access_control": {
                "type": "object",
                "description": "Service specific access controls for user",
                "properties": {
                  "m3_group": {
                    "type": "string",
                    "description": "M3 access group to associate users with",
                    "maxLength": 16
                  },
                  "pg_allow_replication": {
                    "type": "boolean",
                    "description": "Enable REPLICATION role option"
                  },
                  "redis_acl_categories": {
                    "type": "array",
                    "description": "Command category rules",
                    "maxItems": 256,
                    "items": {
                      "type": "string"
                    }
                  },
                  "redis_acl_channels": {
                    "type": "array",
                    "description": "Permitted pub/sub channel patterns",
                    "maxItems": 256,
                    "items": {
                      "type": "string"
                    }
                  },
                  "redis_acl_commands": {
                    "type": "array",
                    "description": "Rules for individual commands",
                    "maxItems": 256,
                    "items": {
                      "type": "string"
                    }
                  },
                  "redis_acl_keys": {
                    "type": "array",
                    "description": "Key access rules",
                    "maxItems": 256,
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "access_key": {
                "type": "string",
                "description": "Access key for TLS client authentication"
              },
              "authentication": {
                "type": "string",
                "description": "Authentication details",
                "enum": [
                  "null",
                  "caching_sha2_password",
                  "mysql_native_password"
                ]
              },
              "expiring_cert_not_valid_after_time": {
                "type": "string",
                "description": "Validity end time (ISO8601) for the expiring access certificate"
              },
              "password": {
                "type": "string",
                "description": "Account password. A null value indicates a user overridden password."
              },
              "type": {
                "type": "string",
                "description": "Account type"
              },
              "username": {
                "type": "string",
                "description": "Account username"
              }
            },
            "required": [
              "password",
              "type",
              "username"
            ]
          }
        },
        "required": [
          "user"
        ]
      },
      "ServiceIntegrationCreateRequestBody": {
        "type": "object",
        "description": "ServiceIntegrationCreateRequestBody",
        "properties": {
          "dest_endpoint_id": {
            "type": "string",
            "description": "Integration destination endpoint ID",
            "maxLength": 36
          },
          "dest_project": {
            "type": "string",
            "description": "Destination project name",
            "maxLength": 63
          },
          "dest_service": {
            "type": "string",
            "description": "Destination service name",
            "maxLength": 64
          },
          "integration_type": {
            "type": "string",
            "description": "Service integration type",
            "enum": [
              "alertmanager",
              "autoscaler",
              "caching",
              "cassandra_cross_service_cluster",
              "clickhouse_kafka",
              "clickhouse_postgresql",
              "dashboard",
              "datadog",
              "datasource",
              "external_aws_cloudwatch_logs",
              "external_aws_cloudwatch_metrics",
              "external_elasticsearch_logs",
              "external_google_cloud_logging",
              "external_opensearch_logs",
              "flink",
              "flink_external_kafka",
              "internal_connectivity",
              "jolokia",
              "kafka_connect",
              "kafka_logs",
              "kafka_mirrormaker",
              "logs",
              "m3aggregator",
              "m3coordinator",
              "metrics",
              "opensearch_cross_cluster_replication",
              "opensearch_cross_cluster_search",
              "prometheus",
              "read_replica",
              "rsyslog",
              "schema_registry_proxy",
              "stresstester",
              "thanoscompactor",
              "thanosquery",
              "thanosstore",
              "vmalert"
            ]
          },
          "source_endpoint_id": {
            "type": "string",
            "description": "Integration source endpoint ID",
            "maxLength": 36
          },
          "source_project": {
            "type": "string",
            "description": "Source project name",
            "maxLength": 63
          },
          "source_service": {
            "type": "string",
            "description": "Source service name",
            "maxLength": 64
          },
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        },
        "required": [
          "integration_type"
        ]
      },
      "ServiceIntegrationCreateResponse": {
        "type": "object",
        "description": "ServiceIntegrationCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration": {
            "type": "object",
            "description": "Service integration",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "True when integration is active"
              },
              "description": {
                "type": "string",
                "description": "Description of the integration"
              },
              "dest_endpoint": {
                "type": "string",
                "description": "Destination endpoint name"
              },
              "dest_endpoint_id": {
                "type": "string",
                "description": "Destination endpoint id"
              },
              "dest_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "dest_service": {
                "type": "string",
                "description": "Destination service name"
              },
              "dest_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "enabled": {
                "type": "boolean",
                "description": "True when integration is enabled"
              },
              "integration_status": {
                "type": "object",
                "description": "Integration status",
                "properties": {
                  "state": {
                    "type": "object",
                    "description": "Service integration state",
                    "properties": {
                      "errors": {
                        "type": "array",
                        "description": "Errors",
                        "items": {
                          "type": "string"
                        }
                      },
                      "likely_error_cause": {
                        "type": "string",
                        "description": "Most likely cause of the errors",
                        "enum": [
                          "null",
                          "destination",
                          "integration",
                          "source",
                          "unknown"
                        ]
                      },
                      "nodes": {
                        "type": "object",
                        "description": "Nodes",
                        "properties": {}
                      },
                      "status": {
                        "type": "string",
                        "description": "Service integration status",
                        "enum": [
                          "failed",
                          "inactive",
                          "running",
                          "starting",
                          "unknown"
                        ]
                      }
                    },
                    "required": [
                      "errors",
                      "nodes",
                      "status"
                    ]
                  },
                  "status_user_desc": {
                    "type": "string",
                    "description": "Integration status description"
                  }
                },
                "required": [
                  "state",
                  "status_user_desc"
                ]
              },
              "integration_type": {
                "type": "string",
                "description": "Type of the integration"
              },
              "service_integration_id": {
                "type": "string",
                "description": "Integration ID"
              },
              "source_endpoint": {
                "type": "string",
                "description": "Source endpoint name"
              },
              "source_endpoint_id": {
                "type": "string",
                "description": "Source endpoint ID"
              },
              "source_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "source_service": {
                "type": "string",
                "description": "Source service name"
              },
              "source_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "active",
              "description",
              "dest_project",
              "dest_service_type",
              "enabled",
              "integration_type",
              "service_integration_id",
              "source_project",
              "source_service",
              "source_service_type"
            ]
          }
        },
        "required": [
          "service_integration"
        ]
      },
      "ServiceIntegrationDeleteResponse": {
        "type": "object",
        "description": "ServiceIntegrationDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceIntegrationEndpointCreateRequestBody": {
        "type": "object",
        "description": "ServiceIntegrationEndpointCreateRequestBody",
        "properties": {
          "endpoint_name": {
            "type": "string",
            "description": "Integration endpoint name",
            "minLength": 1,
            "maxLength": 40
          },
          "endpoint_type": {
            "type": "string",
            "description": "Service integration endpoint type",
            "enum": [
              "autoscaler",
              "datadog",
              "external_aws_cloudwatch_logs",
              "external_aws_cloudwatch_metrics",
              "external_elasticsearch_logs",
              "external_google_cloud_logging",
              "external_kafka",
              "external_opensearch_logs",
              "external_postgresql",
              "external_schema_registry",
              "jolokia",
              "prometheus",
              "rsyslog"
            ]
          },
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        },
        "required": [
          "endpoint_name",
          "endpoint_type",
          "user_config"
        ]
      },
      "ServiceIntegrationEndpointCreateResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration_endpoint": {
            "type": "object",
            "description": "Service integration endpoint",
            "properties": {
              "endpoint_config": {
                "type": "object",
                "description": "Service integration endpoint backend settings",
                "properties": {}
              },
              "endpoint_id": {
                "type": "string",
                "description": "Integration endpoint ID"
              },
              "endpoint_name": {
                "type": "string",
                "description": "Integration endpoint name",
                "minLength": 1,
                "maxLength": 40
              },
              "endpoint_type": {
                "type": "string",
                "description": "Integration endpoint type",
                "enum": [
                  "autoscaler",
                  "datadog",
                  "external_aws_cloudwatch_logs",
                  "external_aws_cloudwatch_metrics",
                  "external_elasticsearch_logs",
                  "external_google_cloud_logging",
                  "external_kafka",
                  "external_opensearch_logs",
                  "external_postgresql",
                  "external_schema_registry",
                  "jolokia",
                  "prometheus",
                  "rsyslog"
                ]
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "endpoint_config",
              "endpoint_id",
              "endpoint_name",
              "endpoint_type",
              "user_config"
            ]
          }
        },
        "required": [
          "service_integration_endpoint"
        ]
      },
      "ServiceIntegrationEndpointDeleteResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "ServiceIntegrationEndpointGetResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration_endpoint": {
            "type": "object",
            "description": "Service integration endpoint",
            "properties": {
              "endpoint_config": {
                "type": "object",
                "description": "Service integration endpoint backend settings",
                "properties": {}
              },
              "endpoint_id": {
                "type": "string",
                "description": "Integration endpoint ID"
              },
              "endpoint_name": {
                "type": "string",
                "description": "Integration endpoint name",
                "minLength": 1,
                "maxLength": 40
              },
              "endpoint_type": {
                "type": "string",
                "description": "Integration endpoint type",
                "enum": [
                  "autoscaler",
                  "datadog",
                  "external_aws_cloudwatch_logs",
                  "external_aws_cloudwatch_metrics",
                  "external_elasticsearch_logs",
                  "external_google_cloud_logging",
                  "external_kafka",
                  "external_opensearch_logs",
                  "external_postgresql",
                  "external_schema_registry",
                  "jolokia",
                  "prometheus",
                  "rsyslog"
                ]
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "endpoint_config",
              "endpoint_id",
              "endpoint_name",
              "endpoint_type",
              "user_config"
            ]
          }
        },
        "required": [
          "service_integration_endpoint"
        ]
      },
      "ServiceIntegrationEndpointListResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration_endpoints": {
            "type": "array",
            "description": "List of service integrations",
            "items": {
              "type": "object",
              "properties": {
                "endpoint_config": {
                  "type": "object",
                  "description": "Service integration endpoint backend settings",
                  "properties": {}
                },
                "endpoint_id": {
                  "type": "string",
                  "description": "Integration endpoint ID"
                },
                "endpoint_name": {
                  "type": "string",
                  "description": "Integration endpoint name",
                  "minLength": 1,
                  "maxLength": 40
                },
                "endpoint_type": {
                  "type": "string",
                  "description": "Integration endpoint type",
                  "enum": [
                    "autoscaler",
                    "datadog",
                    "external_aws_cloudwatch_logs",
                    "external_aws_cloudwatch_metrics",
                    "external_elasticsearch_logs",
                    "external_google_cloud_logging",
                    "external_kafka",
                    "external_opensearch_logs",
                    "external_postgresql",
                    "external_schema_registry",
                    "jolokia",
                    "prometheus",
                    "rsyslog"
                  ]
                },
                "user_config": {
                  "type": "object",
                  "description": "Service integration settings",
                  "properties": {}
                }
              },
              "required": [
                "endpoint_config",
                "endpoint_id",
                "endpoint_name",
                "endpoint_type",
                "user_config"
              ]
            }
          }
        },
        "required": [
          "service_integration_endpoints"
        ]
      },
      "ServiceIntegrationEndpointTypesResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointTypesResponse",
        "properties": {
          "endpoint_types": {
            "type": "array",
            "description": "List of service integration endpoint types",
            "items": {
              "type": "object",
              "properties": {
                "endpoint_type": {
                  "type": "string",
                  "description": "Endpoint type name"
                },
                "service_types": {
                  "type": "array",
                  "description": "Supported service types",
                  "items": {
                    "type": "string"
                  }
                },
                "title": {
                  "type": "string",
                  "description": "Endpoint type description"
                },
                "user_config_schema": {
                  "type": "object",
                  "description": "JSON-Schema for the 'user_config' properties",
                  "properties": {}
                }
              },
              "required": [
                "endpoint_type",
                "service_types",
                "title",
                "user_config_schema"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "endpoint_types"
        ]
      },
      "ServiceIntegrationEndpointUpdateRequestBody": {
        "type": "object",
        "description": "ServiceIntegrationEndpointUpdateRequestBody",
        "properties": {
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        },
        "required": [
          "user_config"
        ]
      },
      "ServiceIntegrationEndpointUpdateResponse": {
        "type": "object",
        "description": "ServiceIntegrationEndpointUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration_endpoint": {
            "type": "object",
            "description": "Service integration endpoint",
            "properties": {
              "endpoint_config": {
                "type": "object",
                "description": "Service integration endpoint backend settings",
                "properties": {}
              },
              "endpoint_id": {
                "type": "string",
                "description": "Integration endpoint ID"
              },
              "endpoint_name": {
                "type": "string",
                "description": "Integration endpoint name",
                "minLength": 1,
                "maxLength": 40
              },
              "endpoint_type": {
                "type": "string",
                "description": "Integration endpoint type",
                "enum": [
                  "autoscaler",
                  "datadog",
                  "external_aws_cloudwatch_logs",
                  "external_aws_cloudwatch_metrics",
                  "external_elasticsearch_logs",
                  "external_google_cloud_logging",
                  "external_kafka",
                  "external_opensearch_logs",
                  "external_postgresql",
                  "external_schema_registry",
                  "jolokia",
                  "prometheus",
                  "rsyslog"
                ]
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "endpoint_config",
              "endpoint_id",
              "endpoint_name",
              "endpoint_type",
              "user_config"
            ]
          }
        },
        "required": [
          "service_integration_endpoint"
        ]
      },
      "ServiceIntegrationGetResponse": {
        "type": "object",
        "description": "ServiceIntegrationGetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration": {
            "type": "object",
            "description": "Service integration",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "True when integration is active"
              },
              "description": {
                "type": "string",
                "description": "Description of the integration"
              },
              "dest_endpoint": {
                "type": "string",
                "description": "Destination endpoint name"
              },
              "dest_endpoint_id": {
                "type": "string",
                "description": "Destination endpoint id"
              },
              "dest_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "dest_service": {
                "type": "string",
                "description": "Destination service name"
              },
              "dest_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "enabled": {
                "type": "boolean",
                "description": "True when integration is enabled"
              },
              "integration_status": {
                "type": "object",
                "description": "Integration status",
                "properties": {
                  "state": {
                    "type": "object",
                    "description": "Service integration state",
                    "properties": {
                      "errors": {
                        "type": "array",
                        "description": "Errors",
                        "items": {
                          "type": "string"
                        }
                      },
                      "likely_error_cause": {
                        "type": "string",
                        "description": "Most likely cause of the errors",
                        "enum": [
                          "null",
                          "destination",
                          "integration",
                          "source",
                          "unknown"
                        ]
                      },
                      "nodes": {
                        "type": "object",
                        "description": "Nodes",
                        "properties": {}
                      },
                      "status": {
                        "type": "string",
                        "description": "Service integration status",
                        "enum": [
                          "failed",
                          "inactive",
                          "running",
                          "starting",
                          "unknown"
                        ]
                      }
                    },
                    "required": [
                      "errors",
                      "nodes",
                      "status"
                    ]
                  },
                  "status_user_desc": {
                    "type": "string",
                    "description": "Integration status description"
                  }
                },
                "required": [
                  "state",
                  "status_user_desc"
                ]
              },
              "integration_type": {
                "type": "string",
                "description": "Type of the integration"
              },
              "service_integration_id": {
                "type": "string",
                "description": "Integration ID"
              },
              "source_endpoint": {
                "type": "string",
                "description": "Source endpoint name"
              },
              "source_endpoint_id": {
                "type": "string",
                "description": "Source endpoint ID"
              },
              "source_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "source_service": {
                "type": "string",
                "description": "Source service name"
              },
              "source_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "active",
              "description",
              "dest_project",
              "dest_service_type",
              "enabled",
              "integration_type",
              "service_integration_id",
              "source_project",
              "source_service",
              "source_service_type"
            ]
          }
        },
        "required": [
          "service_integration"
        ]
      },
      "ServiceIntegrationListResponse": {
        "type": "object",
        "description": "ServiceIntegrationListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integrations": {
            "type": "array",
            "description": "List of service integrations in current project for a service",
            "items": {
              "type": "object",
              "properties": {
                "active": {
                  "type": "boolean",
                  "description": "True when integration is active"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the integration"
                },
                "dest_endpoint": {
                  "type": "string",
                  "description": "Destination endpoint name"
                },
                "dest_endpoint_id": {
                  "type": "string",
                  "description": "Destination endpoint id"
                },
                "dest_project": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "dest_service": {
                  "type": "string",
                  "description": "Destination service name"
                },
                "dest_service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "enabled": {
                  "type": "boolean",
                  "description": "True when integration is enabled"
                },
                "integration_status": {
                  "type": "object",
                  "description": "Integration status",
                  "properties": {
                    "state": {
                      "type": "object",
                      "description": "Service integration state",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Errors",
                          "items": {
                            "type": "string"
                          }
                        },
                        "likely_error_cause": {
                          "type": "string",
                          "description": "Most likely cause of the errors",
                          "enum": [
                            "null",
                            "destination",
                            "integration",
                            "source",
                            "unknown"
                          ]
                        },
                        "nodes": {
                          "type": "object",
                          "description": "Nodes",
                          "properties": {}
                        },
                        "status": {
                          "type": "string",
                          "description": "Service integration status",
                          "enum": [
                            "failed",
                            "inactive",
                            "running",
                            "starting",
                            "unknown"
                          ]
                        }
                      },
                      "required": [
                        "errors",
                        "nodes",
                        "status"
                      ]
                    },
                    "status_user_desc": {
                      "type": "string",
                      "description": "Integration status description"
                    }
                  },
                  "required": [
                    "state",
                    "status_user_desc"
                  ]
                },
                "integration_type": {
                  "type": "string",
                  "description": "Type of the integration"
                },
                "service_integration_id": {
                  "type": "string",
                  "description": "Integration ID"
                },
                "source_endpoint": {
                  "type": "string",
                  "description": "Source endpoint name"
                },
                "source_endpoint_id": {
                  "type": "string",
                  "description": "Source endpoint ID"
                },
                "source_project": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "source_service": {
                  "type": "string",
                  "description": "Source service name"
                },
                "source_service_type": {
                  "type": "string",
                  "description": "Service type code",
                  "maxLength": 64
                },
                "user_config": {
                  "type": "object",
                  "description": "Service integration settings",
                  "properties": {}
                }
              },
              "required": [
                "active",
                "description",
                "dest_project",
                "dest_service_type",
                "enabled",
                "integration_type",
                "service_integration_id",
                "source_project",
                "source_service",
                "source_service_type"
              ]
            }
          }
        },
        "required": [
          "service_integrations"
        ]
      },
      "ServiceIntegrationTypesResponse": {
        "type": "object",
        "description": "ServiceIntegrationTypesResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "integration_types": {
            "type": "array",
            "description": "List of service integration types",
            "items": {
              "type": "object",
              "properties": {
                "dest_description": {
                  "type": "string",
                  "description": "Description of the destination service"
                },
                "dest_service_type": {
                  "type": "string",
                  "description": "Service type. DEPRECATED: Use dest_service_types instead"
                },
                "dest_service_types": {
                  "type": "array",
                  "description": "Supported destination service types",
                  "items": {
                    "type": "string"
                  }
                },
                "integration_type": {
                  "type": "string",
                  "description": "Integration type name"
                },
                "source_description": {
                  "type": "string",
                  "description": "Description of the source service"
                },
                "source_service_types": {
                  "type": "array",
                  "description": "Supported source service types",
                  "items": {
                    "type": "string"
                  }
                },
                "user_config_schema": {
                  "type": "object",
                  "description": "JSON-Schema for the 'user_config' properties",
                  "properties": {}
                }
              },
              "required": [
                "dest_description",
                "dest_service_type",
                "dest_service_types",
                "integration_type",
                "source_description",
                "source_service_types",
                "user_config_schema"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "integration_types"
        ]
      },
      "ServiceIntegrationUpdateRequestBody": {
        "type": "object",
        "description": "ServiceIntegrationUpdateRequestBody",
        "properties": {
          "user_config": {
            "type": "object",
            "description": "Service type-specific settings",
            "properties": {}
          }
        },
        "required": [
          "user_config"
        ]
      },
      "ServiceIntegrationUpdateResponse": {
        "type": "object",
        "description": "ServiceIntegrationUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_integration": {
            "type": "object",
            "description": "Service integration",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "True when integration is active"
              },
              "description": {
                "type": "string",
                "description": "Description of the integration"
              },
              "dest_endpoint": {
                "type": "string",
                "description": "Destination endpoint name"
              },
              "dest_endpoint_id": {
                "type": "string",
                "description": "Destination endpoint id"
              },
              "dest_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "dest_service": {
                "type": "string",
                "description": "Destination service name"
              },
              "dest_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "enabled": {
                "type": "boolean",
                "description": "True when integration is enabled"
              },
              "integration_status": {
                "type": "object",
                "description": "Integration status",
                "properties": {
                  "state": {
                    "type": "object",
                    "description": "Service integration state",
                    "properties": {
                      "errors": {
                        "type": "array",
                        "description": "Errors",
                        "items": {
                          "type": "string"
                        }
                      },
                      "likely_error_cause": {
                        "type": "string",
                        "description": "Most likely cause of the errors",
                        "enum": [
                          "null",
                          "destination",
                          "integration",
                          "source",
                          "unknown"
                        ]
                      },
                      "nodes": {
                        "type": "object",
                        "description": "Nodes",
                        "properties": {}
                      },
                      "status": {
                        "type": "string",
                        "description": "Service integration status",
                        "enum": [
                          "failed",
                          "inactive",
                          "running",
                          "starting",
                          "unknown"
                        ]
                      }
                    },
                    "required": [
                      "errors",
                      "nodes",
                      "status"
                    ]
                  },
                  "status_user_desc": {
                    "type": "string",
                    "description": "Integration status description"
                  }
                },
                "required": [
                  "state",
                  "status_user_desc"
                ]
              },
              "integration_type": {
                "type": "string",
                "description": "Type of the integration"
              },
              "service_integration_id": {
                "type": "string",
                "description": "Integration ID"
              },
              "source_endpoint": {
                "type": "string",
                "description": "Source endpoint name"
              },
              "source_endpoint_id": {
                "type": "string",
                "description": "Source endpoint ID"
              },
              "source_project": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "source_service": {
                "type": "string",
                "description": "Source service name"
              },
              "source_service_type": {
                "type": "string",
                "description": "Service type code",
                "maxLength": 64
              },
              "user_config": {
                "type": "object",
                "description": "Service integration settings",
                "properties": {}
              }
            },
            "required": [
              "active",
              "description",
              "dest_project",
              "dest_service_type",
              "enabled",
              "integration_type",
              "service_integration_id",
              "source_project",
              "source_service",
              "source_service_type"
            ]
          }
        },
        "required": [
          "service_integration"
        ]
      },
      "ProjectStaticIPAssociateRequestBody": {
        "type": "object",
        "description": "ProjectStaticIPAssociateRequestBody",
        "properties": {
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          }
        },
        "required": [
          "service_name"
        ]
      },
      "ProjectStaticIPAssociateResponse": {
        "type": "object",
        "description": "ProjectStaticIPAssociateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "ip_address": {
            "type": "string",
            "description": "IPv4 address"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "state": {
            "type": "string",
            "description": "Static IP address state",
            "enum": [
              "creating",
              "created",
              "available",
              "assigned",
              "deleting",
              "deleted"
            ]
          },
          "static_ip_address_id": {
            "type": "string",
            "description": "Static IP address identifier"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name",
          "ip_address",
          "service_name",
          "state",
          "static_ip_address_id",
          "termination_protection"
        ]
      },
      "ProjectStaticIPAvailabilityListResponse": {
        "type": "object",
        "description": "ProjectStaticIPAvailabilityListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "static_ip_address_availability": {
            "type": "array",
            "description": "Paginated array",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "price_usd": {
                  "type": "string",
                  "description": "Hourly static IP address price in this cloud region"
                }
              },
              "required": [
                "cloud_name",
                "price_usd"
              ]
            }
          }
        },
        "required": [
          "static_ip_address_availability"
        ]
      },
      "ProjectStaticIPDissociateResponse": {
        "type": "object",
        "description": "ProjectStaticIPDissociateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "ip_address": {
            "type": "string",
            "description": "IPv4 address"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "state": {
            "type": "string",
            "description": "Static IP address state",
            "enum": [
              "creating",
              "created",
              "available",
              "assigned",
              "deleting",
              "deleted"
            ]
          },
          "static_ip_address_id": {
            "type": "string",
            "description": "Static IP address identifier"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name",
          "ip_address",
          "service_name",
          "state",
          "static_ip_address_id",
          "termination_protection"
        ]
      },
      "ProjectStaticIPPatchRequestBody": {
        "type": "object",
        "description": "ProjectStaticIPPatchRequestBody",
        "properties": {
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        }
      },
      "ProjectStaticIPPatchResponse": {
        "type": "object",
        "description": "ProjectStaticIPPatchResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "ip_address": {
            "type": "string",
            "description": "IPv4 address"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "state": {
            "type": "string",
            "description": "Static IP address state",
            "enum": [
              "creating",
              "created",
              "available",
              "assigned",
              "deleting",
              "deleted"
            ]
          },
          "static_ip_address_id": {
            "type": "string",
            "description": "Static IP address identifier"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name",
          "ip_address",
          "service_name",
          "state",
          "static_ip_address_id",
          "termination_protection"
        ]
      },
      "StaticIPCreateRequestBody": {
        "type": "object",
        "description": "StaticIPCreateRequestBody",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name"
        ]
      },
      "StaticIPCreateResponse": {
        "type": "object",
        "description": "StaticIPCreateResponse",
        "properties": {
          "cloud_name": {
            "type": "string",
            "description": "Target cloud",
            "maxLength": 256
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "ip_address": {
            "type": "string",
            "description": "IPv4 address"
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "state": {
            "type": "string",
            "description": "Static IP address state",
            "enum": [
              "creating",
              "created",
              "available",
              "assigned",
              "deleting",
              "deleted"
            ]
          },
          "static_ip_address_id": {
            "type": "string",
            "description": "Static IP address identifier"
          },
          "termination_protection": {
            "type": "boolean",
            "description": "Static IP address is protected against deletion"
          }
        },
        "required": [
          "cloud_name",
          "ip_address",
          "service_name",
          "state",
          "static_ip_address_id",
          "termination_protection"
        ]
      },
      "StaticIPListResponse": {
        "type": "object",
        "description": "StaticIPListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "static_ips": {
            "type": "array",
            "description": "Paginated array",
            "items": {
              "type": "object",
              "properties": {
                "cloud_name": {
                  "type": "string",
                  "description": "Target cloud",
                  "maxLength": 256
                },
                "ip_address": {
                  "type": "string",
                  "description": "IPv4 address"
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "state": {
                  "type": "string",
                  "description": "Static IP address state",
                  "enum": [
                    "creating",
                    "created",
                    "available",
                    "assigned",
                    "deleting",
                    "deleted"
                  ]
                },
                "static_ip_address_id": {
                  "type": "string",
                  "description": "Static IP address identifier"
                },
                "termination_protection": {
                  "type": "boolean",
                  "description": "Static IP address is protected against deletion"
                }
              },
              "required": [
                "cloud_name",
                "ip_address",
                "service_name",
                "state",
                "static_ip_address_id",
                "termination_protection"
              ]
            }
          }
        },
        "required": [
          "static_ips"
        ]
      },
      "ProjectTicketCreateRequestBody": {
        "type": "object",
        "description": "ProjectTicketCreateRequestBody",
        "properties": {
          "description": {
            "type": "string",
            "description": "Longer description",
            "minLength": 1,
            "maxLength": 32000
          },
          "service_name": {
            "type": "string",
            "description": "Service name",
            "minLength": 1,
            "maxLength": 64
          },
          "severity": {
            "type": "string",
            "description": "Severity level",
            "enum": [
              "critical",
              "high",
              "low"
            ]
          },
          "title": {
            "type": "string",
            "description": "Short description",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "description",
          "severity",
          "title"
        ]
      },
      "ProjectTicketCreateResponse": {
        "type": "object",
        "description": "ProjectTicketCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "ticket": {
            "type": "object",
            "description": "Support ticket",
            "properties": {
              "create_time": {
                "type": "string",
                "description": "Created timestamp, ISO 8601 format",
                "maxLength": 36
              },
              "description": {
                "type": "string",
                "description": "Longer description",
                "minLength": 1,
                "maxLength": 32000
              },
              "followers": {
                "type": "array",
                "description": "Ticket followers",
                "items": {
                  "type": "object",
                  "properties": {
                    "real_name": {
                      "type": "string",
                      "description": "User real name",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "user_id": {
                      "type": "string",
                      "description": "User ID"
                    }
                  },
                  "required": [
                    "real_name",
                    "user_email",
                    "user_id"
                  ]
                }
              },
              "following": {
                "type": "boolean",
                "description": "Whether the current user is following this ticket"
              },
              "project_name": {
                "type": "string",
                "description": "Project name",
                "maxLength": 63
              },
              "service_name": {
                "type": "string",
                "description": "Service name",
                "minLength": 1,
                "maxLength": 64
              },
              "severity": {
                "type": "string",
                "description": "Severity level",
                "enum": [
                  "critical",
                  "high",
                  "low"
                ]
              },
              "state": {
                "type": "string",
                "description": "Is ticket open or closed",
                "enum": [
                  "closed",
                  "open"
                ]
              },
              "submitter": {
                "type": "object",
                "description": "User information",
                "properties": {
                  "real_name": {
                    "type": "string",
                    "description": "User real name",
                    "maxLength": 256
                  },
                  "user_email": {
                    "type": "string",
                    "description": "User email address",
                    "maxLength": 319
                  },
                  "user_id": {
                    "type": "string",
                    "description": "User ID"
                  }
                },
                "required": [
                  "real_name",
                  "user_email",
                  "user_id"
                ]
              },
              "ticket_id": {
                "type": "string",
                "description": "Ticket ID"
              },
              "title": {
                "type": "string",
                "description": "Short description",
                "minLength": 1,
                "maxLength": 255
              },
              "update_time": {
                "type": "string",
                "description": "Update timestamp, ISO 8601 format",
                "maxLength": 36
              },
              "user_email": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              },
              "user_real_name": {
                "type": "string",
                "description": "User real name",
                "maxLength": 256
              }
            },
            "required": [
              "create_time",
              "description",
              "followers",
              "project_name",
              "service_name",
              "severity",
              "state",
              "submitter",
              "ticket_id",
              "title",
              "update_time",
              "user_email",
              "user_real_name"
            ]
          }
        },
        "required": [
          "ticket"
        ]
      },
      "ProjectTicketInviteRequestBody": {
        "type": "object",
        "description": "ProjectTicketInviteRequestBody",
        "properties": {
          "user_email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": [
          "user_email"
        ]
      },
      "ProjectTicketInviteResponse": {
        "type": "object",
        "description": "ProjectTicketInviteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "message"
        ]
      },
      "ProjectTicketListResponse": {
        "type": "object",
        "description": "ProjectTicketListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tickets": {
            "type": "array",
            "description": "List of tickets",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Created timestamp, ISO 8601 format",
                  "maxLength": 36
                },
                "description": {
                  "type": "string",
                  "description": "Longer description",
                  "minLength": 1,
                  "maxLength": 32000
                },
                "followers": {
                  "type": "array",
                  "description": "Ticket followers",
                  "items": {
                    "type": "object",
                    "properties": {
                      "real_name": {
                        "type": "string",
                        "description": "User real name",
                        "maxLength": 256
                      },
                      "user_email": {
                        "type": "string",
                        "description": "User email address",
                        "maxLength": 319
                      },
                      "user_id": {
                        "type": "string",
                        "description": "User ID"
                      }
                    },
                    "required": [
                      "real_name",
                      "user_email",
                      "user_id"
                    ]
                  }
                },
                "following": {
                  "type": "boolean",
                  "description": "Whether the current user is following this ticket"
                },
                "project_name": {
                  "type": "string",
                  "description": "Project name",
                  "maxLength": 63
                },
                "service_name": {
                  "type": "string",
                  "description": "Service name",
                  "minLength": 1,
                  "maxLength": 64
                },
                "severity": {
                  "type": "string",
                  "description": "Severity level",
                  "enum": [
                    "critical",
                    "high",
                    "low"
                  ]
                },
                "state": {
                  "type": "string",
                  "description": "Is ticket open or closed",
                  "enum": [
                    "closed",
                    "open"
                  ]
                },
                "submitter": {
                  "type": "object",
                  "description": "User information",
                  "properties": {
                    "real_name": {
                      "type": "string",
                      "description": "User real name",
                      "maxLength": 256
                    },
                    "user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "user_id": {
                      "type": "string",
                      "description": "User ID"
                    }
                  },
                  "required": [
                    "real_name",
                    "user_email",
                    "user_id"
                  ]
                },
                "ticket_id": {
                  "type": "string",
                  "description": "Ticket ID"
                },
                "title": {
                  "type": "string",
                  "description": "Short description",
                  "minLength": 1,
                  "maxLength": 255
                },
                "update_time": {
                  "type": "string",
                  "description": "Update timestamp, ISO 8601 format",
                  "maxLength": 36
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "user_real_name": {
                  "type": "string",
                  "description": "User real name",
                  "maxLength": 256
                }
              },
              "required": [
                "create_time",
                "description",
                "followers",
                "project_name",
                "service_name",
                "severity",
                "state",
                "submitter",
                "ticket_id",
                "title",
                "update_time",
                "user_email",
                "user_real_name"
              ]
            }
          }
        },
        "required": [
          "tickets"
        ]
      },
      "AccessTokenCreateRequestBody": {
        "type": "object",
        "description": "AccessTokenCreateRequestBody",
        "properties": {
          "description": {
            "type": "string",
            "description": "Name / description of an access token",
            "maxLength": 1000
          },
          "extend_when_used": {
            "type": "boolean",
            "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
          },
          "max_age_seconds": {
            "type": "number",
            "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
            "minimum": 600,
            "maximum": 315360000
          },
          "scopes": {
            "type": "array",
            "description": "Scopes this token is restricted to, if specified",
            "maxItems": 100,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "description"
        ]
      },
      "AccessTokenCreateResponse": {
        "type": "object",
        "description": "AccessTokenCreateResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "Timestamp when the access token was created"
          },
          "created_manually": {
            "type": "boolean",
            "description": "True for tokens explicitly created via the access_tokens API, false for tokens created via login."
          },
          "currently_active": {
            "type": "boolean",
            "description": "true if API request was made with this access token"
          },
          "description": {
            "type": "string",
            "description": "Name / description of an access token",
            "maxLength": 1000
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "expiry_time": {
            "type": "string",
            "description": "Timestamp when the access token will expire unless extended, if ever"
          },
          "extend_when_used": {
            "type": "boolean",
            "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
          },
          "full_token": {
            "type": "string",
            "description": "This full access token can be used to make API calls. This can also be used to update or revoke tokens. Note that when using this token with the update and revoke APIs it must be URL encoded because it may contain /, + and = characters (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
          },
          "last_ip": {
            "type": "string",
            "description": "IP address the access token was last used from in case it has ever been used"
          },
          "last_used_time": {
            "type": "string",
            "description": "Timestamp when the access token was last used, if ever"
          },
          "last_user_agent": {
            "type": "string",
            "description": "User agent string of the client that last used the token in case it has ever been used"
          },
          "last_user_agent_human_readable": {
            "type": "string",
            "description": "Human readable user agent string of the client that last used the token in case user agent is known"
          },
          "max_age_seconds": {
            "type": "number",
            "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
            "minimum": 600,
            "maximum": 315360000
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "scopes": {
            "type": "array",
            "description": "Scopes this token is restricted to, if specified",
            "maxItems": 100,
            "items": {
              "type": "string"
            }
          },
          "token_prefix": {
            "type": "string",
            "description": "First characters of the actual token value. Full value is only exposed after creation. This value is used when updating or revoking tokens. Note that the value may contain /, + and = characters and must be URL encoded when used (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
          }
        },
        "required": [
          "create_time",
          "created_manually",
          "extend_when_used",
          "full_token",
          "max_age_seconds",
          "token_prefix"
        ]
      },
      "AccessTokenListResponse": {
        "type": "object",
        "description": "AccessTokenListResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "tokens": {
            "type": "array",
            "description": "List of access tokens",
            "items": {
              "type": "object",
              "properties": {
                "create_time": {
                  "type": "string",
                  "description": "Timestamp when the access token was created"
                },
                "created_manually": {
                  "type": "boolean",
                  "description": "True for tokens explicitly created via the access_tokens API, false for tokens created via login."
                },
                "currently_active": {
                  "type": "boolean",
                  "description": "true if API request was made with this access token"
                },
                "description": {
                  "type": "string",
                  "description": "Name / description of an access token",
                  "maxLength": 1000
                },
                "expiry_time": {
                  "type": "string",
                  "description": "Timestamp when the access token will expire unless extended, if ever"
                },
                "extend_when_used": {
                  "type": "boolean",
                  "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
                },
                "last_ip": {
                  "type": "string",
                  "description": "IP address the access token was last used from in case it has ever been used"
                },
                "last_used_time": {
                  "type": "string",
                  "description": "Timestamp when the access token was last used, if ever"
                },
                "last_user_agent": {
                  "type": "string",
                  "description": "User agent string of the client that last used the token in case it has ever been used"
                },
                "last_user_agent_human_readable": {
                  "type": "string",
                  "description": "Human readable user agent string of the client that last used the token in case user agent is known"
                },
                "max_age_seconds": {
                  "type": "number",
                  "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
                  "minimum": 600,
                  "maximum": 315360000
                },
                "scopes": {
                  "type": "array",
                  "description": "Scopes this token is restricted to, if specified",
                  "maxItems": 100,
                  "items": {
                    "type": "string"
                  }
                },
                "token_prefix": {
                  "type": "string",
                  "description": "First characters of the actual token value. Full value is only exposed after creation. This value is used when updating or revoking tokens. Note that the value may contain /, + and = characters and must be URL encoded when used (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
                }
              },
              "required": [
                "create_time",
                "created_manually",
                "extend_when_used",
                "max_age_seconds",
                "token_prefix"
              ]
            }
          }
        },
        "required": [
          "tokens"
        ]
      },
      "AccessTokenRevokeResponse": {
        "type": "object",
        "description": "AccessTokenRevokeResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "AccessTokenUpdateRequestBody": {
        "type": "object",
        "description": "AccessTokenUpdateRequestBody",
        "properties": {
          "description": {
            "type": "string",
            "description": "Name / description of an access token",
            "maxLength": 1000
          }
        },
        "required": [
          "description"
        ]
      },
      "AccessTokenUpdateResponse": {
        "type": "object",
        "description": "AccessTokenUpdateResponse",
        "properties": {
          "create_time": {
            "type": "string",
            "description": "Timestamp when the access token was created"
          },
          "created_manually": {
            "type": "boolean",
            "description": "True for tokens explicitly created via the access_tokens API, false for tokens created via login."
          },
          "currently_active": {
            "type": "boolean",
            "description": "true if API request was made with this access token"
          },
          "description": {
            "type": "string",
            "description": "Name / description of an access token",
            "maxLength": 1000
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "expiry_time": {
            "type": "string",
            "description": "Timestamp when the access token will expire unless extended, if ever"
          },
          "extend_when_used": {
            "type": "boolean",
            "description": "Extend token expiration time when token is used. Only applicable if max_age_seconds is specified."
          },
          "last_ip": {
            "type": "string",
            "description": "IP address the access token was last used from in case it has ever been used"
          },
          "last_used_time": {
            "type": "string",
            "description": "Timestamp when the access token was last used, if ever"
          },
          "last_user_agent": {
            "type": "string",
            "description": "User agent string of the client that last used the token in case it has ever been used"
          },
          "last_user_agent_human_readable": {
            "type": "string",
            "description": "Human readable user agent string of the client that last used the token in case user agent is known"
          },
          "max_age_seconds": {
            "type": "number",
            "description": "Time the token remains valid since creation (or since last use if extend_when_used is true)",
            "minimum": 600,
            "maximum": 315360000
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "scopes": {
            "type": "array",
            "description": "Scopes this token is restricted to, if specified",
            "maxItems": 100,
            "items": {
              "type": "string"
            }
          },
          "token_prefix": {
            "type": "string",
            "description": "First characters of the actual token value. Full value is only exposed after creation. This value is used when updating or revoking tokens. Note that the value may contain /, + and = characters and must be URL encoded when used (/ =&gt; %2F, + =&gt; %2B, = =&gt; %3D)."
          }
        },
        "required": [
          "create_time",
          "extend_when_used",
          "max_age_seconds",
          "token_prefix"
        ]
      },
      "CheckPasswordStrengthExistingUserRequestBody": {
        "type": "object",
        "description": "CheckPasswordStrengthExistingUserRequestBody",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "New password",
            "maxLength": 256
          },
          "old_password": {
            "type": "string",
            "description": "User password",
            "maxLength": 256
          }
        },
        "required": [
          "new_password",
          "old_password"
        ]
      },
      "CheckPasswordStrengthExistingUserResponse": {
        "type": "object",
        "description": "CheckPasswordStrengthExistingUserResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "password_strength": {
            "type": "object",
            "description": "Password strength",
            "properties": {
              "is_acceptable": {
                "type": "boolean",
                "description": "True if the password is acceptable"
              },
              "message": {
                "type": "string",
                "description": "Password strength message"
              },
              "score": {
                "type": "integer",
                "description": "Password strength score",
                "minimum": 0,
                "maximum": 4
              }
            },
            "required": [
              "message",
              "score"
            ]
          }
        },
        "required": [
          "password_strength"
        ]
      },
      "CheckPasswordStrengthNewUserRequestBody": {
        "type": "object",
        "description": "CheckPasswordStrengthNewUserRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          },
          "password": {
            "type": "string",
            "description": "New password",
            "maxLength": 256
          },
          "real_name": {
            "type": "string",
            "description": "User real name",
            "maxLength": 256
          }
        },
        "required": [
          "password"
        ]
      },
      "CheckPasswordStrengthNewUserResponse": {
        "type": "object",
        "description": "CheckPasswordStrengthNewUserResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "password_strength": {
            "type": "object",
            "description": "Password strength",
            "properties": {
              "is_acceptable": {
                "type": "boolean",
                "description": "True if the password is acceptable"
              },
              "message": {
                "type": "string",
                "description": "Password strength message"
              },
              "score": {
                "type": "integer",
                "description": "Password strength score",
                "minimum": 0,
                "maximum": 4
              }
            },
            "required": [
              "message",
              "score"
            ]
          }
        },
        "required": [
          "password_strength"
        ]
      },
      "TwoFactorAuthConfigureRequestBody": {
        "type": "object",
        "description": "TwoFactorAuthConfigureRequestBody",
        "properties": {
          "method": {
            "type": "string",
            "description": "Two-factor authentication method being used, if any",
            "maxLength": 32
          },
          "password": {
            "type": "string",
            "description": "Current password",
            "maxLength": 256
          }
        },
        "required": [
          "method",
          "password"
        ]
      },
      "TwoFactorAuthConfigureResponse": {
        "type": "object",
        "description": "TwoFactorAuthConfigureResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "method": {
            "type": "string",
            "description": "Two-factor authentication method being used, if any",
            "maxLength": 32
          },
          "qrcode": {
            "type": "string",
            "description": "QR code describing the TOTP as a base64-encoded PNG"
          },
          "uri": {
            "type": "string",
            "description": "URI describing the TOTP",
            "maxLength": 2048
          }
        },
        "required": [
          "method"
        ]
      },
      "TwoFactorAuthConfigureOTPRequestBody": {
        "type": "object",
        "description": "TwoFactorAuthConfigureOTPRequestBody",
        "properties": {
          "otp": {
            "type": "string",
            "description": "One-time password",
            "maxLength": 6
          },
          "password": {
            "type": "string",
            "description": "Current password",
            "maxLength": 256
          },
          "uri": {
            "type": "string",
            "description": "URI describing the TOTP",
            "maxLength": 2048
          }
        },
        "required": [
          "otp",
          "password",
          "uri"
        ]
      },
      "TwoFactorAuthConfigureOTPResponse": {
        "type": "object",
        "description": "TwoFactorAuthConfigureOTPResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "method": {
            "type": "string",
            "description": "Two-factor authentication method being used, if any",
            "maxLength": 32
          },
          "token": {
            "type": "string",
            "description": "New API session authentication token when configuration is complete"
          }
        },
        "required": [
          "method",
          "token"
        ]
      },
      "UserAccountInvitesAcceptRequestBody": {
        "type": "object",
        "description": "UserAccountInvitesAcceptRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "team_id": {
            "type": "string",
            "description": "Team ID",
            "maxLength": 32
          }
        },
        "required": [
          "account_id"
        ]
      },
      "UserAccountInvitesAcceptResponse": {
        "type": "object",
        "description": "UserAccountInvitesAcceptResponse",
        "properties": {
          "account_invites": {
            "type": "array",
            "description": "List of invites",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_by_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "account_name",
                "create_time",
                "invited_by_user_email",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account_invites"
        ]
      },
      "UserAccountInvitesListResponse": {
        "type": "object",
        "description": "UserAccountInvitesListResponse",
        "properties": {
          "account_invites": {
            "type": "array",
            "description": "List of invites",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_by_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "account_name",
                "create_time",
                "invited_by_user_email",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account_invites"
        ]
      },
      "UserAccountInvitesRejectRequestBody": {
        "type": "object",
        "description": "UserAccountInvitesRejectRequestBody",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID",
            "maxLength": 36
          },
          "team_id": {
            "type": "string",
            "description": "Team ID",
            "maxLength": 32
          }
        },
        "required": [
          "account_id",
          "team_id"
        ]
      },
      "UserAccountInvitesRejectResponse": {
        "type": "object",
        "description": "UserAccountInvitesRejectResponse",
        "properties": {
          "account_invites": {
            "type": "array",
            "description": "List of invites",
            "items": {
              "type": "object",
              "properties": {
                "account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name",
                  "maxLength": 128
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "invited_by_user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                },
                "team_id": {
                  "type": "string",
                  "description": "Team ID",
                  "maxLength": 32
                },
                "team_name": {
                  "type": "string",
                  "description": "Team name",
                  "maxLength": 128
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "account_id",
                "account_name",
                "create_time",
                "invited_by_user_email",
                "team_id",
                "team_name",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "account_invites"
        ]
      },
      "UserAuthRequestBody": {
        "type": "object",
        "description": "UserAuthRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          },
          "otp": {
            "type": "string",
            "description": "One-time password",
            "maxLength": 6
          },
          "password": {
            "type": "string",
            "description": "User password",
            "maxLength": 256
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UserAuthResponse": {
        "type": "object",
        "description": "UserAuthResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "return_url": {
            "type": "string",
            "description": "Return URL"
          },
          "state": {
            "type": "string",
            "description": "User account state"
          },
          "token": {
            "type": "string",
            "description": "API session authentication token"
          },
          "user_email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": [
          "state",
          "token"
        ]
      },
      "UserAuthLoginOptionsRequestBody": {
        "type": "object",
        "description": "UserAuthLoginOptionsRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        }
      },
      "UserAuthLoginOptionsResponse": {
        "type": "object",
        "description": "UserAuthLoginOptionsResponse",
        "properties": {
          "None": {
            "type": "array",
            "description": "List of available login methods",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "action": {
            "type": "string",
            "description": "Action",
            "enum": [
              "azure_oauth",
              "github_oauth",
              "google_oauth",
              "hasura_oauth",
              "password",
              "saml",
              "signup"
            ]
          },
          "method": {
            "type": "string",
            "description": "HTTP method used for redirecting",
            "enum": [
              "POST",
              "GET"
            ]
          },
          "name": {
            "type": "string",
            "description": "Human readable name"
          },
          "redirect_url": {
            "type": "string",
            "description": "Redirect URL for signing in"
          }
        },
        "required": [
          "action"
        ]
      },
      "UserAuthenticationMethodDeleteResponse": {
        "type": "object",
        "description": "UserAuthenticationMethodDeleteResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserAuthenticationMethodsListResponse": {
        "type": "object",
        "description": "UserAuthenticationMethodsListResponse",
        "properties": {
          "authentication_methods": {
            "type": "array",
            "description": "List of linked authentication methods",
            "items": {
              "type": "object",
              "properties": {
                "authentication_method_account_id": {
                  "type": "string",
                  "description": "Account ID",
                  "maxLength": 36
                },
                "create_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "currently_active": {
                  "type": "boolean",
                  "description": "true if API was accessed with this authentication method"
                },
                "delete_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "last_used_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "method_id": {
                  "type": "string",
                  "description": "Unique ID for authentication method"
                },
                "name": {
                  "type": "string",
                  "description": "Authentication method name",
                  "maxLength": 128
                },
                "public_remote_identity": {
                  "type": "string",
                  "description": "Identity on remote provider, if available. May be email address, but not necessarily."
                },
                "remote_provider_id": {
                  "type": "string",
                  "description": "Provider ID"
                },
                "state": {
                  "type": "string",
                  "description": "State for authentication method",
                  "enum": [
                    "active",
                    "deleted"
                  ]
                },
                "update_time": {
                  "type": "string",
                  "description": "Timestamp in ISO 8601 format, always in UTC",
                  "maxLength": 36
                },
                "user_email": {
                  "type": "string",
                  "description": "User email address",
                  "maxLength": 319
                }
              },
              "required": [
                "authentication_method_account_id",
                "create_time",
                "currently_active",
                "delete_time",
                "last_used_time",
                "method_id",
                "public_remote_identity",
                "remote_provider_id",
                "state",
                "update_time",
                "user_email"
              ]
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "authentication_methods"
        ]
      },
      "UserCreateRequestBody": {
        "type": "object",
        "description": "UserCreateRequestBody",
        "properties": {
          "company": {
            "type": "string",
            "description": "Name of a company",
            "maxLength": 128
          },
          "country_code": {
            "type": "string",
            "description": "Two letter country code for country",
            "maxLength": 2
          },
          "credit_code": {
            "type": "string",
            "description": "Credit code",
            "maxLength": 1024
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          },
          "email_communication_categories": {
            "type": "array",
            "description": "Categories of email communication enabled for user during signup",
            "maxItems": 3,
            "items": {
              "type": "string"
            }
          },
          "origin": {
            "type": "string",
            "description": "Origin of the user",
            "maxLength": 1024
          },
          "password": {
            "type": "string",
            "description": "User password",
            "maxLength": 256
          },
          "real_name": {
            "type": "string",
            "description": "User real name",
            "maxLength": 256
          },
          "state": {
            "type": "string",
            "description": "Address state",
            "maxLength": 128
          },
          "token": {
            "type": "string",
            "description": "Signup token for single sign-on linking",
            "maxLength": 4096
          }
        },
        "required": [
          "email",
          "real_name"
        ]
      },
      "UserCreateResponse": {
        "type": "object",
        "description": "UserCreateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "state": {
            "type": "string",
            "description": "User account state"
          },
          "token": {
            "type": "string",
            "description": "API session authentication token"
          },
          "user": {
            "type": "object",
            "description": "User information",
            "properties": {
              "auth": {
                "type": "array",
                "description": "List of user's required authentication methods",
                "items": {
                  "type": "string"
                }
              },
              "country": {
                "type": "string",
                "description": "Country",
                "maxLength": 256
              },
              "create_time": {
                "type": "string",
                "description": "User registration time",
                "maxLength": 36
              },
              "department": {
                "type": "string",
                "description": "Job department",
                "maxLength": 256
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "invitations": {
                "type": "array",
                "description": "List of pending invitations",
                "items": {
                  "type": "object",
                  "properties": {
                    "invite_code": {
                      "type": "string",
                      "description": "Code for accepting the invitation"
                    },
                    "invite_time": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "inviting_user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "project_name": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    }
                  },
                  "required": [
                    "invite_code",
                    "invite_time",
                    "inviting_user_email",
                    "project_name"
                  ]
                }
              },
              "job_title": {
                "type": "string",
                "description": "Job title",
                "maxLength": 256
              },
              "project_membership": {
                "type": "object",
                "description": "Project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "string",
                    "description": "Project member type",
                    "enum": [
                      "admin",
                      "developer",
                      "operator",
                      "read_only"
                    ]
                  }
                }
              },
              "project_memberships": {
                "type": "object",
                "description": "List of project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "array",
                    "description": "List of project member type",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "projects": {
                "type": "array",
                "description": "List of projects the user is a member of",
                "items": {
                  "type": "string"
                }
              },
              "real_name": {
                "type": "string",
                "description": "User real name",
                "maxLength": 256
              },
              "signup_isocountry": {
                "type": "string",
                "description": "Geolocated signup country"
              },
              "state": {
                "type": "string",
                "description": "User account state"
              },
              "token_validity_begin": {
                "type": "string",
                "description": "Earliest valid authentication token timestamp",
                "maxLength": 36
              },
              "user": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              },
              "user_id": {
                "type": "string",
                "description": "User ID"
              }
            },
            "required": [
              "auth",
              "invitations",
              "project_membership",
              "projects",
              "real_name",
              "state",
              "user"
            ]
          },
          "user_email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": [
          "token",
          "user"
        ]
      },
      "UserExpireTokensResponse": {
        "type": "object",
        "description": "UserExpireTokensResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserInfoResponse": {
        "type": "object",
        "description": "UserInfoResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user": {
            "type": "object",
            "description": "User information",
            "properties": {
              "auth": {
                "type": "array",
                "description": "List of user's required authentication methods",
                "items": {
                  "type": "string"
                }
              },
              "country": {
                "type": "string",
                "description": "Country",
                "maxLength": 256
              },
              "create_time": {
                "type": "string",
                "description": "User registration time",
                "maxLength": 36
              },
              "department": {
                "type": "string",
                "description": "Job department",
                "maxLength": 256
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "intercom": {
                "type": "object",
                "description": "Intercom settings",
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "Intercom application ID"
                  },
                  "hmac": {
                    "type": "string",
                    "description": "Intercom authentication HMAC"
                  }
                },
                "required": [
                  "app_id",
                  "hmac"
                ]
              },
              "invitations": {
                "type": "array",
                "description": "List of pending invitations",
                "items": {
                  "type": "object",
                  "properties": {
                    "invite_code": {
                      "type": "string",
                      "description": "Code for accepting the invitation"
                    },
                    "invite_time": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "inviting_user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "project_name": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    }
                  },
                  "required": [
                    "invite_code",
                    "invite_time",
                    "inviting_user_email",
                    "project_name"
                  ]
                }
              },
              "job_title": {
                "type": "string",
                "description": "Job title",
                "maxLength": 256
              },
              "project_membership": {
                "type": "object",
                "description": "Project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "string",
                    "description": "Project member type",
                    "enum": [
                      "admin",
                      "developer",
                      "operator",
                      "read_only"
                    ]
                  }
                }
              },
              "project_memberships": {
                "type": "object",
                "description": "List of project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "array",
                    "description": "List of project member type",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "projects": {
                "type": "array",
                "description": "List of projects the user is a member of",
                "items": {
                  "type": "string"
                }
              },
              "real_name": {
                "type": "string",
                "description": "User real name",
                "maxLength": 256
              },
              "signup_isocountry": {
                "type": "string",
                "description": "Geolocated signup country"
              },
              "state": {
                "type": "string",
                "description": "User account state"
              },
              "token_validity_begin": {
                "type": "string",
                "description": "Earliest valid authentication token timestamp",
                "maxLength": 36
              },
              "user": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              },
              "user_id": {
                "type": "string",
                "description": "User ID"
              }
            },
            "required": [
              "auth",
              "intercom",
              "invitations",
              "project_membership",
              "projects",
              "real_name",
              "state",
              "user"
            ]
          }
        },
        "required": [
          "user"
        ]
      },
      "UserLogoutResponse": {
        "type": "object",
        "description": "UserLogoutResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserPasswordChangeRequestBody": {
        "type": "object",
        "description": "UserPasswordChangeRequestBody",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "New password",
            "maxLength": 256
          },
          "password": {
            "type": "string",
            "description": "Current password",
            "maxLength": 256
          }
        },
        "required": [
          "new_password",
          "password"
        ]
      },
      "UserPasswordChangeResponse": {
        "type": "object",
        "description": "UserPasswordChangeResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "token": {
            "type": "string",
            "description": "API session authentication token"
          }
        },
        "required": [
          "token"
        ]
      },
      "UserPasswordResetRequestBody": {
        "type": "object",
        "description": "UserPasswordResetRequestBody",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "New password",
            "maxLength": 256
          }
        },
        "required": [
          "new_password"
        ]
      },
      "UserPasswordResetResponse": {
        "type": "object",
        "description": "UserPasswordResetResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserPasswordResetRequestRequestBody": {
        "type": "object",
        "description": "UserPasswordResetRequestRequestBody",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "maxLength": 319
          }
        },
        "required": [
          "email"
        ]
      },
      "UserPasswordResetRequestResponse": {
        "type": "object",
        "description": "UserPasswordResetRequestResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      },
      "UserUpdateRequestBody": {
        "type": "object",
        "description": "UserUpdateRequestBody",
        "properties": {
          "country": {
            "type": "string",
            "description": "Country",
            "maxLength": 256
          },
          "department": {
            "type": "string",
            "description": "Job department",
            "maxLength": 256
          },
          "job_title": {
            "type": "string",
            "description": "Job title",
            "maxLength": 256
          },
          "real_name": {
            "type": "string",
            "description": "User real name",
            "maxLength": 256
          }
        },
        "required": [
          "real_name"
        ]
      },
      "UserUpdateResponse": {
        "type": "object",
        "description": "UserUpdateResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          },
          "user": {
            "type": "object",
            "description": "User information",
            "properties": {
              "auth": {
                "type": "array",
                "description": "List of user's required authentication methods",
                "items": {
                  "type": "string"
                }
              },
              "country": {
                "type": "string",
                "description": "Country",
                "maxLength": 256
              },
              "create_time": {
                "type": "string",
                "description": "User registration time",
                "maxLength": 36
              },
              "department": {
                "type": "string",
                "description": "Job department",
                "maxLength": 256
              },
              "features": {
                "type": "object",
                "description": "Feature flags",
                "properties": {}
              },
              "intercom": {
                "type": "object",
                "description": "Intercom settings",
                "properties": {
                  "app_id": {
                    "type": "string",
                    "description": "Intercom application ID"
                  },
                  "hmac": {
                    "type": "string",
                    "description": "Intercom authentication HMAC"
                  }
                },
                "required": [
                  "app_id",
                  "hmac"
                ]
              },
              "invitations": {
                "type": "array",
                "description": "List of pending invitations",
                "items": {
                  "type": "object",
                  "properties": {
                    "invite_code": {
                      "type": "string",
                      "description": "Code for accepting the invitation"
                    },
                    "invite_time": {
                      "type": "string",
                      "description": "Timestamp in ISO 8601 format, always in UTC",
                      "maxLength": 36
                    },
                    "inviting_user_email": {
                      "type": "string",
                      "description": "User email address",
                      "maxLength": 319
                    },
                    "project_name": {
                      "type": "string",
                      "description": "Project name",
                      "maxLength": 63
                    }
                  },
                  "required": [
                    "invite_code",
                    "invite_time",
                    "inviting_user_email",
                    "project_name"
                  ]
                }
              },
              "job_title": {
                "type": "string",
                "description": "Job title",
                "maxLength": 256
              },
              "project_membership": {
                "type": "object",
                "description": "Project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "string",
                    "description": "Project member type",
                    "enum": [
                      "admin",
                      "developer",
                      "operator",
                      "read_only"
                    ]
                  }
                }
              },
              "project_memberships": {
                "type": "object",
                "description": "List of project membership and type of membership",
                "properties": {
                  "ANY": {
                    "type": "array",
                    "description": "List of project member type",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "projects": {
                "type": "array",
                "description": "List of projects the user is a member of",
                "items": {
                  "type": "string"
                }
              },
              "real_name": {
                "type": "string",
                "description": "User real name",
                "maxLength": 256
              },
              "signup_isocountry": {
                "type": "string",
                "description": "Geolocated signup country"
              },
              "state": {
                "type": "string",
                "description": "User account state"
              },
              "token_validity_begin": {
                "type": "string",
                "description": "Earliest valid authentication token timestamp",
                "maxLength": 36
              },
              "user": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              },
              "user_id": {
                "type": "string",
                "description": "User ID"
              }
            },
            "required": [
              "auth",
              "intercom",
              "invitations",
              "project_membership",
              "projects",
              "real_name",
              "state",
              "user"
            ]
          }
        },
        "required": [
          "user"
        ]
      },
      "UserVerifyEmailResponse": {
        "type": "object",
        "description": "UserVerifyEmailResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "invite_details": {
            "type": "object",
            "description": "Details of verified invite",
            "properties": {
              "user_email": {
                "type": "string",
                "description": "User email address",
                "maxLength": 319
              }
            },
            "required": [
              "user_email"
            ]
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        },
        "required": [
          "invite_details"
        ]
      },
      "ValidateCreditCodeResponse": {
        "type": "object",
        "description": "ValidateCreditCodeResponse",
        "properties": {
          "errors": {
            "type": "array",
            "description": "List of errors occurred during request processing",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Printable error message"
                },
                "more_info": {
                  "type": "string",
                  "description": "URL to the documentation of the error"
                },
                "status": {
                  "type": "integer",
                  "description": "HTTP error status code"
                }
              },
              "required": [
                "message",
                "status"
              ]
            }
          },
          "message": {
            "type": "string",
            "description": "Printable result of the request"
          }
        }
      }
    },
    "responses": {},
    "requestBodies": {},
    "parameters": {
      "account_id": {
        "in": "path",
        "name": "account_id",
        "description": "Account ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "account_authentication_method_id": {
        "in": "path",
        "name": "account_authentication_method_id",
        "description": "Account authentication method ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "project_name": {
        "in": "path",
        "name": "project_name",
        "description": "Project name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "team_id": {
        "in": "path",
        "name": "team_id",
        "description": "Team ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "user_email": {
        "in": "path",
        "name": "user_email",
        "description": "Email address",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "invite_verification_code": {
        "in": "path",
        "name": "invite_verification_code",
        "description": "Verification code received via email",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "user_id": {
        "in": "path",
        "name": "user_id",
        "description": "User ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "project": {
        "in": "path",
        "name": "project",
        "description": "Project name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "billing_group": {
        "in": "path",
        "name": "billing_group",
        "description": "Billing group id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "invoice_number": {
        "in": "path",
        "name": "invoice_number",
        "description": "Invoice number",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "billinggroupinvoicecsvget_cookie": {
        "in": "query",
        "name": "cookie",
        "description": "Download cookie signature.",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "billinggroupinvoicecsvget_project": {
        "in": "query",
        "name": "project",
        "description": "Project name. Only required if the provided cookie comes from the Project Billing API.",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "download_cookie": {
        "in": "path",
        "name": "download_cookie",
        "description": "Authentication cookie for file download",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "tenant": {
        "in": "path",
        "name": "tenant",
        "description": "Aiven tenant ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "card_id": {
        "in": "path",
        "name": "card_id",
        "description": "Credit card ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "file_format": {
        "in": "path",
        "name": "file_format",
        "description": "of the SBOM report",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "invited_email": {
        "in": "path",
        "name": "invited_email",
        "description": "Email address of user to be invited",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "project_vpc_id": {
        "in": "path",
        "name": "project_vpc_id",
        "description": "Project VPC ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "peer_cloud_account": {
        "in": "path",
        "name": "peer_cloud_account",
        "description": "AWS account ID, Google project name, or Azure subscription ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "peer_vpc": {
        "in": "path",
        "name": "peer_vpc",
        "description": "AWS VPC-ID, Google network name, or Azure VNet name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "peer_region": {
        "in": "path",
        "name": "peer_region",
        "description": "AWS region",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "peer_resource_group": {
        "in": "path",
        "name": "peer_resource_group",
        "description": "Azure resource group",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "service_name": {
        "in": "path",
        "name": "service_name",
        "description": "Service name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "database": {
        "in": "path",
        "name": "database",
        "description": "Database name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "serviceclickhousequerystats_limit": {
        "in": "query",
        "name": "limit",
        "description": "Limit for number of results",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 100
        },
        "required": false
      },
      "serviceclickhousequerystats_offset": {
        "in": "query",
        "name": "offset",
        "description": "Offset for retrieved results based on sort order",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "required": false
      },
      "serviceclickhousequerystats_order_by": {
        "in": "query",
        "name": "order_by",
        "description": "Order in which to sort retrieved results",
        "schema": {
          "type": "string",
          "default": "total_time:desc",
          "enum": [
            "calls:asc",
            "calls:desc",
            "min_time:asc",
            "min_time:desc",
            "max_time:asc",
            "max_time:desc",
            "mean_time:asc",
            "mean_time:desc",
            "p95_time:asc",
            "p95_time:desc",
            "stddev_time:asc",
            "stddev_time:desc",
            "total_time:asc",
            "total_time:desc"
          ]
        },
        "required": false
      },
      "index_name": {
        "in": "path",
        "name": "index_name",
        "description": "Elasticsearch index name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "application_id": {
        "in": "path",
        "name": "application_id",
        "description": "Application Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "query_id": {
        "in": "path",
        "name": "query_id",
        "description": "Query Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "deployment_id": {
        "in": "path",
        "name": "deployment_id",
        "description": "Deployment Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "application_version_id": {
        "in": "path",
        "name": "application_version_id",
        "description": "ApplicationVersion Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "job_id": {
        "in": "path",
        "name": "job_id",
        "description": "Job Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "kafka_acl_id": {
        "in": "path",
        "name": "kafka_acl_id",
        "description": "Kafka ACL ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "connector_name": {
        "in": "path",
        "name": "connector_name",
        "description": "Connector name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "task_id": {
        "in": "path",
        "name": "task_id",
        "description": "Service task",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "topic_name": {
        "in": "path",
        "name": "topic_name",
        "description": "Kafka topic name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "schema_registry_acl_id": {
        "in": "path",
        "name": "schema_registry_acl_id",
        "description": "Kafka Schema Registry ACL ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "subject_name": {
        "in": "path",
        "name": "subject_name",
        "description": "Subject name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "schema_id": {
        "in": "path",
        "name": "schema_id",
        "description": "Schema Id",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "source_cluster": {
        "in": "path",
        "name": "source_cluster",
        "description": "Source cluster alias",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "target_cluster": {
        "in": "path",
        "name": "target_cluster",
        "description": "Target cluster alias",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "pool_name": {
        "in": "path",
        "name": "pool_name",
        "description": "PgBouncer connection pool name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "dbname": {
        "in": "path",
        "name": "dbname",
        "description": "DatabaseName",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "ca_name": {
        "in": "path",
        "name": "ca_name",
        "description": "CA name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "keypair_name": {
        "in": "path",
        "name": "keypair_name",
        "description": "Keypair name",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "privatelink_connection_id": {
        "in": "path",
        "name": "privatelink_connection_id",
        "description": "Privatelink connection ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "service_username": {
        "in": "path",
        "name": "service_username",
        "description": "Service username",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "integration_id": {
        "in": "path",
        "name": "integration_id",
        "description": "Integration ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "integration_endpoint_id": {
        "in": "path",
        "name": "integration_endpoint_id",
        "description": "Endpoint ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "static_ip_address_id": {
        "in": "path",
        "name": "static_ip_address_id",
        "description": "Static IP address identifier",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "ticket_id": {
        "in": "path",
        "name": "ticket_id",
        "description": "Ticket ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "token_prefix": {
        "in": "path",
        "name": "token_prefix",
        "description": "Access token prefix",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "user_authentication_method_id": {
        "in": "path",
        "name": "user_authentication_method_id",
        "description": "User authentication method ID",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "verification_code": {
        "in": "path",
        "name": "verification_code",
        "description": "Verification code received via email",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "credit_code": {
        "in": "path",
        "name": "credit_code",
        "description": "Credit Code",
        "schema": {
          "type": "string"
        },
        "required": true
      }
    },
    "securitySchemes": {
      "tokenAuth": {
        "description": "Header should be of the format `authorization: aivenv1 <TOKEN>`. Tokens can be obtained from [your Aiven profile page](https://console.aiven.io/profile/auth)",
        "scheme": "bearer",
        "type": "http"
      },
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 security scheme",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://console.aiven.io/oauth/authorize",
            "tokenUrl": "https://api.aiven.io/v1/oauth2/token",
            "scopes": {
              "all": "Provide full access to the API",
              "accounts": "Allow enumerating and reading accounts configuration",
              "accounts:read": "Allow modifying account configuration",
              "accounts:write": "Provides full access to authentication related API",
              "authentication": "Provides full access to authentication related API",
              "authentication:read": "Allow reading authentication related configuration on resources (user profile, accounts)",
              "authentication:write": "Allow modifying authentication related configurations on resources (user profile, accounts)",
              "billing": "Provide full access to billing APIs",
              "billing:read": "Allow reading billing information and configuration",
              "billing:write": "Allow writing billing configuration",
              "payments": "Provide full access to payment method APIs",
              "payments:read": "Allow reading the payment method configurations",
              "payments:write": "Allows writing payment method configuration",
              "privatelink": "Provide full access to private link APIs",
              "privatelink:read": "Allow enumerating and reading private link items and configurations",
              "privatelink:write": "Allow writing (creating, modifying, deleting) private link items",
              "projects": "Provide full access to projects APIs",
              "projects:read": "Allow enumerating projects and reading their configuration",
              "projects:write": "Allow writing (creating, modifying, deleting) projects",
              "scim": "Provide full access to SCIM operations",
              "scim:read": "Allow reading SCIM endpoints",
              "scim:write": "Allow writing (modifying) SCIM endpoints",
              "services": "Provide full access to services APIs",
              "services:read": "Allow enumerating services and reading their configuration",
              "services:write": "Allow writing (creating, modifying, deleting) services",
              "static_ips": "Provide full access to static IPs APIs",
              "static_ips:read": "Allow enumerating and reading static IP items and configurations",
              "static_ips:write": "Allow writing (creating, modifying, deleting) static IP items",
              "tickets": "Provide full access to support ticket APIs",
              "tickets:read": "Allow enumerating and reading support tickets",
              "tickets:write": "Allow writing (creating, modifying) support tickets",
              "user": "Provide full access to user profile APIs",
              "user:read": "Allow reading user profile and configuration",
              "user:write": "Allow writing (modifying) user profile and configuration"
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find our CLI documentation here",
    "url": "https://github.com/aiven/aiven-client"
  },
  "info": {
    "contact": {
      "email": "support@aiven.io",
      "name": "Aiven Support",
      "url": "https://docs.aiven.io"
    },
    "title": "Aiven API Documentation",
    "version": "v1",
    "x-logo": {
      "altText": "Aiven logo",
      "backgroundColor": "#FFFFFF",
      "href": "https://docs.aiven.io",
      "url": "https://aiven.io/assets/img/aiven-logo.png"
    },
    "description": "# Introduction\n\nAiven enables you to accelerate application innovation through a modern, fully-managed open source data infrastructure immediately deployable in public clouds, including Amazon Web Services, Google Cloud Platform, and Microsoft Azure.\n\nIf you do not have an account yet, sign up now at [aiven.io](https://aiven.io) and get started with $300 free credits. No credit card required.\n\n# Description\n\nThe Aiven REST API provides access to [aiven.io](https://aiven.io) services. All requests and responses are in `JSON` format and all requests must have their `content-type` header set to `application/json`: `content-type: application/json`\n\nYou might also be interested in our [Terraform Provider](https://github.com/aiven/terraform-provider-aiven) to automate your Aiven deployments or our [Command Line Client](https://github.com/aiven/aiven-client).\n\nOur open source efforts are on [Github](https://github.com/aiven) and we are always looking for contributors!\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# Errors\n\nWhen working with the Aiven API you may encounter different error responses when you attempt to perform operations that can fail. For example, trying to enable writes for a database that has been powered off would lead to the following error response:\n\n```json\n{\n  \"message\": \"Database not powered on\",\n  \"errors\": [\n    {\n      \"message\": \"Database not powered on\",\n      \"status\": 409,\n      \"error_code\": \"not_powered\"\n    }\n  ]\n}\n```\n\n## Error codes\n\nMachine-readable `error_code` fields will be progressively added to our endpoints to allow you to identify different failure cases programmatically. Current supported values are listed below:\n\n- `backup_failed`\n- `not_powered`\n- `team_names_must_be_unique`\n- `account_not_found`\n- `organization_not_found`\n- `root_account_required`\n- `account_already_has_organization`\n- `orphaned_project_not_allowed`\n- `account_team_not_found`\n- `parent_account_not_found`\n- `account_already_exists`\n- `account_must_have_enabled_authentication_method`\n- `user_not_account_owner`\n- `user_not_found`\n- `tenant_mismatch`\n- `billing_group_owning_account_must_be_organization`\n- `stripe_customer_owning_account_must_be_organization`\n- `user_not_account_owner_of_billing_group`\n- `user_not_account_owner_of_parent_account`\n- `user_not_admin_of_account_billing_group`\n- `account_and_project_do_not_match`\n- `account_cannot_be_own_ancestor`\n- `account_with_projects_cannot_be_deleted`\n- `account_with_child_accounts_cannot_be_deleted`\n- `user_groups_must_be_from_same_account`\n- `user_groups_belong_to_different_accounts`\n- `users_belong_to_different_tenant_from_user_group_account`\n- `nested_account_cannot_have_authentication_method`\n- `nested_account_cannot_have_user_groups`\n- `parent_account_too_deep`\n- `parent_account_tenant_invalid`\n- `parent_account_cannot_be_own_ancestor`\n- `project_without_billing_group_must_be_assigned_from_account`\n- `project_belongs_to_account_billing_group_must_use_api`\n- `project_account_not_active`\n- `account_and_project_must_belong_same_tenant`\n- `user_not_signed_in_with_account_authentication_method`\n- `user_has_to_sign_in_with_non_account_authentication_method`\n- `user_has_no_access_to_project_with_current_authentication_method`\n- `account_unit_cannot_have_billing_group`\n- `organization_cannot_exist_without_root_account`\n- `support_contract_and_account_must_be_in_same_organization`\n- `billing_address_not_found`\n- `action_forbidden_for_marketplace_users`\n- `user_already_in_organization`\n- `invitation_not_found`\n- `invitation_expired`\n- `credit_card_not_found`\n- `support_contract_must_have_billing_group`\n"
  },
  "openapi": "3.0.1",
  "paths": {
    "/account/{account_id}/authentication": {
      "post": {
        "summary": "Create a new authentication method",
        "tags": [
          "Account"
        ],
        "operationId": "AccountAuthenticationMethodCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAuthenticationMethodCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    authentication_method_name: 'string',\n    authentication_method_type: 'internal',\n    auto_join_team_id: 'string',\n    saml_assertion_signed_enabled: true,\n    saml_authn_requests_signed_enabled: true,\n    saml_certificate: 'string',\n    saml_digest_algorithm: 'sha1',\n    saml_entity_id: 'string',\n    saml_field_mapping: {\n      email: 'string',\n      first_name: 'string',\n      identity: 'string',\n      last_name: 'string',\n      real_name: 'string'\n    },\n    saml_idp_login_allowed: true,\n    saml_idp_url: 'string',\n    saml_requested_authn_context_enabled: true,\n    saml_signature_algorithm: 'rsa-sha1',\n    saml_variant: 'adfs'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"authentication_method_name\":\"string\",\"authentication_method_type\":\"internal\",\"auto_join_team_id\":\"string\",\"saml_assertion_signed_enabled\":true,\"saml_authn_requests_signed_enabled\":true,\"saml_certificate\":\"string\",\"saml_digest_algorithm\":\"sha1\",\"saml_entity_id\":\"string\",\"saml_field_mapping\":{\"email\":\"string\",\"first_name\":\"string\",\"identity\":\"string\",\"last_name\":\"string\",\"real_name\":\"string\"},\"saml_idp_login_allowed\":true,\"saml_idp_url\":\"string\",\"saml_requested_authn_context_enabled\":true,\"saml_signature_algorithm\":\"rsa-sha1\",\"saml_variant\":\"adfs\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"authentication_method_name\":\"string\",\"authentication_method_type\":\"internal\",\"auto_join_team_id\":\"string\",\"saml_assertion_signed_enabled\":true,\"saml_authn_requests_signed_enabled\":true,\"saml_certificate\":\"string\",\"saml_digest_algorithm\":\"sha1\",\"saml_entity_id\":\"string\",\"saml_field_mapping\":{\"email\":\"string\",\"first_name\":\"string\",\"identity\":\"string\",\"last_name\":\"string\",\"real_name\":\"string\"},\"saml_idp_login_allowed\":true,\"saml_idp_url\":\"string\",\"saml_requested_authn_context_enabled\":true,\"saml_signature_algorithm\":\"rsa-sha1\",\"saml_variant\":\"adfs\"}' |  \\\n  http POST https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"authentication_method_name\\\":\\\"string\\\",\\\"authentication_method_type\\\":\\\"internal\\\",\\\"auto_join_team_id\\\":\\\"string\\\",\\\"saml_assertion_signed_enabled\\\":true,\\\"saml_authn_requests_signed_enabled\\\":true,\\\"saml_certificate\\\":\\\"string\\\",\\\"saml_digest_algorithm\\\":\\\"sha1\\\",\\\"saml_entity_id\\\":\\\"string\\\",\\\"saml_field_mapping\\\":{\\\"email\\\":\\\"string\\\",\\\"first_name\\\":\\\"string\\\",\\\"identity\\\":\\\"string\\\",\\\"last_name\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\"},\\\"saml_idp_login_allowed\\\":true,\\\"saml_idp_url\\\":\\\"string\\\",\\\"saml_requested_authn_context_enabled\\\":true,\\\"saml_signature_algorithm\\\":\\\"rsa-sha1\\\",\\\"saml_variant\\\":\\\"adfs\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/account/%7Baccount_id%7D/authentication\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"authentication_method_name\\\":\\\"string\\\",\\\"authentication_method_type\\\":\\\"internal\\\",\\\"auto_join_team_id\\\":\\\"string\\\",\\\"saml_assertion_signed_enabled\\\":true,\\\"saml_authn_requests_signed_enabled\\\":true,\\\"saml_certificate\\\":\\\"string\\\",\\\"saml_digest_algorithm\\\":\\\"sha1\\\",\\\"saml_entity_id\\\":\\\"string\\\",\\\"saml_field_mapping\\\":{\\\"email\\\":\\\"string\\\",\\\"first_name\\\":\\\"string\\\",\\\"identity\\\":\\\"string\\\",\\\"last_name\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\"},\\\"saml_idp_login_allowed\\\":true,\\\"saml_idp_url\\\":\\\"string\\\",\\\"saml_requested_authn_context_enabled\\\":true,\\\"saml_signature_algorithm\\\":\\\"rsa-sha1\\\",\\\"saml_variant\\\":\\\"adfs\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"authentication_method_name\":\"string\",\"authentication_method_type\":\"internal\",\"auto_join_team_id\":\"string\",\"saml_assertion_signed_enabled\":true,\"saml_authn_requests_signed_enabled\":true,\"saml_certificate\":\"string\",\"saml_digest_algorithm\":\"sha1\",\"saml_entity_id\":\"string\",\"saml_field_mapping\":{\"email\":\"string\",\"first_name\":\"string\",\"identity\":\"string\",\"last_name\":\"string\",\"real_name\":\"string\"},\"saml_idp_login_allowed\":true,\"saml_idp_url\":\"string\",\"saml_requested_authn_context_enabled\":true,\"saml_signature_algorithm\":\"rsa-sha1\",\"saml_variant\":\"adfs\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"authentication_method_name\":\"string\",\"authentication_method_type\":\"internal\",\"auto_join_team_id\":\"string\",\"saml_assertion_signed_enabled\":true,\"saml_authn_requests_signed_enabled\":true,\"saml_certificate\":\"string\",\"saml_digest_algorithm\":\"sha1\",\"saml_entity_id\":\"string\",\"saml_field_mapping\":{\"email\":\"string\",\"first_name\":\"string\",\"identity\":\"string\",\"last_name\":\"string\",\"real_name\":\"string\"},\"saml_idp_login_allowed\":true,\"saml_idp_url\":\"string\",\"saml_requested_authn_context_enabled\":true,\"saml_signature_algorithm\":\"rsa-sha1\",\"saml_variant\":\"adfs\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List authentication methods",
        "tags": [
          "Account"
        ],
        "operationId": "AccountAuthenticationMethodsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read",
              "authentication:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/authentication\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/authentication/{account_authentication_method_id}": {
      "delete": {
        "summary": "Delete authentication method",
        "tags": [
          "Account"
        ],
        "operationId": "AccountAuthenticationMethodDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/account_authentication_method_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get details of a single authentication method",
        "tags": [
          "Account"
        ],
        "operationId": "AccountAuthenticationMethodGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/account_authentication_method_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read",
              "authentication:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update authentication method",
        "tags": [
          "Account"
        ],
        "operationId": "AccountAuthenticationMethodUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/account_authentication_method_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAuthenticationMethodUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuthenticationMethodUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    authentication_method_enabled: true,\n    authentication_method_name: 'string',\n    auto_join_team_id: 'string',\n    saml_assertion_signed_enabled: true,\n    saml_authn_requests_signed_enabled: true,\n    saml_certificate: 'string',\n    saml_digest_algorithm: 'sha1',\n    saml_entity_id: 'string',\n    saml_field_mapping: {\n      email: 'string',\n      first_name: 'string',\n      identity: 'string',\n      last_name: 'string',\n      real_name: 'string'\n    },\n    saml_idp_login_allowed: true,\n    saml_idp_url: 'string',\n    saml_requested_authn_context_enabled: true,\n    saml_signature_algorithm: 'rsa-sha1',\n    saml_variant: 'adfs'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"authentication_method_enabled\":true,\"authentication_method_name\":\"string\",\"auto_join_team_id\":\"string\",\"saml_assertion_signed_enabled\":true,\"saml_authn_requests_signed_enabled\":true,\"saml_certificate\":\"string\",\"saml_digest_algorithm\":\"sha1\",\"saml_entity_id\":\"string\",\"saml_field_mapping\":{\"email\":\"string\",\"first_name\":\"string\",\"identity\":\"string\",\"last_name\":\"string\",\"real_name\":\"string\"},\"saml_idp_login_allowed\":true,\"saml_idp_url\":\"string\",\"saml_requested_authn_context_enabled\":true,\"saml_signature_algorithm\":\"rsa-sha1\",\"saml_variant\":\"adfs\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"authentication_method_enabled\":true,\"authentication_method_name\":\"string\",\"auto_join_team_id\":\"string\",\"saml_assertion_signed_enabled\":true,\"saml_authn_requests_signed_enabled\":true,\"saml_certificate\":\"string\",\"saml_digest_algorithm\":\"sha1\",\"saml_entity_id\":\"string\",\"saml_field_mapping\":{\"email\":\"string\",\"first_name\":\"string\",\"identity\":\"string\",\"last_name\":\"string\",\"real_name\":\"string\"},\"saml_idp_login_allowed\":true,\"saml_idp_url\":\"string\",\"saml_requested_authn_context_enabled\":true,\"saml_signature_algorithm\":\"rsa-sha1\",\"saml_variant\":\"adfs\"}' |  \\\n  http PUT https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"authentication_method_enabled\\\":true,\\\"authentication_method_name\\\":\\\"string\\\",\\\"auto_join_team_id\\\":\\\"string\\\",\\\"saml_assertion_signed_enabled\\\":true,\\\"saml_authn_requests_signed_enabled\\\":true,\\\"saml_certificate\\\":\\\"string\\\",\\\"saml_digest_algorithm\\\":\\\"sha1\\\",\\\"saml_entity_id\\\":\\\"string\\\",\\\"saml_field_mapping\\\":{\\\"email\\\":\\\"string\\\",\\\"first_name\\\":\\\"string\\\",\\\"identity\\\":\\\"string\\\",\\\"last_name\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\"},\\\"saml_idp_login_allowed\\\":true,\\\"saml_idp_url\\\":\\\"string\\\",\\\"saml_requested_authn_context_enabled\\\":true,\\\"saml_signature_algorithm\\\":\\\"rsa-sha1\\\",\\\"saml_variant\\\":\\\"adfs\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"authentication_method_enabled\\\":true,\\\"authentication_method_name\\\":\\\"string\\\",\\\"auto_join_team_id\\\":\\\"string\\\",\\\"saml_assertion_signed_enabled\\\":true,\\\"saml_authn_requests_signed_enabled\\\":true,\\\"saml_certificate\\\":\\\"string\\\",\\\"saml_digest_algorithm\\\":\\\"sha1\\\",\\\"saml_entity_id\\\":\\\"string\\\",\\\"saml_field_mapping\\\":{\\\"email\\\":\\\"string\\\",\\\"first_name\\\":\\\"string\\\",\\\"identity\\\":\\\"string\\\",\\\"last_name\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\"},\\\"saml_idp_login_allowed\\\":true,\\\"saml_idp_url\\\":\\\"string\\\",\\\"saml_requested_authn_context_enabled\\\":true,\\\"saml_signature_algorithm\\\":\\\"rsa-sha1\\\",\\\"saml_variant\\\":\\\"adfs\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"authentication_method_enabled\":true,\"authentication_method_name\":\"string\",\"auto_join_team_id\":\"string\",\"saml_assertion_signed_enabled\":true,\"saml_authn_requests_signed_enabled\":true,\"saml_certificate\":\"string\",\"saml_digest_algorithm\":\"sha1\",\"saml_entity_id\":\"string\",\"saml_field_mapping\":{\"email\":\"string\",\"first_name\":\"string\",\"identity\":\"string\",\"last_name\":\"string\",\"real_name\":\"string\"},\"saml_idp_login_allowed\":true,\"saml_idp_url\":\"string\",\"saml_requested_authn_context_enabled\":true,\"saml_signature_algorithm\":\"rsa-sha1\",\"saml_variant\":\"adfs\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"authentication_method_enabled\":true,\"authentication_method_name\":\"string\",\"auto_join_team_id\":\"string\",\"saml_assertion_signed_enabled\":true,\"saml_authn_requests_signed_enabled\":true,\"saml_certificate\":\"string\",\"saml_digest_algorithm\":\"sha1\",\"saml_entity_id\":\"string\",\"saml_field_mapping\":{\"email\":\"string\",\"first_name\":\"string\",\"identity\":\"string\",\"last_name\":\"string\",\"real_name\":\"string\"},\"saml_idp_login_allowed\":true,\"saml_idp_url\":\"string\",\"saml_requested_authn_context_enabled\":true,\"saml_signature_algorithm\":\"rsa-sha1\",\"saml_variant\":\"adfs\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/authentication/%7Baccount_authentication_method_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/billing-group": {
      "get": {
        "summary": "List account billing groups",
        "tags": [
          "Account"
        ],
        "operationId": "AccountBillingGroupList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBillingGroupListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read",
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/billing-group',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/billing-group \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/billing-group \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/billing-group\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/billing-group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/billing-group');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/billing-group');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account": {
      "post": {
        "summary": "Create a new account",
        "tags": [
          "Account"
        ],
        "operationId": "AccountCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/account',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    account_name: 'string',\n    parent_account_id: 'string',\n    primary_billing_group_id: 'stringstringstringstringstringstring'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"account_name\":\"string\",\"parent_account_id\":\"string\",\"primary_billing_group_id\":\"stringstringstringstringstringstring\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"account_name\":\"string\",\"parent_account_id\":\"string\",\"primary_billing_group_id\":\"stringstringstringstringstringstring\"}' |  \\\n  http POST https://api.aiven.io/v1/account \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"account_name\\\":\\\"string\\\",\\\"parent_account_id\\\":\\\"string\\\",\\\"primary_billing_group_id\\\":\\\"stringstringstringstringstringstring\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/account\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"account_name\\\":\\\"string\\\",\\\"parent_account_id\\\":\\\"string\\\",\\\"primary_billing_group_id\\\":\\\"stringstringstringstringstringstring\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"account_name\":\"string\",\"parent_account_id\":\"string\",\"primary_billing_group_id\":\"stringstringstringstringstringstring\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"account_name\":\"string\",\"parent_account_id\":\"string\",\"primary_billing_group_id\":\"stringstringstringstringstringstring\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List accounts you have access to",
        "tags": [
          "Account"
        ],
        "operationId": "AccountList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}": {
      "delete": {
        "summary": "Delete empty account",
        "tags": [
          "Account"
        ],
        "operationId": "AccountDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/account/%7Baccount_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/account/%7Baccount_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get account details",
        "tags": [
          "Account"
        ],
        "operationId": "AccountGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update existing account",
        "tags": [
          "Account"
        ],
        "operationId": "AccountUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    account_name: 'string',\n    primary_billing_group_id: 'stringstringstringstringstringstring'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"account_name\":\"string\",\"primary_billing_group_id\":\"stringstringstringstringstringstring\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"account_name\":\"string\",\"primary_billing_group_id\":\"stringstringstringstringstringstring\"}' |  \\\n  http PUT https://api.aiven.io/v1/account/%7Baccount_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"account_name\\\":\\\"string\\\",\\\"primary_billing_group_id\\\":\\\"stringstringstringstringstringstring\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/account/%7Baccount_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"account_name\\\":\\\"string\\\",\\\"primary_billing_group_id\\\":\\\"stringstringstringstringstringstring\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"account_name\":\"string\",\"primary_billing_group_id\":\"stringstringstringstringstringstring\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"account_name\":\"string\",\"primary_billing_group_id\":\"stringstringstringstringstringstring\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/events": {
      "get": {
        "summary": "List account events",
        "tags": [
          "Account"
        ],
        "operationId": "AccountEventList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountEventListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/events',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/events \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/events \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/events\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/events\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/events');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/events');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/parent_account": {
      "put": {
        "summary": "Move an existing organization unitself",
        "tags": [
          "Account"
        ],
        "operationId": "AccountMove",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountMoveRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountMoveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/parent_account',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {parent_account_id: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/parent_account \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"parent_account_id\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"parent_account_id\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/account/%7Baccount_id%7D/parent_account \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"parent_account_id\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/account/%7Baccount_id%7D/parent_account\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/parent_account\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"parent_account_id\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/parent_account');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"parent_account_id\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"parent_account_id\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/parent_account');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/projects": {
      "get": {
        "summary": "List projects belonging to account",
        "tags": [
          "Account"
        ],
        "operationId": "AccountProjectsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountProjectsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read",
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/projects',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/projects \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/projects \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/projects\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/projects\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/projects');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/projects');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/project/{project_name}/teams": {
      "get": {
        "summary": "List account teams associated to a project",
        "tags": [
          "Account"
        ],
        "operationId": "AccountProjectsTeamsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/project_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountProjectsTeamsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read",
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/project/%7Bproject_name%7D/teams',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/project/%7Bproject_name%7D/teams \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/project/%7Bproject_name%7D/teams \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/project/%7Bproject_name%7D/teams\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/project/%7Bproject_name%7D/teams\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/project/%7Bproject_name%7D/teams');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/project/%7Bproject_name%7D/teams');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/teams": {
      "post": {
        "summary": "Create a new team",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/teams',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {team_name: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/teams \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"team_name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"team_name\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/account/%7Baccount_id%7D/teams \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"team_name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/account/%7Baccount_id%7D/teams\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/teams\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"team_name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/teams');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"team_name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"team_name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/teams');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List teams belonging to an account",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/teams',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/teams \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/teams \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/teams\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/teams\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/teams');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/teams');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/team/{team_id}": {
      "delete": {
        "summary": "Delete a team",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get details for a single team",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update team details",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {team_name: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"team_name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"team_name\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"team_name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"team_name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"team_name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"team_name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/team/{team_id}/invites": {
      "get": {
        "summary": "List pending invites",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamInvitesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamInvitesListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/team/{team_id}/invites/{user_email}": {
      "delete": {
        "summary": "Cancel pending user invite",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamMemberCancelInvite",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/user_email"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMemberCancelInviteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites/%7Buser_email%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites/%7Buser_email%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites/%7Buser_email%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites/%7Buser_email%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites/%7Buser_email%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites/%7Buser_email%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/invites/%7Buser_email%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/invite/{invite_verification_code}": {
      "post": {
        "summary": "Confirm account team invite",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamMemberVerifyInvite",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/invite_verification_code"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMemberVerifyInviteResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/invite/%7Binvite_verification_code%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/invite/%7Binvite_verification_code%7D"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/account/%7Baccount_id%7D/invite/%7Binvite_verification_code%7D"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"POST\", \"/v1/account/%7Baccount_id%7D/invite/%7Binvite_verification_code%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/invite/%7Binvite_verification_code%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/invite/%7Binvite_verification_code%7D');\n$request->setMethod(HTTP_METH_POST);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/invite/%7Binvite_verification_code%7D');\n$request->setRequestMethod('POST');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/team/{team_id}/member/{user_id}": {
      "delete": {
        "summary": "Remove a member from the team",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamMembersDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMembersDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/member/%7Buser_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/member/%7Buser_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/member/%7Buser_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/member/%7Buser_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/member/%7Buser_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/member/%7Buser_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/member/%7Buser_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/team/{team_id}/members": {
      "post": {
        "summary": "Invite a new member to join the team",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamMembersInvite",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamMembersInviteRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMembersInviteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {email: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"email\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"email\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"email\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"email\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"email\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List members of a single team",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamMembersList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamMembersListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/members');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/team/{team_id}/project/{project}": {
      "post": {
        "summary": "Associate team to a project",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamProjectAssociate",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamProjectAssociateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamProjectAssociateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write",
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {team_type: 'admin'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"team_type\":\"admin\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"team_type\":\"admin\"}' |  \\\n  http POST https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"team_type\\\":\\\"admin\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"team_type\\\":\\\"admin\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"team_type\":\"admin\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"team_type\":\"admin\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update team-project association",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamProjectAssociationUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTeamProjectAssociationUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamProjectAssociationUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write",
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {team_type: 'admin'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"team_type\":\"admin\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"team_type\":\"admin\"}' |  \\\n  http PUT https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"team_type\\\":\\\"admin\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"team_type\\\":\\\"admin\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"team_type\":\"admin\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"team_type\":\"admin\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "delete": {
        "summary": "Disassociate team from a project",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamProjectDisassociate",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          },
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamProjectDisassociateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:write",
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/project/%7Bproject%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/team/{team_id}/projects": {
      "get": {
        "summary": "List projects associated to a team",
        "tags": [
          "Account"
        ],
        "operationId": "AccountTeamProjectList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/team_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTeamProjectListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read",
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/projects',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/projects \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/projects \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/projects\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/projects\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/projects');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/team/%7Bteam_id%7D/projects');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/user/{user_id}/projects": {
      "get": {
        "summary": "List projects associated with this account that user has access to",
        "tags": [
          "Account"
        ],
        "operationId": "AccountUserProjectsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUserProjectsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read",
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/projects',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/projects \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/projects \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/projects\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/projects\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/projects');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/projects');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/user/{user_id}/teams": {
      "get": {
        "summary": "List all teams for user",
        "tags": [
          "Account"
        ],
        "operationId": "AccountUserTeamsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          },
          {
            "$ref": "#/components/parameters/user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUserTeamsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/teams',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/teams \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/teams \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/teams\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/teams\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/teams');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/user/%7Buser_id%7D/teams');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/account/{account_id}/users/search": {
      "post": {
        "summary": "List/search users who are members of any team on this account",
        "tags": [
          "Account"
        ],
        "operationId": "AccountUsersSearch",
        "parameters": [
          {
            "$ref": "#/components/parameters/account_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUsersSearchRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUsersSearchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "accounts:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/account/%7Baccount_id%7D/users/search',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {limit: 1, order_by: ['string'], query: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/account/%7Baccount_id%7D/users/search \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"limit\":1,\"order_by\":[\"string\"],\"query\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"limit\":1,\"order_by\":[\"string\"],\"query\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/account/%7Baccount_id%7D/users/search \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"limit\\\":1,\\\"order_by\\\":[\\\"string\\\"],\\\"query\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/account/%7Baccount_id%7D/users/search\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/account/%7Baccount_id%7D/users/search\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"limit\\\":1,\\\"order_by\\\":[\\\"string\\\"],\\\"query\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/users/search');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"limit\":1,\"order_by\":[\"string\"],\"query\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"limit\":1,\"order_by\":[\"string\"],\"query\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/account/%7Baccount_id%7D/users/search');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group": {
      "post": {
        "summary": "Create a billing group",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingGroupCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/billing-group',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    account_id: 'string',\n    address_lines: ['string'],\n    billing_currency: 'AUD',\n    billing_emails: [{email: 'string'}],\n    billing_extra_text: 'string',\n    billing_group_name: 'string',\n    card_id: 'string',\n    city: 'string',\n    company: 'string',\n    copy_from_billing_group: 'stringstringstringstringstringstring',\n    country_code: 'st',\n    state: 'string',\n    vat_id: 'string',\n    zip_code: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/billing-group \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"account_id\":\"string\",\"address_lines\":[\"string\"],\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_name\":\"string\",\"card_id\":\"string\",\"city\":\"string\",\"company\":\"string\",\"copy_from_billing_group\":\"stringstringstringstringstringstring\",\"country_code\":\"st\",\"state\":\"string\",\"vat_id\":\"string\",\"zip_code\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"account_id\":\"string\",\"address_lines\":[\"string\"],\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_name\":\"string\",\"card_id\":\"string\",\"city\":\"string\",\"company\":\"string\",\"copy_from_billing_group\":\"stringstringstringstringstringstring\",\"country_code\":\"st\",\"state\":\"string\",\"vat_id\":\"string\",\"zip_code\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/billing-group \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"account_id\\\":\\\"string\\\",\\\"address_lines\\\":[\\\"string\\\"],\\\"billing_currency\\\":\\\"AUD\\\",\\\"billing_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"billing_extra_text\\\":\\\"string\\\",\\\"billing_group_name\\\":\\\"string\\\",\\\"card_id\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"company\\\":\\\"string\\\",\\\"copy_from_billing_group\\\":\\\"stringstringstringstringstringstring\\\",\\\"country_code\\\":\\\"st\\\",\\\"state\\\":\\\"string\\\",\\\"vat_id\\\":\\\"string\\\",\\\"zip_code\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/billing-group\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"account_id\\\":\\\"string\\\",\\\"address_lines\\\":[\\\"string\\\"],\\\"billing_currency\\\":\\\"AUD\\\",\\\"billing_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"billing_extra_text\\\":\\\"string\\\",\\\"billing_group_name\\\":\\\"string\\\",\\\"card_id\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"company\\\":\\\"string\\\",\\\"copy_from_billing_group\\\":\\\"stringstringstringstringstringstring\\\",\\\"country_code\\\":\\\"st\\\",\\\"state\\\":\\\"string\\\",\\\"vat_id\\\":\\\"string\\\",\\\"zip_code\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"account_id\":\"string\",\"address_lines\":[\"string\"],\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_name\":\"string\",\"card_id\":\"string\",\"city\":\"string\",\"company\":\"string\",\"copy_from_billing_group\":\"stringstringstringstringstringstring\",\"country_code\":\"st\",\"state\":\"string\",\"vat_id\":\"string\",\"zip_code\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"account_id\":\"string\",\"address_lines\":[\"string\"],\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_name\":\"string\",\"card_id\":\"string\",\"city\":\"string\",\"company\":\"string\",\"copy_from_billing_group\":\"stringstringstringstringstringstring\",\"country_code\":\"st\",\"state\":\"string\",\"vat_id\":\"string\",\"zip_code\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List billing groups",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/billing-group\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/credits": {
      "post": {
        "summary": "Claim a credit code",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupCreditsClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingGroupCreditsClaimRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupCreditsClaimResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {code: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"code\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"code\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"code\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/billing-group/%7Bbilling_group%7D/credits\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"code\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"code\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"code\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List billing group credits",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupCreditsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupCreditsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D/credits\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/credits');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}": {
      "delete": {
        "summary": "Delete billing group",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/billing-group/%7Bbilling_group%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get billing group details",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update billing group",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingGroupUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    account_id: 'string',\n    address_lines: ['string'],\n    billing_currency: 'AUD',\n    billing_emails: [{email: 'string'}],\n    billing_extra_text: 'string',\n    billing_group_name: 'string',\n    card_id: 'string',\n    city: 'string',\n    company: 'string',\n    country_code: 'st',\n    state: 'string',\n    vat_id: 'string',\n    zip_code: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"account_id\":\"string\",\"address_lines\":[\"string\"],\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_name\":\"string\",\"card_id\":\"string\",\"city\":\"string\",\"company\":\"string\",\"country_code\":\"st\",\"state\":\"string\",\"vat_id\":\"string\",\"zip_code\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"account_id\":\"string\",\"address_lines\":[\"string\"],\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_name\":\"string\",\"card_id\":\"string\",\"city\":\"string\",\"company\":\"string\",\"country_code\":\"st\",\"state\":\"string\",\"vat_id\":\"string\",\"zip_code\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"account_id\\\":\\\"string\\\",\\\"address_lines\\\":[\\\"string\\\"],\\\"billing_currency\\\":\\\"AUD\\\",\\\"billing_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"billing_extra_text\\\":\\\"string\\\",\\\"billing_group_name\\\":\\\"string\\\",\\\"card_id\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"company\\\":\\\"string\\\",\\\"country_code\\\":\\\"st\\\",\\\"state\\\":\\\"string\\\",\\\"vat_id\\\":\\\"string\\\",\\\"zip_code\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/billing-group/%7Bbilling_group%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"account_id\\\":\\\"string\\\",\\\"address_lines\\\":[\\\"string\\\"],\\\"billing_currency\\\":\\\"AUD\\\",\\\"billing_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"billing_extra_text\\\":\\\"string\\\",\\\"billing_group_name\\\":\\\"string\\\",\\\"card_id\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"company\\\":\\\"string\\\",\\\"country_code\\\":\\\"st\\\",\\\"state\\\":\\\"string\\\",\\\"vat_id\\\":\\\"string\\\",\\\"zip_code\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"account_id\":\"string\",\"address_lines\":[\"string\"],\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_name\":\"string\",\"card_id\":\"string\",\"city\":\"string\",\"company\":\"string\",\"country_code\":\"st\",\"state\":\"string\",\"vat_id\":\"string\",\"zip_code\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"account_id\":\"string\",\"address_lines\":[\"string\"],\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_name\":\"string\",\"card_id\":\"string\",\"city\":\"string\",\"company\":\"string\",\"country_code\":\"st\",\"state\":\"string\",\"vat_id\":\"string\",\"zip_code\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/events": {
      "get": {
        "summary": "List billing group events",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupEventList",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupEventListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/events',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/events \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/events \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D/events\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/events\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/events');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/events');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/invoice/{invoice_number}/csv": {
      "get": {
        "summary": "Get a single invoice as a CSV of invoice lines",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupInvoiceCsvGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          },
          {
            "$ref": "#/components/parameters/invoice_number"
          },
          {
            "$ref": "#/components/parameters/billinggroupinvoicecsvget_cookie"
          },
          {
            "$ref": "#/components/parameters/billinggroupinvoicecsvget_project"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a CSV report",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/csv',\n  qs: {cookie: 'SOME_STRING_VALUE', project: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/csv?cookie=SOME_STRING_VALUE&project=SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/csv?cookie=SOME_STRING_VALUE&project=SOME_STRING_VALUE'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/csv?cookie=SOME_STRING_VALUE&project=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/csv?cookie=SOME_STRING_VALUE&project=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/csv');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'cookie' => 'SOME_STRING_VALUE',\n  'project' => 'SOME_STRING_VALUE'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/csv');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'cookie' => 'SOME_STRING_VALUE',\n  'project' => 'SOME_STRING_VALUE'\n]));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/invoice/{invoice_number}/{download_cookie}": {
      "get": {
        "summary": "Download PDF invoice",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupInvoiceDownload",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          },
          {
            "$ref": "#/components/parameters/invoice_number"
          },
          {
            "$ref": "#/components/parameters/download_cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a PDF report",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/invoice/{invoice_number}": {
      "get": {
        "summary": "Get a single invoice",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupInvoiceGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          },
          {
            "$ref": "#/components/parameters/invoice_number"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupInvoiceGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/invoice/{invoice_number}/lines": {
      "get": {
        "summary": "Get invoice lines for a single invoice",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupInvoiceLinesList",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          },
          {
            "$ref": "#/components/parameters/invoice_number"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupInvoiceLinesListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/lines',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/lines \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/lines \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/lines\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/lines\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/lines');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice/%7Binvoice_number%7D/lines');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/invoice": {
      "get": {
        "summary": "Get invoices generated for billing group",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupInvoiceList",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupInvoiceListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D/invoice\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/invoice');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/project-assign/{project}": {
      "post": {
        "summary": "Assign project to billing group",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupProjectAssign",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          },
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupProjectAssignResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/project-assign/%7Bproject%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/project-assign/%7Bproject%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/project-assign/%7Bproject%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/billing-group/%7Bbilling_group%7D/project-assign/%7Bproject%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/project-assign/%7Bproject%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/project-assign/%7Bproject%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/project-assign/%7Bproject%7D');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/projects": {
      "get": {
        "summary": "Get projects assigned to billing group",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupProjectList",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupProjectListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/billing-group/%7Bbilling_group%7D/projects\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/billing-group/{billing_group}/projects-assign": {
      "post": {
        "summary": "Assign projects to billing group",
        "tags": [
          "BillingGroup"
        ],
        "operationId": "BillingGroupProjectsAssign",
        "parameters": [
          {
            "$ref": "#/components/parameters/billing_group"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingGroupProjectsAssignRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingGroupProjectsAssignResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "billing:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects-assign',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {projects_names: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects-assign \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"projects_names\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"projects_names\":[\"string\"]}' |  \\\n  http POST https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects-assign \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"projects_names\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/billing-group/%7Bbilling_group%7D/projects-assign\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects-assign\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"projects_names\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects-assign');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"projects_names\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"projects_names\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/billing-group/%7Bbilling_group%7D/projects-assign');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/clouds": {
      "get": {
        "summary": "List available cloud platforms",
        "tags": [
          ""
        ],
        "operationId": "ListClouds",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCloudsResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {method: 'GET', url: 'https://api.aiven.io/v1/clouds'};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/clouds"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/clouds"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/clouds\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/clouds\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/clouds');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/clouds');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/clouds": {
      "get": {
        "summary": "List available cloud platforms for a project",
        "tags": [
          ""
        ],
        "operationId": "ListProjectClouds",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectCloudsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/clouds',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/clouds \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/clouds \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/clouds\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/clouds\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/clouds');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/clouds');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/tenants/{tenant}/privatelink-availability": {
      "get": {
        "summary": "List Privatelink cloud availability and prices for a tenant",
        "tags": [
          ""
        ],
        "operationId": "PublicPrivatelinkAvailabilityList",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPrivatelinkAvailabilityListResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/tenants/%7Btenant%7D/privatelink-availability'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/tenants/%7Btenant%7D/privatelink-availability"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/tenants/%7Btenant%7D/privatelink-availability"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/tenants/%7Btenant%7D/privatelink-availability\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/tenants/%7Btenant%7D/privatelink-availability\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/tenants/%7Btenant%7D/privatelink-availability');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/tenants/%7Btenant%7D/privatelink-availability');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/tenants/{tenant}/static-ip-availability": {
      "get": {
        "summary": "List static IP address cloud availability and prices for a tenant",
        "tags": [
          ""
        ],
        "operationId": "PublicStaticIPAvailabilityList",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicStaticIPAvailabilityListResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/tenants/%7Btenant%7D/static-ip-availability'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/tenants/%7Btenant%7D/static-ip-availability"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/tenants/%7Btenant%7D/static-ip-availability"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/tenants/%7Btenant%7D/static-ip-availability\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/tenants/%7Btenant%7D/static-ip-availability\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/tenants/%7Btenant%7D/static-ip-availability');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/tenants/%7Btenant%7D/static-ip-availability');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/card": {
      "post": {
        "summary": "Add credit card for user",
        "tags": [
          "Payment"
        ],
        "operationId": "CreditCardAdd",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCardAddRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardAddResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "payments:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/card',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {stripe_token: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/card \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"stripe_token\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"stripe_token\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/card \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"stripe_token\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/card\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/card\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"stripe_token\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/card');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"stripe_token\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"stripe_token\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/card');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List user's credit cards",
        "tags": [
          "Payment"
        ],
        "operationId": "CreditCardsList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "payments:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/card',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/card \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/card \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/card\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/card\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/card');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/card');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/card/{card_id}": {
      "delete": {
        "summary": "Delete user's credit card",
        "tags": [
          "Payment"
        ],
        "operationId": "CreditCardDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "payments:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/card/%7Bcard_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/card/%7Bcard_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/card/%7Bcard_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/card/%7Bcard_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/card/%7Bcard_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/card/%7Bcard_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/card/%7Bcard_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update user's credit card",
        "tags": [
          "Payment"
        ],
        "operationId": "CreditCardUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/card_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCardUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditCardUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "payments:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/card/%7Bcard_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {exp_month: 1, exp_year: 2015, name: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/card/%7Bcard_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"exp_month\":1,\"exp_year\":2015,\"name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"exp_month\":1,\"exp_year\":2015,\"name\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/card/%7Bcard_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"exp_month\\\":1,\\\"exp_year\\\":2015,\\\"name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/card/%7Bcard_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/card/%7Bcard_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"exp_month\\\":1,\\\"exp_year\\\":2015,\\\"name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/card/%7Bcard_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"exp_month\":1,\"exp_year\":2015,\"name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"exp_month\":1,\"exp_year\":2015,\"name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/card/%7Bcard_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/vpc-peering-connection-types": {
      "get": {
        "summary": "List VPC peering connection types for a project",
        "tags": [
          "Project"
        ],
        "operationId": "ListProjectVpcPeeringConnectionTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectVpcPeeringConnectionTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpc-peering-connection-types',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpc-peering-connection-types \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/vpc-peering-connection-types \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/vpc-peering-connection-types\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpc-peering-connection-types\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpc-peering-connection-types');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpc-peering-connection-types');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/alerts": {
      "get": {
        "summary": "List active alerts for a project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectAlertsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectAlertsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/alerts',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/alerts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/alerts \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/alerts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/alerts\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/alerts');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/alerts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project": {
      "post": {
        "summary": "Create a project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    account_id: 'string',\n    add_account_owners_admin_access: true,\n    address_lines: ['string'],\n    billing_address: 'string',\n    billing_currency: 'AUD',\n    billing_emails: [{email: 'string'}],\n    billing_extra_text: 'string',\n    billing_group_id: 'stringstringstringstringstringstring',\n    card_id: 'string',\n    city: 'string',\n    cloud: 'string',\n    company: 'string',\n    copy_from_project: 'string',\n    copy_tags: true,\n    country_code: 'st',\n    project: 'string',\n    state: 'string',\n    tags: {},\n    tech_emails: [{email: 'string'}],\n    use_source_project_billing_group: true,\n    vat_id: 'string',\n    zip_code: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"account_id\":\"string\",\"add_account_owners_admin_access\":true,\"address_lines\":[\"string\"],\"billing_address\":\"string\",\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_id\":\"stringstringstringstringstringstring\",\"card_id\":\"string\",\"city\":\"string\",\"cloud\":\"string\",\"company\":\"string\",\"copy_from_project\":\"string\",\"copy_tags\":true,\"country_code\":\"st\",\"project\":\"string\",\"state\":\"string\",\"tags\":{},\"tech_emails\":[{\"email\":\"string\"}],\"use_source_project_billing_group\":true,\"vat_id\":\"string\",\"zip_code\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"account_id\":\"string\",\"add_account_owners_admin_access\":true,\"address_lines\":[\"string\"],\"billing_address\":\"string\",\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_id\":\"stringstringstringstringstringstring\",\"card_id\":\"string\",\"city\":\"string\",\"cloud\":\"string\",\"company\":\"string\",\"copy_from_project\":\"string\",\"copy_tags\":true,\"country_code\":\"st\",\"project\":\"string\",\"state\":\"string\",\"tags\":{},\"tech_emails\":[{\"email\":\"string\"}],\"use_source_project_billing_group\":true,\"vat_id\":\"string\",\"zip_code\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"account_id\\\":\\\"string\\\",\\\"add_account_owners_admin_access\\\":true,\\\"address_lines\\\":[\\\"string\\\"],\\\"billing_address\\\":\\\"string\\\",\\\"billing_currency\\\":\\\"AUD\\\",\\\"billing_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"billing_extra_text\\\":\\\"string\\\",\\\"billing_group_id\\\":\\\"stringstringstringstringstringstring\\\",\\\"card_id\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"cloud\\\":\\\"string\\\",\\\"company\\\":\\\"string\\\",\\\"copy_from_project\\\":\\\"string\\\",\\\"copy_tags\\\":true,\\\"country_code\\\":\\\"st\\\",\\\"project\\\":\\\"string\\\",\\\"state\\\":\\\"string\\\",\\\"tags\\\":{},\\\"tech_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"use_source_project_billing_group\\\":true,\\\"vat_id\\\":\\\"string\\\",\\\"zip_code\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"account_id\\\":\\\"string\\\",\\\"add_account_owners_admin_access\\\":true,\\\"address_lines\\\":[\\\"string\\\"],\\\"billing_address\\\":\\\"string\\\",\\\"billing_currency\\\":\\\"AUD\\\",\\\"billing_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"billing_extra_text\\\":\\\"string\\\",\\\"billing_group_id\\\":\\\"stringstringstringstringstringstring\\\",\\\"card_id\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"cloud\\\":\\\"string\\\",\\\"company\\\":\\\"string\\\",\\\"copy_from_project\\\":\\\"string\\\",\\\"copy_tags\\\":true,\\\"country_code\\\":\\\"st\\\",\\\"project\\\":\\\"string\\\",\\\"state\\\":\\\"string\\\",\\\"tags\\\":{},\\\"tech_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"use_source_project_billing_group\\\":true,\\\"vat_id\\\":\\\"string\\\",\\\"zip_code\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"account_id\":\"string\",\"add_account_owners_admin_access\":true,\"address_lines\":[\"string\"],\"billing_address\":\"string\",\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_id\":\"stringstringstringstringstringstring\",\"card_id\":\"string\",\"city\":\"string\",\"cloud\":\"string\",\"company\":\"string\",\"copy_from_project\":\"string\",\"copy_tags\":true,\"country_code\":\"st\",\"project\":\"string\",\"state\":\"string\",\"tags\":{},\"tech_emails\":[{\"email\":\"string\"}],\"use_source_project_billing_group\":true,\"vat_id\":\"string\",\"zip_code\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"account_id\":\"string\",\"add_account_owners_admin_access\":true,\"address_lines\":[\"string\"],\"billing_address\":\"string\",\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_id\":\"stringstringstringstringstringstring\",\"card_id\":\"string\",\"city\":\"string\",\"cloud\":\"string\",\"company\":\"string\",\"copy_from_project\":\"string\",\"copy_tags\":true,\"country_code\":\"st\",\"project\":\"string\",\"state\":\"string\",\"tags\":{},\"tech_emails\":[{\"email\":\"string\"}],\"use_source_project_billing_group\":true,\"vat_id\":\"string\",\"zip_code\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List projects",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}": {
      "delete": {
        "summary": "Delete project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get project details",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    account_id: 'string',\n    add_account_owners_admin_access: true,\n    address_lines: ['string'],\n    billing_address: 'string',\n    billing_currency: 'AUD',\n    billing_emails: [{email: 'string'}],\n    billing_extra_text: 'string',\n    billing_group_id: 'stringstringstringstringstringstring',\n    card_id: 'string',\n    city: 'string',\n    cloud: 'string',\n    company: 'string',\n    country_code: 'st',\n    project_name: 'string',\n    state: 'string',\n    tags: {},\n    tech_emails: [{email: 'string'}],\n    vat_id: 'string',\n    zip_code: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"account_id\":\"string\",\"add_account_owners_admin_access\":true,\"address_lines\":[\"string\"],\"billing_address\":\"string\",\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_id\":\"stringstringstringstringstringstring\",\"card_id\":\"string\",\"city\":\"string\",\"cloud\":\"string\",\"company\":\"string\",\"country_code\":\"st\",\"project_name\":\"string\",\"state\":\"string\",\"tags\":{},\"tech_emails\":[{\"email\":\"string\"}],\"vat_id\":\"string\",\"zip_code\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"account_id\":\"string\",\"add_account_owners_admin_access\":true,\"address_lines\":[\"string\"],\"billing_address\":\"string\",\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_id\":\"stringstringstringstringstringstring\",\"card_id\":\"string\",\"city\":\"string\",\"cloud\":\"string\",\"company\":\"string\",\"country_code\":\"st\",\"project_name\":\"string\",\"state\":\"string\",\"tags\":{},\"tech_emails\":[{\"email\":\"string\"}],\"vat_id\":\"string\",\"zip_code\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"account_id\\\":\\\"string\\\",\\\"add_account_owners_admin_access\\\":true,\\\"address_lines\\\":[\\\"string\\\"],\\\"billing_address\\\":\\\"string\\\",\\\"billing_currency\\\":\\\"AUD\\\",\\\"billing_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"billing_extra_text\\\":\\\"string\\\",\\\"billing_group_id\\\":\\\"stringstringstringstringstringstring\\\",\\\"card_id\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"cloud\\\":\\\"string\\\",\\\"company\\\":\\\"string\\\",\\\"country_code\\\":\\\"st\\\",\\\"project_name\\\":\\\"string\\\",\\\"state\\\":\\\"string\\\",\\\"tags\\\":{},\\\"tech_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"vat_id\\\":\\\"string\\\",\\\"zip_code\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"account_id\\\":\\\"string\\\",\\\"add_account_owners_admin_access\\\":true,\\\"address_lines\\\":[\\\"string\\\"],\\\"billing_address\\\":\\\"string\\\",\\\"billing_currency\\\":\\\"AUD\\\",\\\"billing_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"billing_extra_text\\\":\\\"string\\\",\\\"billing_group_id\\\":\\\"stringstringstringstringstringstring\\\",\\\"card_id\\\":\\\"string\\\",\\\"city\\\":\\\"string\\\",\\\"cloud\\\":\\\"string\\\",\\\"company\\\":\\\"string\\\",\\\"country_code\\\":\\\"st\\\",\\\"project_name\\\":\\\"string\\\",\\\"state\\\":\\\"string\\\",\\\"tags\\\":{},\\\"tech_emails\\\":[{\\\"email\\\":\\\"string\\\"}],\\\"vat_id\\\":\\\"string\\\",\\\"zip_code\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"account_id\":\"string\",\"add_account_owners_admin_access\":true,\"address_lines\":[\"string\"],\"billing_address\":\"string\",\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_id\":\"stringstringstringstringstringstring\",\"card_id\":\"string\",\"city\":\"string\",\"cloud\":\"string\",\"company\":\"string\",\"country_code\":\"st\",\"project_name\":\"string\",\"state\":\"string\",\"tags\":{},\"tech_emails\":[{\"email\":\"string\"}],\"vat_id\":\"string\",\"zip_code\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"account_id\":\"string\",\"add_account_owners_admin_access\":true,\"address_lines\":[\"string\"],\"billing_address\":\"string\",\"billing_currency\":\"AUD\",\"billing_emails\":[{\"email\":\"string\"}],\"billing_extra_text\":\"string\",\"billing_group_id\":\"stringstringstringstringstringstring\",\"card_id\":\"string\",\"city\":\"string\",\"cloud\":\"string\",\"company\":\"string\",\"country_code\":\"st\",\"project_name\":\"string\",\"state\":\"string\",\"tags\":{},\"tech_emails\":[{\"email\":\"string\"}],\"vat_id\":\"string\",\"zip_code\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/download-sbom/{file_format}/{download_cookie}": {
      "get": {
        "summary": "Download SBOM report",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectDownloadSBOMReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/file_format"
          },
          {
            "$ref": "#/components/parameters/download_cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a SBOM report",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/download-sbom/%7Bfile_format%7D/%7Bdownload_cookie%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/download-sbom/%7Bfile_format%7D/%7Bdownload_cookie%7D"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/download-sbom/%7Bfile_format%7D/%7Bdownload_cookie%7D"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/download-sbom/%7Bfile_format%7D/%7Bdownload_cookie%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/download-sbom/%7Bfile_format%7D/%7Bdownload_cookie%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/download-sbom/%7Bfile_format%7D/%7Bdownload_cookie%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/download-sbom/%7Bfile_format%7D/%7Bdownload_cookie%7D');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/generate-sbom-download-url/{file_format}": {
      "get": {
        "summary": "Generate SBOM for project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectGenerateSbomDownloadUrl",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/file_format"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGenerateSbomDownloadUrlResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/generate-sbom-download-url/%7Bfile_format%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/generate-sbom-download-url/%7Bfile_format%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/generate-sbom-download-url/%7Bfile_format%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/generate-sbom-download-url/%7Bfile_format%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/generate-sbom-download-url/%7Bfile_format%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/generate-sbom-download-url/%7Bfile_format%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/generate-sbom-download-url/%7Bfile_format%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/events": {
      "get": {
        "summary": "Get project event log entries",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectGetEventLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGetEventLogsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/events',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/events \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/events \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/events\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/events\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/events');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/events');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/invite": {
      "post": {
        "summary": "Send project membership invitation",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectInvite",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectInviteRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInviteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/invite',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {member_type: 'admin', user_email: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/invite \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"member_type\":\"admin\",\"user_email\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"member_type\":\"admin\",\"user_email\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/invite \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"member_type\\\":\\\"admin\\\",\\\"user_email\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/invite\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/invite\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"member_type\\\":\\\"admin\\\",\\\"user_email\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invite');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"member_type\":\"admin\",\"user_email\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"member_type\":\"admin\",\"user_email\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invite');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/invite/{invite_verification_code}": {
      "post": {
        "summary": "Confirm project invite",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectInviteAccept",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/invite_verification_code"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInviteAcceptResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvite_verification_code%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvite_verification_code%7D"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvite_verification_code%7D"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/invite/%7Binvite_verification_code%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvite_verification_code%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvite_verification_code%7D');\n$request->setMethod(HTTP_METH_POST);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvite_verification_code%7D');\n$request->setRequestMethod('POST');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/invite/{invited_email}": {
      "delete": {
        "summary": "Delete an invitation to a project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectInviteDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/invited_email"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInviteDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvited_email%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvited_email%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvited_email%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/invite/%7Binvited_email%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvited_email%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvited_email%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invite/%7Binvited_email%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/privatelink-availability": {
      "get": {
        "summary": "List Privatelink cloud availability and prices for a project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectPrivatelinkAvailabilityList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPrivatelinkAvailabilityListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/privatelink-availability',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/privatelink-availability \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/privatelink-availability \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/privatelink-availability\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/privatelink-availability\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/privatelink-availability');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/privatelink-availability');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/tags": {
      "get": {
        "summary": "List all tags attached to this project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectTagsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/tags',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/tags \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/tags \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/tags\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/tags\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tags');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tags');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Replace all project tags with a new set of tags, deleting old ones",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectTagsReplace",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTagsReplaceRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagsReplaceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/tags',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {tags: {}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/tags \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"tags\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"tags\":{}}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/tags \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"tags\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/tags\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/tags\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"tags\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tags');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"tags\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"tags\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tags');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "patch": {
        "summary": "Update one or more tags, creating ones that don't exist, and deleting ones given NULL value",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectTagsUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTagsUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagsUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/tags',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {tags: {}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/tags \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"tags\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"tags\":{}}' |  \\\n  http PATCH https://api.aiven.io/v1/project/%7Bproject%7D/tags \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"tags\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v1/project/%7Bproject%7D/tags\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/tags\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"tags\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tags');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"tags\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"tags\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tags');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/users": {
      "get": {
        "summary": "List users with access to the project. May contain same user multiple times if they belong to multiple teams associated to the project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectUserList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUserListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/users',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/users \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/users \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/users\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/users\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/users');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/users');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/user/{user_email}": {
      "delete": {
        "summary": "Remove user from the project",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectUserRemove",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/user_email"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUserRemoveResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/user/%7Buser_email%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update a project user",
        "tags": [
          "Project"
        ],
        "operationId": "ProjectUserUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/user_email"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUserUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUserUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {member_type: 'admin'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"member_type\":\"admin\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"member_type\":\"admin\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"member_type\\\":\\\"admin\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/user/%7Buser_email%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"member_type\\\":\\\"admin\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"member_type\":\"admin\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"member_type\":\"admin\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/user/%7Buser_email%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/vpcs": {
      "post": {
        "summary": "Create a VPC in a cloud for the project",
        "tags": [
          "Project"
        ],
        "operationId": "VpcCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    cloud_name: 'string',\n    network_cidr: 'string',\n    peering_connections: [\n      {\n        peer_azure_app_id: 'string',\n        peer_azure_tenant_id: 'string',\n        peer_cloud_account: 'string',\n        peer_region: 'string',\n        peer_resource_group: 'string',\n        peer_vpc: 'string',\n        user_peer_network_cidrs: ['string']\n      }\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"cloud_name\":\"string\",\"network_cidr\":\"string\",\"peering_connections\":[{\"peer_azure_app_id\":\"string\",\"peer_azure_tenant_id\":\"string\",\"peer_cloud_account\":\"string\",\"peer_region\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\",\"user_peer_network_cidrs\":[\"string\"]}]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"cloud_name\":\"string\",\"network_cidr\":\"string\",\"peering_connections\":[{\"peer_azure_app_id\":\"string\",\"peer_azure_tenant_id\":\"string\",\"peer_cloud_account\":\"string\",\"peer_region\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\",\"user_peer_network_cidrs\":[\"string\"]}]}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/vpcs \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"cloud_name\\\":\\\"string\\\",\\\"network_cidr\\\":\\\"string\\\",\\\"peering_connections\\\":[{\\\"peer_azure_app_id\\\":\\\"string\\\",\\\"peer_azure_tenant_id\\\":\\\"string\\\",\\\"peer_cloud_account\\\":\\\"string\\\",\\\"peer_region\\\":\\\"string\\\",\\\"peer_resource_group\\\":\\\"string\\\",\\\"peer_vpc\\\":\\\"string\\\",\\\"user_peer_network_cidrs\\\":[\\\"string\\\"]}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/vpcs\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"cloud_name\\\":\\\"string\\\",\\\"network_cidr\\\":\\\"string\\\",\\\"peering_connections\\\":[{\\\"peer_azure_app_id\\\":\\\"string\\\",\\\"peer_azure_tenant_id\\\":\\\"string\\\",\\\"peer_cloud_account\\\":\\\"string\\\",\\\"peer_region\\\":\\\"string\\\",\\\"peer_resource_group\\\":\\\"string\\\",\\\"peer_vpc\\\":\\\"string\\\",\\\"user_peer_network_cidrs\\\":[\\\"string\\\"]}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"cloud_name\":\"string\",\"network_cidr\":\"string\",\"peering_connections\":[{\"peer_azure_app_id\":\"string\",\"peer_azure_tenant_id\":\"string\",\"peer_cloud_account\":\"string\",\"peer_region\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\",\"user_peer_network_cidrs\":[\"string\"]}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"cloud_name\":\"string\",\"network_cidr\":\"string\",\"peering_connections\":[{\"peer_azure_app_id\":\"string\",\"peer_azure_tenant_id\":\"string\",\"peer_cloud_account\":\"string\",\"peer_region\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\",\"user_peer_network_cidrs\":[\"string\"]}]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List VPCs for a project",
        "tags": [
          "Project"
        ],
        "operationId": "VpcList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/vpcs \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/vpcs\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}": {
      "delete": {
        "summary": "Delete a project VPC",
        "tags": [
          "Project"
        ],
        "operationId": "VpcDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/project_vpc_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get VPC information",
        "tags": [
          "Project"
        ],
        "operationId": "VpcGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/project_vpc_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/peering-connections": {
      "post": {
        "summary": "Create a peering connection for a project VPC",
        "tags": [
          "Project"
        ],
        "operationId": "VpcPeeringConnectionCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/project_vpc_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcPeeringConnectionCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    peer_azure_app_id: 'string',\n    peer_azure_tenant_id: 'string',\n    peer_cloud_account: 'string',\n    peer_region: 'string',\n    peer_resource_group: 'string',\n    peer_vpc: 'string',\n    user_peer_network_cidrs: ['string']\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"peer_azure_app_id\":\"string\",\"peer_azure_tenant_id\":\"string\",\"peer_cloud_account\":\"string\",\"peer_region\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\",\"user_peer_network_cidrs\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"peer_azure_app_id\":\"string\",\"peer_azure_tenant_id\":\"string\",\"peer_cloud_account\":\"string\",\"peer_region\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\",\"user_peer_network_cidrs\":[\"string\"]}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"peer_azure_app_id\\\":\\\"string\\\",\\\"peer_azure_tenant_id\\\":\\\"string\\\",\\\"peer_cloud_account\\\":\\\"string\\\",\\\"peer_region\\\":\\\"string\\\",\\\"peer_resource_group\\\":\\\"string\\\",\\\"peer_vpc\\\":\\\"string\\\",\\\"user_peer_network_cidrs\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"peer_azure_app_id\\\":\\\"string\\\",\\\"peer_azure_tenant_id\\\":\\\"string\\\",\\\"peer_cloud_account\\\":\\\"string\\\",\\\"peer_region\\\":\\\"string\\\",\\\"peer_resource_group\\\":\\\"string\\\",\\\"peer_vpc\\\":\\\"string\\\",\\\"user_peer_network_cidrs\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"peer_azure_app_id\":\"string\",\"peer_azure_tenant_id\":\"string\",\"peer_cloud_account\":\"string\",\"peer_region\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\",\"user_peer_network_cidrs\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"peer_azure_app_id\":\"string\",\"peer_azure_tenant_id\":\"string\",\"peer_cloud_account\":\"string\",\"peer_region\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\",\"user_peer_network_cidrs\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-vpcs/{peer_vpc}": {
      "delete": {
        "summary": "Delete a peering connection for a project VPC",
        "tags": [
          "Project"
        ],
        "operationId": "VpcPeeringConnectionDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/project_vpc_id"
          },
          {
            "$ref": "#/components/parameters/peer_cloud_account"
          },
          {
            "$ref": "#/components/parameters/peer_vpc"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/user-peer-network-cidrs": {
      "put": {
        "summary": "Update user-defined peer network CIDRs for a project VPC",
        "tags": [
          "Project"
        ],
        "operationId": "VpcPeeringConnectionUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/project_vpc_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcPeeringConnectionUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/user-peer-network-cidrs',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    add: [\n      {\n        cidr: 'string',\n        peer_cloud_account: 'string',\n        peer_resource_group: 'string',\n        peer_vpc: 'string'\n      }\n    ],\n    delete: ['string']\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/user-peer-network-cidrs \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"add\":[{\"cidr\":\"string\",\"peer_cloud_account\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\"}],\"delete\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"add\":[{\"cidr\":\"string\",\"peer_cloud_account\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\"}],\"delete\":[\"string\"]}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/user-peer-network-cidrs \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"add\\\":[{\\\"cidr\\\":\\\"string\\\",\\\"peer_cloud_account\\\":\\\"string\\\",\\\"peer_resource_group\\\":\\\"string\\\",\\\"peer_vpc\\\":\\\"string\\\"}],\\\"delete\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/user-peer-network-cidrs\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/user-peer-network-cidrs\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"add\\\":[{\\\"cidr\\\":\\\"string\\\",\\\"peer_cloud_account\\\":\\\"string\\\",\\\"peer_resource_group\\\":\\\"string\\\",\\\"peer_vpc\\\":\\\"string\\\"}],\\\"delete\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/user-peer-network-cidrs');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"add\":[{\"cidr\":\"string\",\"peer_cloud_account\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\"}],\"delete\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"add\":[{\"cidr\":\"string\",\"peer_cloud_account\":\"string\",\"peer_resource_group\":\"string\",\"peer_vpc\":\"string\"}],\"delete\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/user-peer-network-cidrs');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-vpcs/{peer_vpc}/peer-regions/{peer_region}": {
      "delete": {
        "summary": "Delete a peering connection for a project VPC",
        "tags": [
          "Project"
        ],
        "operationId": "VpcPeeringConnectionWithRegionDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/project_vpc_id"
          },
          {
            "$ref": "#/components/parameters/peer_cloud_account"
          },
          {
            "$ref": "#/components/parameters/peer_vpc"
          },
          {
            "$ref": "#/components/parameters/peer_region"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionWithRegionDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D/peer-regions/%7Bpeer_region%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D/peer-regions/%7Bpeer_region%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D/peer-regions/%7Bpeer_region%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D/peer-regions/%7Bpeer_region%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D/peer-regions/%7Bpeer_region%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D/peer-regions/%7Bpeer_region%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-vpcs/%7Bpeer_vpc%7D/peer-regions/%7Bpeer_region%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/vpcs/{project_vpc_id}/peering-connections/peer-accounts/{peer_cloud_account}/peer-resource-groups/{peer_resource_group}/peer-vpcs/{peer_vpc}": {
      "delete": {
        "summary": "Delete a peering connection for a project VPC",
        "tags": [
          "Project"
        ],
        "operationId": "VpcPeeringConnectionWithResourceGroupDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/project_vpc_id"
          },
          {
            "$ref": "#/components/parameters/peer_cloud_account"
          },
          {
            "$ref": "#/components/parameters/peer_resource_group"
          },
          {
            "$ref": "#/components/parameters/peer_vpc"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcPeeringConnectionWithResourceGroupDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-resource-groups/%7Bpeer_resource_group%7D/peer-vpcs/%7Bpeer_vpc%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-resource-groups/%7Bpeer_resource_group%7D/peer-vpcs/%7Bpeer_vpc%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-resource-groups/%7Bpeer_resource_group%7D/peer-vpcs/%7Bpeer_vpc%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-resource-groups/%7Bpeer_resource_group%7D/peer-vpcs/%7Bpeer_vpc%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-resource-groups/%7Bpeer_resource_group%7D/peer-vpcs/%7Bpeer_vpc%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-resource-groups/%7Bpeer_resource_group%7D/peer-vpcs/%7Bpeer_vpc%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/vpcs/%7Bproject_vpc_id%7D/peering-connections/peer-accounts/%7Bpeer_cloud_account%7D/peer-resource-groups/%7Bpeer_resource_group%7D/peer-vpcs/%7Bpeer_vpc%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/credits": {
      "post": {
        "summary": "Claim a credit code",
        "tags": [
          "Project_Billing"
        ],
        "operationId": "ProjectCreditsClaim",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreditsClaimRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreditsClaimResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write",
              "billing:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/credits',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {code: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/credits \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"code\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"code\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/credits \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"code\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/credits\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/credits\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"code\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/credits');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"code\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"code\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/credits');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List project credits",
        "tags": [
          "Project_Billing"
        ],
        "operationId": "ProjectCreditsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreditsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read",
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/credits',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/credits \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/credits \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/credits\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/credits\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/credits');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/credits');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/invoice/{invoice_number}/{download_cookie}": {
      "get": {
        "summary": "Download PDF invoice",
        "tags": [
          "Project_Billing"
        ],
        "operationId": "ProjectInvoiceGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/invoice_number"
          },
          {
            "$ref": "#/components/parameters/download_cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a PDF report",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invoice/%7Binvoice_number%7D/%7Bdownload_cookie%7D');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/invoice": {
      "get": {
        "summary": "List project invoices",
        "tags": [
          "Project_Billing"
        ],
        "operationId": "ProjectInvoiceList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInvoiceListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read",
              "billing:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/invoice',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/invoice \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/invoice \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/invoice\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/invoice\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invoice');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/invoice');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/kms/ca": {
      "get": {
        "summary": "Retrieve project CA certificate",
        "tags": [
          "Project_Key_Management"
        ],
        "operationId": "ProjectKmsGetCA",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectKmsGetCAResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/kms/ca',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/kms/ca \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/kms/ca \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/kms/ca\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/kms/ca\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/kms/ca');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/kms/ca');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/clickhouse/db": {
      "post": {
        "summary": "Create a database",
        "tags": [
          "Service:_ClickHouse"
        ],
        "operationId": "ServiceClickHouseDatabaseCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceClickHouseDatabaseCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseDatabaseCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {database: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"database\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"database\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"database\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"database\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"database\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"database\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/clickhouse/db/{database}": {
      "delete": {
        "summary": "Delete a database",
        "tags": [
          "Service:_ClickHouse"
        ],
        "operationId": "ServiceClickHouseDatabaseDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/database"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseDatabaseDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db/%7Bdatabase%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db/%7Bdatabase%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db/%7Bdatabase%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db/%7Bdatabase%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db/%7Bdatabase%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db/%7Bdatabase%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/db/%7Bdatabase%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/clickhouse/query/stats": {
      "get": {
        "summary": "Return statistics on recent queries",
        "tags": [
          "Service:_ClickHouse"
        ],
        "operationId": "ServiceClickHouseQueryStats",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/serviceclickhousequerystats_limit"
          },
          {
            "$ref": "#/components/parameters/serviceclickhousequerystats_offset"
          },
          {
            "$ref": "#/components/parameters/serviceclickhousequerystats_order_by"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceClickHouseQueryStatsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/query/stats',\n  qs: {\n    limit: 'SOME_INTEGER_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    order_by: 'SOME_STRING_VALUE'\n  },\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/query/stats?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order_by=SOME_STRING_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/query/stats?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order_by=SOME_STRING_VALUE' \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/query/stats?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order_by=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/query/stats?limit=SOME_INTEGER_VALUE&offset=SOME_INTEGER_VALUE&order_by=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/query/stats');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData([\n  'limit' => 'SOME_INTEGER_VALUE',\n  'offset' => 'SOME_INTEGER_VALUE',\n  'order_by' => 'SOME_STRING_VALUE'\n]);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/clickhouse/query/stats');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString([\n  'limit' => 'SOME_INTEGER_VALUE',\n  'offset' => 'SOME_INTEGER_VALUE',\n  'order_by' => 'SOME_STRING_VALUE'\n]));\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/elasticsearch/acl": {
      "get": {
        "summary": "Show Elasticsearch ACL configuration",
        "tags": [
          "Service:_Elasticsearch"
        ],
        "operationId": "ServiceEsAclGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEsAclGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "post": {
        "summary": "Set Elasticsearch ACL configuration",
        "tags": [
          "Service:_Elasticsearch"
        ],
        "operationId": "ServiceEsAclSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceEsAclSetRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEsAclSetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    elasticsearch_acl_config: {\n      acls: [{rules: [{index: 'string', permission: 'deny'}], username: 'string'}],\n      enabled: true\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"elasticsearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"elasticsearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"elasticsearch_acl_config\\\":{\\\"acls\\\":[{\\\"rules\\\":[{\\\"index\\\":\\\"string\\\",\\\"permission\\\":\\\"deny\\\"}],\\\"username\\\":\\\"string\\\"}],\\\"enabled\\\":true}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"elasticsearch_acl_config\\\":{\\\"acls\\\":[{\\\"rules\\\":[{\\\"index\\\":\\\"string\\\",\\\"permission\\\":\\\"deny\\\"}],\\\"username\\\":\\\"string\\\"}],\\\"enabled\\\":true}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"elasticsearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"elasticsearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update Elasticsearch ACL configuration",
        "tags": [
          "Service:_Elasticsearch"
        ],
        "operationId": "ServiceEsAclUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceEsAclUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEsAclUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    elasticsearch_acl_config: {\n      acls: [{rules: [{index: 'string', permission: 'deny'}], username: 'string'}],\n      enabled: true\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"elasticsearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"elasticsearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"elasticsearch_acl_config\\\":{\\\"acls\\\":[{\\\"rules\\\":[{\\\"index\\\":\\\"string\\\",\\\"permission\\\":\\\"deny\\\"}],\\\"username\\\":\\\"string\\\"}],\\\"enabled\\\":true}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"elasticsearch_acl_config\\\":{\\\"acls\\\":[{\\\"rules\\\":[{\\\"index\\\":\\\"string\\\",\\\"permission\\\":\\\"deny\\\"}],\\\"username\\\":\\\"string\\\"}],\\\"enabled\\\":true}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"elasticsearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"elasticsearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/elasticsearch/acl');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/index/{index_name}": {
      "delete": {
        "summary": "Delete an Elasticsearch index",
        "tags": [
          "Service:_Elasticsearch"
        ],
        "operationId": "ServiceEsIndexDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/index_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEsIndexDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index/%7Bindex_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index/%7Bindex_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index/%7Bindex_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index/%7Bindex_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index/%7Bindex_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index/%7Bindex_name%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index/%7Bindex_name%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/index": {
      "get": {
        "summary": "List Elasticsearch indexes",
        "tags": [
          "Service:_Elasticsearch"
        ],
        "operationId": "ServiceEsIndexList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEsIndexListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/index');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version/query/{query_id}": {
      "delete": {
        "summary": "Delete a Flink query",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkApplicationVersionDeleteQuery",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/query_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkApplicationVersionDeleteQueryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get a Flink query",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkApplicationVersionGetQuery",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/query_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkApplicationVersionGetQueryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version/query": {
      "get": {
        "summary": "List Flink queries",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkApplicationVersionListQueries",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkApplicationVersionListQueriesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "post": {
        "summary": "Create a Flink query",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkCreateApplicationVersionQuery",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateApplicationVersionQueryRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateApplicationVersionQueryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    job_ttl: 5,\n    max_rows: 1,\n    sinks: [\n      {create_table: 'string', integration_id: 'stringstringstringstringstringstring'}\n    ],\n    sources: [\n      {create_table: 'string', integration_id: 'stringstringstringstringstringstring'}\n    ],\n    statement: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"job_ttl\":5,\"max_rows\":1,\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"job_ttl\":5,\"max_rows\":1,\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"job_ttl\\\":5,\\\"max_rows\\\":1,\\\"sinks\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"sources\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"statement\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"job_ttl\\\":5,\\\"max_rows\\\":1,\\\"sinks\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"sources\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"statement\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"job_ttl\":5,\"max_rows\":1,\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"job_ttl\":5,\"max_rows\":1,\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version/query/{query_id}/cancel_job": {
      "patch": {
        "summary": "Cancel the Flink job of a Flink query",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkApplicationVersionQueryJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/query_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkApplicationVersionQueryJobResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D/cancel_job',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D/cancel_job \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http PATCH https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D/cancel_job \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"PATCH\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D/cancel_job\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D/cancel_job\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D/cancel_job');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/query/%7Bquery_id%7D/cancel_job');\n$request->setRequestMethod('PATCH');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/deployment/{deployment_id}/cancel": {
      "post": {
        "summary": "Cancel an ApplicationDeployment",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkCancelApplicationDeployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCancelApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/cancel',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/cancel \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/cancel \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/cancel\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/cancel\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/cancel');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/cancel');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application": {
      "post": {
        "summary": "Create a Flink Application",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkCreateApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateApplicationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateApplicationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    application_version: {\n      sinks: [\n        {create_table: 'string', integration_id: 'stringstringstringstringstringstring'}\n      ],\n      sources: [\n        {create_table: 'string', integration_id: 'stringstringstringstringstringstring'}\n      ],\n      statement: 'string'\n    },\n    name: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"application_version\":{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"},\"name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"application_version\":{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"},\"name\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"application_version\\\":{\\\"sinks\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"sources\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"statement\\\":\\\"string\\\"},\\\"name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"application_version\\\":{\\\"sinks\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"sources\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"statement\\\":\\\"string\\\"},\\\"name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"application_version\":{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"},\"name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"application_version\":{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"},\"name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get all Flink Applications",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkListApplications",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkListApplicationsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/deployment": {
      "post": {
        "summary": "Create an ApplicationDeployment",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkCreateApplicationDeployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateApplicationDeploymentRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    parallelism: 1,\n    restart_enabled: true,\n    starting_savepoint: 'string',\n    version_id: 'stringstringstringstringstringstring'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"parallelism\":1,\"restart_enabled\":true,\"starting_savepoint\":\"string\",\"version_id\":\"stringstringstringstringstringstring\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"parallelism\":1,\"restart_enabled\":true,\"starting_savepoint\":\"string\",\"version_id\":\"stringstringstringstringstringstring\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"parallelism\\\":1,\\\"restart_enabled\\\":true,\\\"starting_savepoint\\\":\\\"string\\\",\\\"version_id\\\":\\\"stringstringstringstringstringstring\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"parallelism\\\":1,\\\"restart_enabled\\\":true,\\\"starting_savepoint\\\":\\\"string\\\",\\\"version_id\\\":\\\"stringstringstringstringstringstring\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"parallelism\":1,\"restart_enabled\":true,\"starting_savepoint\":\"string\",\"version_id\":\"stringstringstringstringstringstring\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"parallelism\":1,\"restart_enabled\":true,\"starting_savepoint\":\"string\",\"version_id\":\"stringstringstringstringstringstring\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get all ApplicationDeployments",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkListApplicationDeployments",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkListApplicationDeploymentsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version": {
      "post": {
        "summary": "Create a Flink ApplicationVersion",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkCreateApplicationVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkCreateApplicationVersionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkCreateApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    sinks: [\n      {create_table: 'string', integration_id: 'stringstringstringstringstringstring'}\n    ],\n    sources: [\n      {create_table: 'string', integration_id: 'stringstringstringstringstringstring'}\n    ],\n    statement: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"sinks\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"sources\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"statement\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"sinks\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"sources\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"statement\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}": {
      "delete": {
        "summary": "Delete a Flink Application",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkDeleteApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteApplicationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get a Flink Application",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkGetApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetApplicationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update a Flink Application",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkUpdateApplication",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkUpdateApplicationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkUpdateApplicationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {name: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"name\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/deployment/{deployment_id}": {
      "delete": {
        "summary": "Delete an ApplicationDeployment",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkDeleteApplicationDeployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get an ApplicationDeployment",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkGetApplicationDeployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version/{application_version_id}": {
      "delete": {
        "summary": "Delete a Flink ApplicationVersion",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkDeleteApplicationVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/application_version_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkDeleteApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get a Flink ApplicationVersion",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkGetApplicationVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/application_version_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkGetApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/%7Bapplication_version_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/job/{job_id}": {
      "get": {
        "summary": "Get a Flink job info",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkJobDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/job_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkJobDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job/%7Bjob_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job/%7Bjob_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job/%7Bjob_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job/%7Bjob_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job/%7Bjob_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job/%7Bjob_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job/%7Bjob_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/job": {
      "get": {
        "summary": "Get all Flink jobs",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkJobsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkJobsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/job');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/overview": {
      "get": {
        "summary": "Get a cluster overview",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkOverview",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkOverviewResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/overview',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/overview \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/overview \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/overview\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/overview\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/overview');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/overview');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/proxy/v1/jobs/{job_id}": {
      "get": {
        "summary": "Flink REST API GET /jobs/<job_id>",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkProxyJobDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/job_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkProxyJobDetailsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/proxy/v1/jobs/{job_id}/exceptions": {
      "get": {
        "summary": "Flink REST API GET /jobs/<job_id>/exceptions",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkProxyJobExceptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/job_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkProxyJobExceptionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D/exceptions',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D/exceptions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D/exceptions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D/exceptions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D/exceptions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D/exceptions');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/%7Bjob_id%7D/exceptions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/proxy/v1/jobs": {
      "get": {
        "summary": "Flink REST API GET /jobs",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkProxyJobsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkProxyJobsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/proxy/v1/jobs/overview": {
      "get": {
        "summary": "Flink REST API GET /jobs/overview",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkProxyJobsOverview",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkProxyJobsOverviewResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/overview',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/overview \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/overview \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/overview\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/overview\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/overview');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/jobs/overview');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/proxy/v1/overview": {
      "get": {
        "summary": "Flink REST API GET /overview",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkProxyOverview",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkProxyOverviewResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/overview',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/overview \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/overview \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/overview\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/overview\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/overview');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/proxy/v1/overview');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/deployment/{deployment_id}/stop": {
      "post": {
        "summary": "Stop an ApplicationDeployment",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkStopApplicationDeployment",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkStopApplicationDeploymentResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/stop',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/stop \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/stop \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/stop\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/stop\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/stop');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/deployment/%7Bdeployment_id%7D/stop');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/flink/application/{application_id}/version/validate": {
      "post": {
        "summary": "Validate a Flink ApplicationVersion",
        "tags": [
          "Service:_Flink"
        ],
        "operationId": "ServiceFlinkValidateApplicationVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/application_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceFlinkValidateApplicationVersionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceFlinkValidateApplicationVersionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/validate',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    sinks: [\n      {create_table: 'string', integration_id: 'stringstringstringstringstringstring'}\n    ],\n    sources: [\n      {create_table: 'string', integration_id: 'stringstringstringstringstringstring'}\n    ],\n    statement: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/validate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/validate \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"sinks\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"sources\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"statement\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/validate\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/validate\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"sinks\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"sources\\\":[{\\\"create_table\\\":\\\"string\\\",\\\"integration_id\\\":\\\"stringstringstringstringstringstring\\\"}],\\\"statement\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/validate');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"sinks\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"sources\":[{\"create_table\":\"string\",\"integration_id\":\"stringstringstringstringstringstring\"}],\"statement\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/flink/application/%7Bapplication_id%7D/version/validate');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/acl": {
      "post": {
        "summary": "Add a Kafka ACL entry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaAclAdd",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaAclAddRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaAclAddResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {permission: 'admin', topic: 'string', username: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"permission\":\"admin\",\"topic\":\"string\",\"username\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"permission\":\"admin\",\"topic\":\"string\",\"username\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"permission\\\":\\\"admin\\\",\\\"topic\\\":\\\"string\\\",\\\"username\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"permission\\\":\\\"admin\\\",\\\"topic\\\":\\\"string\\\",\\\"username\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"permission\":\"admin\",\"topic\":\"string\",\"username\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"permission\":\"admin\",\"topic\":\"string\",\"username\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List Kafka ACL entries",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaAclList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaAclListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/acl/{kafka_acl_id}": {
      "delete": {
        "summary": "Delete a Kafka ACL entry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaAclDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/kafka_acl_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaAclDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl/%7Bkafka_acl_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl/%7Bkafka_acl_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl/%7Bkafka_acl_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl/%7Bkafka_acl_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl/%7Bkafka_acl_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl/%7Bkafka_acl_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/acl/%7Bkafka_acl_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connectors": {
      "post": {
        "summary": "Create a Kafka Connect connector",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectCreateConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaConnectCreateConnectorRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectCreateConnectorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {'connector.class': 'string', name: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"connector.class\":\"string\",\"name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"connector.class\":\"string\",\"name\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"connector.class\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"connector.class\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"connector.class\":\"string\",\"name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"connector.class\":\"string\",\"name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Lists Kafka connectors",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}": {
      "delete": {
        "summary": "Delete Kafka Connect connector",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectDeleteConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/connector_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectDeleteConnectorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Edit Kafka Connect connector",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectEditConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/connector_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaConnectEditConnectorRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectEditConnectorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {'connector.class': 'string', name: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"connector.class\":\"string\",\"name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"connector.class\":\"string\",\"name\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"connector.class\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"connector.class\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"connector.class\":\"string\",\"name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"connector.class\":\"string\",\"name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/available-connectors": {
      "get": {
        "summary": "Get available Kafka Connect connectors",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectGetAvailableConnectors",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectGetAvailableConnectorsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/available-connectors',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/available-connectors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/available-connectors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/available-connectors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/available-connectors\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/available-connectors');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/available-connectors');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connector-plugins/{connector_name}/configuration": {
      "get": {
        "summary": "Get Kafka Connect connector configuration schema",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectGetConnectorConfiguration",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/connector_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectGetConnectorConfigurationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connector-plugins/%7Bconnector_name%7D/configuration',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connector-plugins/%7Bconnector_name%7D/configuration \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connector-plugins/%7Bconnector_name%7D/configuration \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connector-plugins/%7Bconnector_name%7D/configuration\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connector-plugins/%7Bconnector_name%7D/configuration\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connector-plugins/%7Bconnector_name%7D/configuration');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connector-plugins/%7Bconnector_name%7D/configuration');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/status": {
      "get": {
        "summary": "Get a Kafka Connect Connector status",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectGetConnectorStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/connector_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectGetConnectorStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/status',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/status \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/status \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/status\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/status\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/status');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/status');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/pause": {
      "post": {
        "summary": "Pause a Kafka Connect Connector",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectPauseConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/connector_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectPauseConnectorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/pause',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/pause \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/pause \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/pause\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/pause\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/pause');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/pause');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/restart": {
      "post": {
        "summary": "Restart a Kafka Connect Connector",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectRestartConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/connector_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectRestartConnectorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/restart',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/restart \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/restart \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/restart\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/restart\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/restart');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/restart');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/tasks/{task_id}/restart": {
      "post": {
        "summary": "Restart a Kafka Connect Connector task",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectRestartConnectorTask",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/connector_name"
          },
          {
            "$ref": "#/components/parameters/task_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectRestartConnectorTaskResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/tasks/%7Btask_id%7D/restart',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/tasks/%7Btask_id%7D/restart \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/tasks/%7Btask_id%7D/restart \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/tasks/%7Btask_id%7D/restart\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/tasks/%7Btask_id%7D/restart\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/tasks/%7Btask_id%7D/restart');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/tasks/%7Btask_id%7D/restart');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connectors/{connector_name}/resume": {
      "post": {
        "summary": "Resume a Kafka Connect Connector",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaConnectResumeConnector",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/connector_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaConnectResumeConnectorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/resume',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/resume \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/resume \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/resume\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/resume\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/resume');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connectors/%7Bconnector_name%7D/resume');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/topic": {
      "post": {
        "summary": "Create a Kafka topic",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaTopicCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaTopicCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    cleanup_policy: 'delete',\n    config: {\n      cleanup_policy: 'delete',\n      compression_type: 'snappy',\n      delete_retention_ms: 0,\n      file_delete_delay_ms: 0,\n      flush_messages: 0,\n      flush_ms: 0,\n      index_interval_bytes: 0,\n      max_compaction_lag_ms: 0,\n      max_message_bytes: 0,\n      message_downconversion_enable: true,\n      message_format_version: '0.8.0',\n      message_timestamp_difference_max_ms: 0,\n      message_timestamp_type: 'CreateTime',\n      min_cleanable_dirty_ratio: 1,\n      min_compaction_lag_ms: 0,\n      min_insync_replicas: 1,\n      preallocate: true,\n      retention_bytes: 0,\n      retention_ms: 0,\n      segment_bytes: 14,\n      segment_index_bytes: 0,\n      segment_jitter_ms: 0,\n      segment_ms: 1,\n      unclean_leader_election_enable: true\n    },\n    min_insync_replicas: 1,\n    partitions: 1,\n    replication: 1,\n    retention_bytes: 0,\n    retention_hours: 2562047788015,\n    tags: [{key: 'string', value: 'string'}],\n    topic_name: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"cleanup_policy\":\"delete\",\"config\":{\"cleanup_policy\":\"delete\",\"compression_type\":\"snappy\",\"delete_retention_ms\":0,\"file_delete_delay_ms\":0,\"flush_messages\":0,\"flush_ms\":0,\"index_interval_bytes\":0,\"max_compaction_lag_ms\":0,\"max_message_bytes\":0,\"message_downconversion_enable\":true,\"message_format_version\":\"0.8.0\",\"message_timestamp_difference_max_ms\":0,\"message_timestamp_type\":\"CreateTime\",\"min_cleanable_dirty_ratio\":1,\"min_compaction_lag_ms\":0,\"min_insync_replicas\":1,\"preallocate\":true,\"retention_bytes\":0,\"retention_ms\":0,\"segment_bytes\":14,\"segment_index_bytes\":0,\"segment_jitter_ms\":0,\"segment_ms\":1,\"unclean_leader_election_enable\":true},\"min_insync_replicas\":1,\"partitions\":1,\"replication\":1,\"retention_bytes\":0,\"retention_hours\":2562047788015,\"tags\":[{\"key\":\"string\",\"value\":\"string\"}],\"topic_name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"cleanup_policy\":\"delete\",\"config\":{\"cleanup_policy\":\"delete\",\"compression_type\":\"snappy\",\"delete_retention_ms\":0,\"file_delete_delay_ms\":0,\"flush_messages\":0,\"flush_ms\":0,\"index_interval_bytes\":0,\"max_compaction_lag_ms\":0,\"max_message_bytes\":0,\"message_downconversion_enable\":true,\"message_format_version\":\"0.8.0\",\"message_timestamp_difference_max_ms\":0,\"message_timestamp_type\":\"CreateTime\",\"min_cleanable_dirty_ratio\":1,\"min_compaction_lag_ms\":0,\"min_insync_replicas\":1,\"preallocate\":true,\"retention_bytes\":0,\"retention_ms\":0,\"segment_bytes\":14,\"segment_index_bytes\":0,\"segment_jitter_ms\":0,\"segment_ms\":1,\"unclean_leader_election_enable\":true},\"min_insync_replicas\":1,\"partitions\":1,\"replication\":1,\"retention_bytes\":0,\"retention_hours\":2562047788015,\"tags\":[{\"key\":\"string\",\"value\":\"string\"}],\"topic_name\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"cleanup_policy\\\":\\\"delete\\\",\\\"config\\\":{\\\"cleanup_policy\\\":\\\"delete\\\",\\\"compression_type\\\":\\\"snappy\\\",\\\"delete_retention_ms\\\":0,\\\"file_delete_delay_ms\\\":0,\\\"flush_messages\\\":0,\\\"flush_ms\\\":0,\\\"index_interval_bytes\\\":0,\\\"max_compaction_lag_ms\\\":0,\\\"max_message_bytes\\\":0,\\\"message_downconversion_enable\\\":true,\\\"message_format_version\\\":\\\"0.8.0\\\",\\\"message_timestamp_difference_max_ms\\\":0,\\\"message_timestamp_type\\\":\\\"CreateTime\\\",\\\"min_cleanable_dirty_ratio\\\":1,\\\"min_compaction_lag_ms\\\":0,\\\"min_insync_replicas\\\":1,\\\"preallocate\\\":true,\\\"retention_bytes\\\":0,\\\"retention_ms\\\":0,\\\"segment_bytes\\\":14,\\\"segment_index_bytes\\\":0,\\\"segment_jitter_ms\\\":0,\\\"segment_ms\\\":1,\\\"unclean_leader_election_enable\\\":true},\\\"min_insync_replicas\\\":1,\\\"partitions\\\":1,\\\"replication\\\":1,\\\"retention_bytes\\\":0,\\\"retention_hours\\\":2562047788015,\\\"tags\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"topic_name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"cleanup_policy\\\":\\\"delete\\\",\\\"config\\\":{\\\"cleanup_policy\\\":\\\"delete\\\",\\\"compression_type\\\":\\\"snappy\\\",\\\"delete_retention_ms\\\":0,\\\"file_delete_delay_ms\\\":0,\\\"flush_messages\\\":0,\\\"flush_ms\\\":0,\\\"index_interval_bytes\\\":0,\\\"max_compaction_lag_ms\\\":0,\\\"max_message_bytes\\\":0,\\\"message_downconversion_enable\\\":true,\\\"message_format_version\\\":\\\"0.8.0\\\",\\\"message_timestamp_difference_max_ms\\\":0,\\\"message_timestamp_type\\\":\\\"CreateTime\\\",\\\"min_cleanable_dirty_ratio\\\":1,\\\"min_compaction_lag_ms\\\":0,\\\"min_insync_replicas\\\":1,\\\"preallocate\\\":true,\\\"retention_bytes\\\":0,\\\"retention_ms\\\":0,\\\"segment_bytes\\\":14,\\\"segment_index_bytes\\\":0,\\\"segment_jitter_ms\\\":0,\\\"segment_ms\\\":1,\\\"unclean_leader_election_enable\\\":true},\\\"min_insync_replicas\\\":1,\\\"partitions\\\":1,\\\"replication\\\":1,\\\"retention_bytes\\\":0,\\\"retention_hours\\\":2562047788015,\\\"tags\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"topic_name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"cleanup_policy\":\"delete\",\"config\":{\"cleanup_policy\":\"delete\",\"compression_type\":\"snappy\",\"delete_retention_ms\":0,\"file_delete_delay_ms\":0,\"flush_messages\":0,\"flush_ms\":0,\"index_interval_bytes\":0,\"max_compaction_lag_ms\":0,\"max_message_bytes\":0,\"message_downconversion_enable\":true,\"message_format_version\":\"0.8.0\",\"message_timestamp_difference_max_ms\":0,\"message_timestamp_type\":\"CreateTime\",\"min_cleanable_dirty_ratio\":1,\"min_compaction_lag_ms\":0,\"min_insync_replicas\":1,\"preallocate\":true,\"retention_bytes\":0,\"retention_ms\":0,\"segment_bytes\":14,\"segment_index_bytes\":0,\"segment_jitter_ms\":0,\"segment_ms\":1,\"unclean_leader_election_enable\":true},\"min_insync_replicas\":1,\"partitions\":1,\"replication\":1,\"retention_bytes\":0,\"retention_hours\":2562047788015,\"tags\":[{\"key\":\"string\",\"value\":\"string\"}],\"topic_name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"cleanup_policy\":\"delete\",\"config\":{\"cleanup_policy\":\"delete\",\"compression_type\":\"snappy\",\"delete_retention_ms\":0,\"file_delete_delay_ms\":0,\"flush_messages\":0,\"flush_ms\":0,\"index_interval_bytes\":0,\"max_compaction_lag_ms\":0,\"max_message_bytes\":0,\"message_downconversion_enable\":true,\"message_format_version\":\"0.8.0\",\"message_timestamp_difference_max_ms\":0,\"message_timestamp_type\":\"CreateTime\",\"min_cleanable_dirty_ratio\":1,\"min_compaction_lag_ms\":0,\"min_insync_replicas\":1,\"preallocate\":true,\"retention_bytes\":0,\"retention_ms\":0,\"segment_bytes\":14,\"segment_index_bytes\":0,\"segment_jitter_ms\":0,\"segment_ms\":1,\"unclean_leader_election_enable\":true},\"min_insync_replicas\":1,\"partitions\":1,\"replication\":1,\"retention_bytes\":0,\"retention_hours\":2562047788015,\"tags\":[{\"key\":\"string\",\"value\":\"string\"}],\"topic_name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get Kafka topic list",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaTopicList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/topic/{topic_name}": {
      "delete": {
        "summary": "Delete a Kafka topic",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaTopicDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/topic_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get Kafka topic info",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaTopicGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/topic_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update a Kafka topic",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaTopicUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/topic_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaTopicUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    config: {\n      cleanup_policy: 'delete',\n      compression_type: 'snappy',\n      delete_retention_ms: 0,\n      file_delete_delay_ms: 0,\n      flush_messages: 0,\n      flush_ms: 0,\n      index_interval_bytes: 0,\n      max_compaction_lag_ms: 0,\n      max_message_bytes: 0,\n      message_downconversion_enable: true,\n      message_format_version: '0.8.0',\n      message_timestamp_difference_max_ms: 0,\n      message_timestamp_type: 'CreateTime',\n      min_cleanable_dirty_ratio: 1,\n      min_compaction_lag_ms: 0,\n      min_insync_replicas: 1,\n      preallocate: true,\n      retention_bytes: 0,\n      retention_ms: 0,\n      segment_bytes: 14,\n      segment_index_bytes: 0,\n      segment_jitter_ms: 0,\n      segment_ms: 1,\n      unclean_leader_election_enable: true\n    },\n    min_insync_replicas: 1,\n    partitions: 1,\n    replication: 1,\n    retention_bytes: 0,\n    retention_hours: 2562047788015,\n    tags: [{key: 'string', value: 'string'}]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"config\":{\"cleanup_policy\":\"delete\",\"compression_type\":\"snappy\",\"delete_retention_ms\":0,\"file_delete_delay_ms\":0,\"flush_messages\":0,\"flush_ms\":0,\"index_interval_bytes\":0,\"max_compaction_lag_ms\":0,\"max_message_bytes\":0,\"message_downconversion_enable\":true,\"message_format_version\":\"0.8.0\",\"message_timestamp_difference_max_ms\":0,\"message_timestamp_type\":\"CreateTime\",\"min_cleanable_dirty_ratio\":1,\"min_compaction_lag_ms\":0,\"min_insync_replicas\":1,\"preallocate\":true,\"retention_bytes\":0,\"retention_ms\":0,\"segment_bytes\":14,\"segment_index_bytes\":0,\"segment_jitter_ms\":0,\"segment_ms\":1,\"unclean_leader_election_enable\":true},\"min_insync_replicas\":1,\"partitions\":1,\"replication\":1,\"retention_bytes\":0,\"retention_hours\":2562047788015,\"tags\":[{\"key\":\"string\",\"value\":\"string\"}]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"config\":{\"cleanup_policy\":\"delete\",\"compression_type\":\"snappy\",\"delete_retention_ms\":0,\"file_delete_delay_ms\":0,\"flush_messages\":0,\"flush_ms\":0,\"index_interval_bytes\":0,\"max_compaction_lag_ms\":0,\"max_message_bytes\":0,\"message_downconversion_enable\":true,\"message_format_version\":\"0.8.0\",\"message_timestamp_difference_max_ms\":0,\"message_timestamp_type\":\"CreateTime\",\"min_cleanable_dirty_ratio\":1,\"min_compaction_lag_ms\":0,\"min_insync_replicas\":1,\"preallocate\":true,\"retention_bytes\":0,\"retention_ms\":0,\"segment_bytes\":14,\"segment_index_bytes\":0,\"segment_jitter_ms\":0,\"segment_ms\":1,\"unclean_leader_election_enable\":true},\"min_insync_replicas\":1,\"partitions\":1,\"replication\":1,\"retention_bytes\":0,\"retention_hours\":2562047788015,\"tags\":[{\"key\":\"string\",\"value\":\"string\"}]}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"config\\\":{\\\"cleanup_policy\\\":\\\"delete\\\",\\\"compression_type\\\":\\\"snappy\\\",\\\"delete_retention_ms\\\":0,\\\"file_delete_delay_ms\\\":0,\\\"flush_messages\\\":0,\\\"flush_ms\\\":0,\\\"index_interval_bytes\\\":0,\\\"max_compaction_lag_ms\\\":0,\\\"max_message_bytes\\\":0,\\\"message_downconversion_enable\\\":true,\\\"message_format_version\\\":\\\"0.8.0\\\",\\\"message_timestamp_difference_max_ms\\\":0,\\\"message_timestamp_type\\\":\\\"CreateTime\\\",\\\"min_cleanable_dirty_ratio\\\":1,\\\"min_compaction_lag_ms\\\":0,\\\"min_insync_replicas\\\":1,\\\"preallocate\\\":true,\\\"retention_bytes\\\":0,\\\"retention_ms\\\":0,\\\"segment_bytes\\\":14,\\\"segment_index_bytes\\\":0,\\\"segment_jitter_ms\\\":0,\\\"segment_ms\\\":1,\\\"unclean_leader_election_enable\\\":true},\\\"min_insync_replicas\\\":1,\\\"partitions\\\":1,\\\"replication\\\":1,\\\"retention_bytes\\\":0,\\\"retention_hours\\\":2562047788015,\\\"tags\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"config\\\":{\\\"cleanup_policy\\\":\\\"delete\\\",\\\"compression_type\\\":\\\"snappy\\\",\\\"delete_retention_ms\\\":0,\\\"file_delete_delay_ms\\\":0,\\\"flush_messages\\\":0,\\\"flush_ms\\\":0,\\\"index_interval_bytes\\\":0,\\\"max_compaction_lag_ms\\\":0,\\\"max_message_bytes\\\":0,\\\"message_downconversion_enable\\\":true,\\\"message_format_version\\\":\\\"0.8.0\\\",\\\"message_timestamp_difference_max_ms\\\":0,\\\"message_timestamp_type\\\":\\\"CreateTime\\\",\\\"min_cleanable_dirty_ratio\\\":1,\\\"min_compaction_lag_ms\\\":0,\\\"min_insync_replicas\\\":1,\\\"preallocate\\\":true,\\\"retention_bytes\\\":0,\\\"retention_ms\\\":0,\\\"segment_bytes\\\":14,\\\"segment_index_bytes\\\":0,\\\"segment_jitter_ms\\\":0,\\\"segment_ms\\\":1,\\\"unclean_leader_election_enable\\\":true},\\\"min_insync_replicas\\\":1,\\\"partitions\\\":1,\\\"replication\\\":1,\\\"retention_bytes\\\":0,\\\"retention_hours\\\":2562047788015,\\\"tags\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"config\":{\"cleanup_policy\":\"delete\",\"compression_type\":\"snappy\",\"delete_retention_ms\":0,\"file_delete_delay_ms\":0,\"flush_messages\":0,\"flush_ms\":0,\"index_interval_bytes\":0,\"max_compaction_lag_ms\":0,\"max_message_bytes\":0,\"message_downconversion_enable\":true,\"message_format_version\":\"0.8.0\",\"message_timestamp_difference_max_ms\":0,\"message_timestamp_type\":\"CreateTime\",\"min_cleanable_dirty_ratio\":1,\"min_compaction_lag_ms\":0,\"min_insync_replicas\":1,\"preallocate\":true,\"retention_bytes\":0,\"retention_ms\":0,\"segment_bytes\":14,\"segment_index_bytes\":0,\"segment_jitter_ms\":0,\"segment_ms\":1,\"unclean_leader_election_enable\":true},\"min_insync_replicas\":1,\"partitions\":1,\"replication\":1,\"retention_bytes\":0,\"retention_hours\":2562047788015,\"tags\":[{\"key\":\"string\",\"value\":\"string\"}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"config\":{\"cleanup_policy\":\"delete\",\"compression_type\":\"snappy\",\"delete_retention_ms\":0,\"file_delete_delay_ms\":0,\"flush_messages\":0,\"flush_ms\":0,\"index_interval_bytes\":0,\"max_compaction_lag_ms\":0,\"max_message_bytes\":0,\"message_downconversion_enable\":true,\"message_format_version\":\"0.8.0\",\"message_timestamp_difference_max_ms\":0,\"message_timestamp_type\":\"CreateTime\",\"min_cleanable_dirty_ratio\":1,\"min_compaction_lag_ms\":0,\"min_insync_replicas\":1,\"preallocate\":true,\"retention_bytes\":0,\"retention_ms\":0,\"segment_bytes\":14,\"segment_index_bytes\":0,\"segment_jitter_ms\":0,\"segment_ms\":1,\"unclean_leader_election_enable\":true},\"min_insync_replicas\":1,\"partitions\":1,\"replication\":1,\"retention_bytes\":0,\"retention_hours\":2562047788015,\"tags\":[{\"key\":\"string\",\"value\":\"string\"}]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/topic/%7Btopic_name%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/rest/topics/{topic_name}/messages": {
      "post": {
        "summary": "List kafka topic messages",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaTopicMessageList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/topic_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaTopicMessageListRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicMessageListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/messages',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {format: 'binary', max_bytes: 1024, partitions: {}, timeout: 3000},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/messages \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"format\":\"binary\",\"max_bytes\":1024,\"partitions\":{},\"timeout\":3000}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"format\":\"binary\",\"max_bytes\":1024,\"partitions\":{},\"timeout\":3000}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/messages \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"format\\\":\\\"binary\\\",\\\"max_bytes\\\":1024,\\\"partitions\\\":{},\\\"timeout\\\":3000}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/messages\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/messages\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"format\\\":\\\"binary\\\",\\\"max_bytes\\\":1024,\\\"partitions\\\":{},\\\"timeout\\\":3000}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/messages');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"format\":\"binary\",\"max_bytes\":1024,\"partitions\":{},\"timeout\":3000}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"format\":\"binary\",\"max_bytes\":1024,\"partitions\":{},\"timeout\":3000}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/messages');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/rest/topics/{topic_name}/produce": {
      "post": {
        "summary": "Produce message into a kafka topic",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceKafkaTopicMessageProduce",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/topic_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaTopicMessageProduceRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaTopicMessageProduceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/produce',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    format: 'binary',\n    key_schema: 'stringstringstring',\n    key_schema_id: 1,\n    records: [{key: {}, partition: 10000, value: {}}],\n    value_schema: 'stringstringstring',\n    value_schema_id: 1\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/produce \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"format\":\"binary\",\"key_schema\":\"stringstringstring\",\"key_schema_id\":1,\"records\":[{\"key\":{},\"partition\":10000,\"value\":{}}],\"value_schema\":\"stringstringstring\",\"value_schema_id\":1}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"format\":\"binary\",\"key_schema\":\"stringstringstring\",\"key_schema_id\":1,\"records\":[{\"key\":{},\"partition\":10000,\"value\":{}}],\"value_schema\":\"stringstringstring\",\"value_schema_id\":1}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/produce \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"format\\\":\\\"binary\\\",\\\"key_schema\\\":\\\"stringstringstring\\\",\\\"key_schema_id\\\":1,\\\"records\\\":[{\\\"key\\\":{},\\\"partition\\\":10000,\\\"value\\\":{}}],\\\"value_schema\\\":\\\"stringstringstring\\\",\\\"value_schema_id\\\":1}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/produce\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/produce\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"format\\\":\\\"binary\\\",\\\"key_schema\\\":\\\"stringstringstring\\\",\\\"key_schema_id\\\":1,\\\"records\\\":[{\\\"key\\\":{},\\\"partition\\\":10000,\\\"value\\\":{}}],\\\"value_schema\\\":\\\"stringstringstring\\\",\\\"value_schema_id\\\":1}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/produce');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"format\":\"binary\",\"key_schema\":\"stringstringstring\",\"key_schema_id\":1,\"records\":[{\"key\":{},\"partition\":10000,\"value\":{}}],\"value_schema\":\"stringstringstring\",\"value_schema_id\":1}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"format\":\"binary\",\"key_schema\":\"stringstringstring\",\"key_schema_id\":1,\"records\":[{\"key\":{},\"partition\":10000,\"value\":{}}],\"value_schema\":\"stringstringstring\",\"value_schema_id\":1}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/rest/topics/%7Btopic_name%7D/produce');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema-registry/acl": {
      "post": {
        "summary": "Add a Schema Registry ACL entry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistryAclAdd",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistryAclAddRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryAclAddResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {permission: 'schema_registry_read', resource: 'string', username: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"permission\":\"schema_registry_read\",\"resource\":\"string\",\"username\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"permission\":\"schema_registry_read\",\"resource\":\"string\",\"username\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"permission\\\":\\\"schema_registry_read\\\",\\\"resource\\\":\\\"string\\\",\\\"username\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"permission\\\":\\\"schema_registry_read\\\",\\\"resource\\\":\\\"string\\\",\\\"username\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"permission\":\"schema_registry_read\",\"resource\":\"string\",\"username\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"permission\":\"schema_registry_read\",\"resource\":\"string\",\"username\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List Schema Registry ACL entries",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistryAclList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryAclListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema-registry/acl/{schema_registry_acl_id}": {
      "delete": {
        "summary": "Delete a Schema Registry ACL entry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistryAclDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/schema_registry_acl_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryAclDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl/%7Bschema_registry_acl_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl/%7Bschema_registry_acl_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl/%7Bschema_registry_acl_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl/%7Bschema_registry_acl_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl/%7Bschema_registry_acl_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl/%7Bschema_registry_acl_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema-registry/acl/%7Bschema_registry_acl_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/compatibility/subjects/{subject_name}/versions/{version_id:latest|\\d+}": {
      "post": {
        "summary": "Check compatibility of schema in Schema Registry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistryCompatibility",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistryCompatibilityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryCompatibilityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/compatibility/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {schema: 'string', schemaType: 'AVRO'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/compatibility/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"schema\":\"string\",\"schemaType\":\"AVRO\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"schema\":\"string\",\"schemaType\":\"AVRO\"}' |  \\\n  http POST 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/compatibility/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D' \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"schema\\\":\\\"string\\\",\\\"schemaType\\\":\\\"AVRO\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/compatibility/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/compatibility/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"schema\\\":\\\"string\\\",\\\"schemaType\\\":\\\"AVRO\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/compatibility/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"schema\":\"string\",\"schemaType\":\"AVRO\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"schema\":\"string\",\"schemaType\":\"AVRO\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/compatibility/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/config": {
      "get": {
        "summary": "Get global configuration for Schema Registry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistryGlobalConfigGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryGlobalConfigGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Edit global configuration for Schema Registry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistryGlobalConfigPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistryGlobalConfigPutRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistryGlobalConfigPutResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {compatibility: 'BACKWARD'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"compatibility\":\"BACKWARD\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"compatibility\":\"BACKWARD\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"compatibility\\\":\\\"BACKWARD\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"compatibility\\\":\\\"BACKWARD\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"compatibility\":\"BACKWARD\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"compatibility\":\"BACKWARD\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/schemas/ids/{schema_id}": {
      "get": {
        "summary": "Get schema in Schema Registry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySchemaGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/schema_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySchemaGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/schemas/ids/%7Bschema_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/schemas/ids/%7Bschema_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/schemas/ids/%7Bschema_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/schemas/ids/%7Bschema_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/schemas/ids/%7Bschema_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/schemas/ids/%7Bschema_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/schemas/ids/%7Bschema_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/config/{subject_name}": {
      "get": {
        "summary": "Get configuration for Schema Registry subject",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjectConfigGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectConfigGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Edit configuration for Schema Registry subject",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjectConfigPut",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectConfigPutRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectConfigPutResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {compatibility: 'BACKWARD'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"compatibility\":\"BACKWARD\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"compatibility\":\"BACKWARD\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"compatibility\\\":\\\"BACKWARD\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"compatibility\\\":\\\"BACKWARD\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"compatibility\":\"BACKWARD\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"compatibility\":\"BACKWARD\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/config/%7Bsubject_name%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects/{subject_name}": {
      "delete": {
        "summary": "Delete Schema Registry subject",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjectDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects/{subject_name}/versions/{version_id:latest|\\d+}": {
      "delete": {
        "summary": "Delete Schema Registry subject version",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjectVersionDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D' \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get Schema Registry Subject version",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjectVersionGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D' \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects/{subject_name}/versions": {
      "post": {
        "summary": "Register a new Schema in Schema Registry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjectVersionPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionPostRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionPostResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {schema: 'string', schemaType: 'AVRO'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"schema\":\"string\",\"schemaType\":\"AVRO\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"schema\":\"string\",\"schemaType\":\"AVRO\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"schema\\\":\\\"string\\\",\\\"schemaType\\\":\\\"AVRO\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"schema\\\":\\\"string\\\",\\\"schemaType\\\":\\\"AVRO\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"schema\":\"string\",\"schemaType\":\"AVRO\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"schema\":\"string\",\"schemaType\":\"AVRO\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get Schema Registry subject versions",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjectVersionsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects/{subject_name}/versions/{version_id:latest|\\d+}/schema": {
      "get": {
        "summary": "DEPRECATED: Get raw schema of a specific version in Schema Registry",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjectVersionSchemaGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/subject_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectVersionSchemaGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D/schema',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D/schema' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D/schema' \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D/schema\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D/schema\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D/schema');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects/%7Bsubject_name%7D/versions/%7Bversion_id:latest%7C/d+%7D/schema');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kafka/schema/subjects": {
      "get": {
        "summary": "Lists Schema Registry subjects",
        "tags": [
          "Service:_Kafka"
        ],
        "operationId": "ServiceSchemaRegistrySubjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSchemaRegistrySubjectsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kafka/schema/subjects');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/mirrormaker/replication-flows": {
      "post": {
        "summary": "Create a replication flow",
        "tags": [
          "Service:_Kafka_MirrorMaker"
        ],
        "operationId": "ServiceKafkaMirrorMakerCreateReplicationFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaMirrorMakerCreateReplicationFlowRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerCreateReplicationFlowResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    config_properties_exclude: 'string',\n    emit_heartbeats_enabled: true,\n    enabled: true,\n    offset_syncs_topic_location: 'source',\n    replication_policy_class: 'org.apache.kafka.connect.mirror.DefaultReplicationPolicy',\n    source_cluster: 'string',\n    sync_group_offsets_enabled: true,\n    sync_group_offsets_interval_seconds: 1,\n    target_cluster: 'string',\n    topics: ['string'],\n    'topics.blacklist': ['string']\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"config_properties_exclude\":\"string\",\"emit_heartbeats_enabled\":true,\"enabled\":true,\"offset_syncs_topic_location\":\"source\",\"replication_policy_class\":\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\",\"source_cluster\":\"string\",\"sync_group_offsets_enabled\":true,\"sync_group_offsets_interval_seconds\":1,\"target_cluster\":\"string\",\"topics\":[\"string\"],\"topics.blacklist\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"config_properties_exclude\":\"string\",\"emit_heartbeats_enabled\":true,\"enabled\":true,\"offset_syncs_topic_location\":\"source\",\"replication_policy_class\":\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\",\"source_cluster\":\"string\",\"sync_group_offsets_enabled\":true,\"sync_group_offsets_interval_seconds\":1,\"target_cluster\":\"string\",\"topics\":[\"string\"],\"topics.blacklist\":[\"string\"]}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"config_properties_exclude\\\":\\\"string\\\",\\\"emit_heartbeats_enabled\\\":true,\\\"enabled\\\":true,\\\"offset_syncs_topic_location\\\":\\\"source\\\",\\\"replication_policy_class\\\":\\\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\\\",\\\"source_cluster\\\":\\\"string\\\",\\\"sync_group_offsets_enabled\\\":true,\\\"sync_group_offsets_interval_seconds\\\":1,\\\"target_cluster\\\":\\\"string\\\",\\\"topics\\\":[\\\"string\\\"],\\\"topics.blacklist\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"config_properties_exclude\\\":\\\"string\\\",\\\"emit_heartbeats_enabled\\\":true,\\\"enabled\\\":true,\\\"offset_syncs_topic_location\\\":\\\"source\\\",\\\"replication_policy_class\\\":\\\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\\\",\\\"source_cluster\\\":\\\"string\\\",\\\"sync_group_offsets_enabled\\\":true,\\\"sync_group_offsets_interval_seconds\\\":1,\\\"target_cluster\\\":\\\"string\\\",\\\"topics\\\":[\\\"string\\\"],\\\"topics.blacklist\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"config_properties_exclude\":\"string\",\"emit_heartbeats_enabled\":true,\"enabled\":true,\"offset_syncs_topic_location\":\"source\",\"replication_policy_class\":\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\",\"source_cluster\":\"string\",\"sync_group_offsets_enabled\":true,\"sync_group_offsets_interval_seconds\":1,\"target_cluster\":\"string\",\"topics\":[\"string\"],\"topics.blacklist\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"config_properties_exclude\":\"string\",\"emit_heartbeats_enabled\":true,\"enabled\":true,\"offset_syncs_topic_location\":\"source\",\"replication_policy_class\":\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\",\"source_cluster\":\"string\",\"sync_group_offsets_enabled\":true,\"sync_group_offsets_interval_seconds\":1,\"target_cluster\":\"string\",\"topics\":[\"string\"],\"topics.blacklist\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get replication flows",
        "tags": [
          "Service:_Kafka_MirrorMaker"
        ],
        "operationId": "ServiceKafkaMirrorMakerGetReplicationFlows",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerGetReplicationFlowsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/mirrormaker/replication-flows/{source_cluster}/{target_cluster}": {
      "delete": {
        "summary": "Delete a replication flow",
        "tags": [
          "Service:_Kafka_MirrorMaker"
        ],
        "operationId": "ServiceKafkaMirrorMakerDeleteReplicationFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/source_cluster"
          },
          {
            "$ref": "#/components/parameters/target_cluster"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerDeleteReplicationFlowResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get a replication flow",
        "tags": [
          "Service:_Kafka_MirrorMaker"
        ],
        "operationId": "ServiceKafkaMirrorMakerGetReplicationFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/source_cluster"
          },
          {
            "$ref": "#/components/parameters/target_cluster"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerGetReplicationFlowResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update a replication flow",
        "tags": [
          "Service:_Kafka_MirrorMaker"
        ],
        "operationId": "ServiceKafkaMirrorMakerPatchReplicationFlow",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/source_cluster"
          },
          {
            "$ref": "#/components/parameters/target_cluster"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceKafkaMirrorMakerPatchReplicationFlowRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKafkaMirrorMakerPatchReplicationFlowResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    config_properties_exclude: 'string',\n    emit_heartbeats_enabled: true,\n    enabled: true,\n    offset_syncs_topic_location: 'source',\n    replication_policy_class: 'org.apache.kafka.connect.mirror.DefaultReplicationPolicy',\n    sync_group_offsets_enabled: true,\n    sync_group_offsets_interval_seconds: 1,\n    topics: ['string'],\n    'topics.blacklist': ['string']\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"config_properties_exclude\":\"string\",\"emit_heartbeats_enabled\":true,\"enabled\":true,\"offset_syncs_topic_location\":\"source\",\"replication_policy_class\":\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\",\"sync_group_offsets_enabled\":true,\"sync_group_offsets_interval_seconds\":1,\"topics\":[\"string\"],\"topics.blacklist\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"config_properties_exclude\":\"string\",\"emit_heartbeats_enabled\":true,\"enabled\":true,\"offset_syncs_topic_location\":\"source\",\"replication_policy_class\":\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\",\"sync_group_offsets_enabled\":true,\"sync_group_offsets_interval_seconds\":1,\"topics\":[\"string\"],\"topics.blacklist\":[\"string\"]}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"config_properties_exclude\\\":\\\"string\\\",\\\"emit_heartbeats_enabled\\\":true,\\\"enabled\\\":true,\\\"offset_syncs_topic_location\\\":\\\"source\\\",\\\"replication_policy_class\\\":\\\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\\\",\\\"sync_group_offsets_enabled\\\":true,\\\"sync_group_offsets_interval_seconds\\\":1,\\\"topics\\\":[\\\"string\\\"],\\\"topics.blacklist\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"config_properties_exclude\\\":\\\"string\\\",\\\"emit_heartbeats_enabled\\\":true,\\\"enabled\\\":true,\\\"offset_syncs_topic_location\\\":\\\"source\\\",\\\"replication_policy_class\\\":\\\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\\\",\\\"sync_group_offsets_enabled\\\":true,\\\"sync_group_offsets_interval_seconds\\\":1,\\\"topics\\\":[\\\"string\\\"],\\\"topics.blacklist\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"config_properties_exclude\":\"string\",\"emit_heartbeats_enabled\":true,\"enabled\":true,\"offset_syncs_topic_location\":\"source\",\"replication_policy_class\":\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\",\"sync_group_offsets_enabled\":true,\"sync_group_offsets_interval_seconds\":1,\"topics\":[\"string\"],\"topics.blacklist\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"config_properties_exclude\":\"string\",\"emit_heartbeats_enabled\":true,\"enabled\":true,\"offset_syncs_topic_location\":\"source\",\"replication_policy_class\":\"org.apache.kafka.connect.mirror.DefaultReplicationPolicy\",\"sync_group_offsets_enabled\":true,\"sync_group_offsets_interval_seconds\":1,\"topics\":[\"string\"],\"topics.blacklist\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mirrormaker/replication-flows/%7Bsource_cluster%7D/%7Btarget_cluster%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/mysql/query/stats": {
      "post": {
        "summary": "Fetch MySQL service query statistics",
        "tags": [
          "Service:_MySQL"
        ],
        "operationId": "MySQLServiceQueryStatistics",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MySQLServiceQueryStatisticsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MySQLServiceQueryStatisticsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mysql/query/stats',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {limit: 1, offset: 0, order_by: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mysql/query/stats \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mysql/query/stats \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"limit\\\":1,\\\"offset\\\":0,\\\"order_by\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mysql/query/stats\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mysql/query/stats\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"limit\\\":1,\\\"offset\\\":0,\\\"order_by\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mysql/query/stats');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/mysql/query/stats');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/opensearch/acl": {
      "get": {
        "summary": "Show OpenSearch ACL configuration",
        "tags": [
          "Service:_OpenSearch"
        ],
        "operationId": "ServiceOpenSearchAclGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchAclGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "post": {
        "summary": "Set OpenSearch ACL configuration",
        "tags": [
          "Service:_OpenSearch"
        ],
        "operationId": "ServiceOpenSearchAclSet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOpenSearchAclSetRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchAclSetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    opensearch_acl_config: {\n      acls: [{rules: [{index: 'string', permission: 'deny'}], username: 'string'}],\n      enabled: true\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"opensearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"opensearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"opensearch_acl_config\\\":{\\\"acls\\\":[{\\\"rules\\\":[{\\\"index\\\":\\\"string\\\",\\\"permission\\\":\\\"deny\\\"}],\\\"username\\\":\\\"string\\\"}],\\\"enabled\\\":true}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"opensearch_acl_config\\\":{\\\"acls\\\":[{\\\"rules\\\":[{\\\"index\\\":\\\"string\\\",\\\"permission\\\":\\\"deny\\\"}],\\\"username\\\":\\\"string\\\"}],\\\"enabled\\\":true}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"opensearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"opensearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update OpenSearch ACL configuration",
        "tags": [
          "Service:_OpenSearch"
        ],
        "operationId": "ServiceOpenSearchAclUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOpenSearchAclUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOpenSearchAclUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    opensearch_acl_config: {\n      acls: [{rules: [{index: 'string', permission: 'deny'}], username: 'string'}],\n      enabled: true\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"opensearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"opensearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"opensearch_acl_config\\\":{\\\"acls\\\":[{\\\"rules\\\":[{\\\"index\\\":\\\"string\\\",\\\"permission\\\":\\\"deny\\\"}],\\\"username\\\":\\\"string\\\"}],\\\"enabled\\\":true}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"opensearch_acl_config\\\":{\\\"acls\\\":[{\\\"rules\\\":[{\\\"index\\\":\\\"string\\\",\\\"permission\\\":\\\"deny\\\"}],\\\"username\\\":\\\"string\\\"}],\\\"enabled\\\":true}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"opensearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"opensearch_acl_config\":{\"acls\":[{\"rules\":[{\"index\":\"string\",\"permission\":\"deny\"}],\"username\":\"string\"}],\"enabled\":true}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/opensearch/acl');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/pg/available-extensions": {
      "get": {
        "summary": "List PostgreSQL extensions that can be loaded with CREATE EXTENSION in this service",
        "tags": [
          "Service:_PostgreSQL"
        ],
        "operationId": "PGServiceAvailableExtensions",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PGServiceAvailableExtensionsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/available-extensions',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/available-extensions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/available-extensions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/available-extensions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/available-extensions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/available-extensions');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/available-extensions');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/pg/query/stats": {
      "post": {
        "summary": "Fetch PostgreSQL service query statistics",
        "tags": [
          "Service:_PostgreSQL"
        ],
        "operationId": "PGServiceQueryStatistics",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PGServiceQueryStatisticsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PGServiceQueryStatisticsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/query/stats',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {limit: 1, offset: 0, order_by: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/query/stats \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/query/stats \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"limit\\\":1,\\\"offset\\\":0,\\\"order_by\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/query/stats\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/query/stats\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"limit\\\":1,\\\"offset\\\":0,\\\"order_by\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/query/stats');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/pg/query/stats');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/query/stats": {
      "post": {
        "summary": "Fetch PostgreSQL service query statistics (DEPRECATED: Use /project/$project/service/$service/pg/query/stats instead)",
        "tags": [
          "Service:_PostgreSQL"
        ],
        "operationId": "PGServiceQueryStatisticsDeprecated",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PGServiceQueryStatisticsDeprecatedRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PGServiceQueryStatisticsDeprecatedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {limit: 1, offset: 0, order_by: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"limit\\\":1,\\\"offset\\\":0,\\\"order_by\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"limit\\\":1,\\\"offset\\\":0,\\\"order_by\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connection_pool": {
      "post": {
        "summary": "Create a new connection pool for service",
        "tags": [
          "Service:_PostgreSQL"
        ],
        "operationId": "ServicePGBouncerCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePGBouncerCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePGBouncerCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    database: 'string',\n    pool_mode: 'session',\n    pool_name: 'string',\n    pool_size: 1,\n    username: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"database\":\"string\",\"pool_mode\":\"session\",\"pool_name\":\"string\",\"pool_size\":1,\"username\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"database\":\"string\",\"pool_mode\":\"session\",\"pool_name\":\"string\",\"pool_size\":1,\"username\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"database\\\":\\\"string\\\",\\\"pool_mode\\\":\\\"session\\\",\\\"pool_name\\\":\\\"string\\\",\\\"pool_size\\\":1,\\\"username\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"database\\\":\\\"string\\\",\\\"pool_mode\\\":\\\"session\\\",\\\"pool_name\\\":\\\"string\\\",\\\"pool_size\\\":1,\\\"username\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"database\":\"string\",\"pool_mode\":\"session\",\"pool_name\":\"string\",\"pool_size\":1,\"username\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"database\":\"string\",\"pool_mode\":\"session\",\"pool_name\":\"string\",\"pool_size\":1,\"username\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/connection_pool/{pool_name}": {
      "delete": {
        "summary": "Delete a connection pool",
        "tags": [
          "Service:_PostgreSQL"
        ],
        "operationId": "ServicePGBouncerDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/pool_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePGBouncerDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update a connection pool",
        "tags": [
          "Service:_PostgreSQL"
        ],
        "operationId": "ServicePGBouncerUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/pool_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePGBouncerUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePGBouncerUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {database: 'string', pool_mode: 'session', pool_size: 1, username: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"database\":\"string\",\"pool_mode\":\"session\",\"pool_size\":1,\"username\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"database\":\"string\",\"pool_mode\":\"session\",\"pool_size\":1,\"username\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"database\\\":\\\"string\\\",\\\"pool_mode\\\":\\\"session\\\",\\\"pool_size\\\":1,\\\"username\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"database\\\":\\\"string\\\",\\\"pool_mode\\\":\\\"session\\\",\\\"pool_size\\\":1,\\\"username\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"database\":\"string\",\"pool_mode\":\"session\",\"pool_size\":1,\"username\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"database\":\"string\",\"pool_mode\":\"session\",\"pool_size\":1,\"username\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/connection_pool/%7Bpool_name%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service_types": {
      "get": {
        "summary": "List service types for a project",
        "tags": [
          "Service"
        ],
        "operationId": "ListProjectServiceTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProjectServiceTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service_types',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service_types \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service_types \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service_types\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service_types\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service_types');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service_types');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/service_types": {
      "get": {
        "summary": "List publicly available service types",
        "tags": [
          "Service"
        ],
        "operationId": "ListPublicServiceTypes",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPublicServiceTypesResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {method: 'GET', url: 'https://api.aiven.io/v1/service_types'};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/service_types"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/service_types"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/service_types\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/service_types\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/service_types');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/service_types');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/service_versions": {
      "get": {
        "summary": "List service versions",
        "tags": [
          "Service"
        ],
        "operationId": "ListServiceVersions",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceVersionsResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {method: 'GET', url: 'https://api.aiven.io/v1/service_versions'};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/service_versions"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/service_versions"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/service_versions\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/service_versions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/service_versions');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/service_versions');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/tenants/{tenant}/pg-available-extensions": {
      "get": {
        "summary": "List PostgreSQL extensions available for this tenant grouped by PG version",
        "tags": [
          "Service"
        ],
        "operationId": "PgAvailableExtensions",
        "parameters": [
          {
            "$ref": "#/components/parameters/tenant"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PgAvailableExtensionsResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/tenants/%7Btenant%7D/pg-available-extensions'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/tenants/%7Btenant%7D/pg-available-extensions"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/tenants/%7Btenant%7D/pg-available-extensions"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/tenants/%7Btenant%7D/pg-available-extensions\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/tenants/%7Btenant%7D/pg-available-extensions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/tenants/%7Btenant%7D/pg-available-extensions');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/tenants/%7Btenant%7D/pg-available-extensions');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/logs": {
      "post": {
        "summary": "Get service log entries",
        "tags": [
          "Service"
        ],
        "operationId": "ProjectGetServiceLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectGetServiceLogsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectGetServiceLogsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/logs',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {limit: 1, offset: 'string', sort_order: 'desc'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/logs \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"limit\":1,\"offset\":\"string\",\"sort_order\":\"desc\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"limit\":1,\"offset\":\"string\",\"sort_order\":\"desc\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/logs \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"limit\\\":1,\\\"offset\\\":\\\"string\\\",\\\"sort_order\\\":\\\"desc\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/logs\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/logs\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"limit\\\":1,\\\"offset\\\":\\\"string\\\",\\\"sort_order\\\":\\\"desc\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/logs');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"limit\":1,\"offset\":\"string\",\"sort_order\":\"desc\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"limit\":1,\"offset\":\"string\",\"sort_order\":\"desc\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/logs');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/tags": {
      "get": {
        "summary": "List all tags attached to the service",
        "tags": [
          "Service"
        ],
        "operationId": "ProjectServiceTagsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServiceTagsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Replace all project tags with a new set of tags, deleting old ones",
        "tags": [
          "Service"
        ],
        "operationId": "ProjectServiceTagsReplace",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectServiceTagsReplaceRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServiceTagsReplaceResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {tags: {}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"tags\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"tags\":{}}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"tags\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"tags\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"tags\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"tags\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "patch": {
        "summary": "Update one or more tags, creating ones that don't exist, and deleting ones given NULL value",
        "tags": [
          "Service"
        ],
        "operationId": "ProjectServiceTagsUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectServiceTagsUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectServiceTagsUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {tags: {}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"tags\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"tags\":{}}' |  \\\n  http PATCH https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"tags\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"tags\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"tags\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"tags\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/tags');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/alerts": {
      "get": {
        "summary": "List active alerts for service",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceAlertsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAlertsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/alerts',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/alerts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/alerts \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/alerts\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/alerts\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/alerts');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/alerts');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/backup_to_another_region/report": {
      "post": {
        "summary": "Get service's backup to another region information",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceBackupToAnotherRegionReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceBackupToAnotherRegionReportRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBackupToAnotherRegionReportResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backup_to_another_region/report',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {period: 'hour'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backup_to_another_region/report \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"period\":\"hour\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"period\":\"hour\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backup_to_another_region/report \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"period\\\":\\\"hour\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backup_to_another_region/report\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backup_to_another_region/report\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"period\\\":\\\"hour\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backup_to_another_region/report');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"period\":\"hour\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"period\":\"hour\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backup_to_another_region/report');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/backups": {
      "get": {
        "summary": "Get service backup information",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceBackupsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBackupsGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backups',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backups \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backups \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backups\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backups\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backups');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/backups');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/query/cancel": {
      "post": {
        "summary": "Cancel specified query from service",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceCancelQuery",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCancelQueryRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCancelQueryResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/cancel',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {pid: 0, terminate: true},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/cancel \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"pid\":0,\"terminate\":true}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"pid\":0,\"terminate\":true}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/cancel \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"pid\\\":0,\\\"terminate\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/cancel\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/cancel\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"pid\\\":0,\\\"terminate\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/cancel');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"pid\":0,\"terminate\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"pid\":0,\"terminate\":true}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/cancel');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service": {
      "post": {
        "summary": "Create a service",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    cloud: 'string',\n    copy_tags: true,\n    disk_space_mb: 0,\n    group_name: 'string',\n    maintenance: {dow: 'monday', time: 'stringst'},\n    plan: 'string',\n    project_vpc_id: 'stringstringstringstringstringstring',\n    service_integrations: [\n      {\n        dest_endpoint_id: 'string',\n        dest_project: 'string',\n        dest_service: 'string',\n        integration_type: 'alertmanager',\n        source_endpoint_id: 'string',\n        source_project: 'string',\n        source_service: 'string',\n        user_config: {}\n      }\n    ],\n    service_name: 'string',\n    service_type: 'string',\n    static_ips: ['string'],\n    tags: {},\n    termination_protection: true,\n    user_config: {}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"cloud\":\"string\",\"copy_tags\":true,\"disk_space_mb\":0,\"group_name\":\"string\",\"maintenance\":{\"dow\":\"monday\",\"time\":\"stringst\"},\"plan\":\"string\",\"project_vpc_id\":\"stringstringstringstringstringstring\",\"service_integrations\":[{\"dest_endpoint_id\":\"string\",\"dest_project\":\"string\",\"dest_service\":\"string\",\"integration_type\":\"alertmanager\",\"source_endpoint_id\":\"string\",\"source_project\":\"string\",\"source_service\":\"string\",\"user_config\":{}}],\"service_name\":\"string\",\"service_type\":\"string\",\"static_ips\":[\"string\"],\"tags\":{},\"termination_protection\":true,\"user_config\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"cloud\":\"string\",\"copy_tags\":true,\"disk_space_mb\":0,\"group_name\":\"string\",\"maintenance\":{\"dow\":\"monday\",\"time\":\"stringst\"},\"plan\":\"string\",\"project_vpc_id\":\"stringstringstringstringstringstring\",\"service_integrations\":[{\"dest_endpoint_id\":\"string\",\"dest_project\":\"string\",\"dest_service\":\"string\",\"integration_type\":\"alertmanager\",\"source_endpoint_id\":\"string\",\"source_project\":\"string\",\"source_service\":\"string\",\"user_config\":{}}],\"service_name\":\"string\",\"service_type\":\"string\",\"static_ips\":[\"string\"],\"tags\":{},\"termination_protection\":true,\"user_config\":{}}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"cloud\\\":\\\"string\\\",\\\"copy_tags\\\":true,\\\"disk_space_mb\\\":0,\\\"group_name\\\":\\\"string\\\",\\\"maintenance\\\":{\\\"dow\\\":\\\"monday\\\",\\\"time\\\":\\\"stringst\\\"},\\\"plan\\\":\\\"string\\\",\\\"project_vpc_id\\\":\\\"stringstringstringstringstringstring\\\",\\\"service_integrations\\\":[{\\\"dest_endpoint_id\\\":\\\"string\\\",\\\"dest_project\\\":\\\"string\\\",\\\"dest_service\\\":\\\"string\\\",\\\"integration_type\\\":\\\"alertmanager\\\",\\\"source_endpoint_id\\\":\\\"string\\\",\\\"source_project\\\":\\\"string\\\",\\\"source_service\\\":\\\"string\\\",\\\"user_config\\\":{}}],\\\"service_name\\\":\\\"string\\\",\\\"service_type\\\":\\\"string\\\",\\\"static_ips\\\":[\\\"string\\\"],\\\"tags\\\":{},\\\"termination_protection\\\":true,\\\"user_config\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"cloud\\\":\\\"string\\\",\\\"copy_tags\\\":true,\\\"disk_space_mb\\\":0,\\\"group_name\\\":\\\"string\\\",\\\"maintenance\\\":{\\\"dow\\\":\\\"monday\\\",\\\"time\\\":\\\"stringst\\\"},\\\"plan\\\":\\\"string\\\",\\\"project_vpc_id\\\":\\\"stringstringstringstringstringstring\\\",\\\"service_integrations\\\":[{\\\"dest_endpoint_id\\\":\\\"string\\\",\\\"dest_project\\\":\\\"string\\\",\\\"dest_service\\\":\\\"string\\\",\\\"integration_type\\\":\\\"alertmanager\\\",\\\"source_endpoint_id\\\":\\\"string\\\",\\\"source_project\\\":\\\"string\\\",\\\"source_service\\\":\\\"string\\\",\\\"user_config\\\":{}}],\\\"service_name\\\":\\\"string\\\",\\\"service_type\\\":\\\"string\\\",\\\"static_ips\\\":[\\\"string\\\"],\\\"tags\\\":{},\\\"termination_protection\\\":true,\\\"user_config\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"cloud\":\"string\",\"copy_tags\":true,\"disk_space_mb\":0,\"group_name\":\"string\",\"maintenance\":{\"dow\":\"monday\",\"time\":\"stringst\"},\"plan\":\"string\",\"project_vpc_id\":\"stringstringstringstringstringstring\",\"service_integrations\":[{\"dest_endpoint_id\":\"string\",\"dest_project\":\"string\",\"dest_service\":\"string\",\"integration_type\":\"alertmanager\",\"source_endpoint_id\":\"string\",\"source_project\":\"string\",\"source_service\":\"string\",\"user_config\":{}}],\"service_name\":\"string\",\"service_type\":\"string\",\"static_ips\":[\"string\"],\"tags\":{},\"termination_protection\":true,\"user_config\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"cloud\":\"string\",\"copy_tags\":true,\"disk_space_mb\":0,\"group_name\":\"string\",\"maintenance\":{\"dow\":\"monday\",\"time\":\"stringst\"},\"plan\":\"string\",\"project_vpc_id\":\"stringstringstringstringstringstring\",\"service_integrations\":[{\"dest_endpoint_id\":\"string\",\"dest_project\":\"string\",\"dest_service\":\"string\",\"integration_type\":\"alertmanager\",\"source_endpoint_id\":\"string\",\"source_project\":\"string\",\"source_service\":\"string\",\"user_config\":{}}],\"service_name\":\"string\",\"service_type\":\"string\",\"static_ips\":[\"string\"],\"tags\":{},\"termination_protection\":true,\"user_config\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List services",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/db": {
      "post": {
        "summary": "Create a new logical database for service",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceDatabaseCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDatabaseCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDatabaseCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {database: 'string', lc_collate: 'string', lc_ctype: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"database\":\"string\",\"lc_collate\":\"string\",\"lc_ctype\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"database\":\"string\",\"lc_collate\":\"string\",\"lc_ctype\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"database\\\":\\\"string\\\",\\\"lc_collate\\\":\\\"string\\\",\\\"lc_ctype\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"database\\\":\\\"string\\\",\\\"lc_collate\\\":\\\"string\\\",\\\"lc_ctype\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"database\":\"string\",\"lc_collate\":\"string\",\"lc_ctype\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"database\":\"string\",\"lc_collate\":\"string\",\"lc_ctype\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List service databases",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceDatabaseList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDatabaseListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/db/{dbname}": {
      "delete": {
        "summary": "Delete a logical database",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceDatabaseDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/dbname"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDatabaseDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db/%7Bdbname%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db/%7Bdbname%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db/%7Bdbname%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db/%7Bdbname%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db/%7Bdbname%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db/%7Bdbname%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/db/%7Bdbname%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}": {
      "delete": {
        "summary": "Terminate a service",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get service information",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update service configuration",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    cloud: 'string',\n    disk_space_mb: 0,\n    group_name: 'string',\n    karapace: true,\n    maintenance: {dow: 'monday', time: 'stringst'},\n    plan: 'string',\n    powered: true,\n    project_vpc_id: 'stringstringstringstringstringstring',\n    schema_registry_authz: true,\n    termination_protection: true,\n    user_config: {}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"cloud\":\"string\",\"disk_space_mb\":0,\"group_name\":\"string\",\"karapace\":true,\"maintenance\":{\"dow\":\"monday\",\"time\":\"stringst\"},\"plan\":\"string\",\"powered\":true,\"project_vpc_id\":\"stringstringstringstringstringstring\",\"schema_registry_authz\":true,\"termination_protection\":true,\"user_config\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"cloud\":\"string\",\"disk_space_mb\":0,\"group_name\":\"string\",\"karapace\":true,\"maintenance\":{\"dow\":\"monday\",\"time\":\"stringst\"},\"plan\":\"string\",\"powered\":true,\"project_vpc_id\":\"stringstringstringstringstringstring\",\"schema_registry_authz\":true,\"termination_protection\":true,\"user_config\":{}}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"cloud\\\":\\\"string\\\",\\\"disk_space_mb\\\":0,\\\"group_name\\\":\\\"string\\\",\\\"karapace\\\":true,\\\"maintenance\\\":{\\\"dow\\\":\\\"monday\\\",\\\"time\\\":\\\"stringst\\\"},\\\"plan\\\":\\\"string\\\",\\\"powered\\\":true,\\\"project_vpc_id\\\":\\\"stringstringstringstringstringstring\\\",\\\"schema_registry_authz\\\":true,\\\"termination_protection\\\":true,\\\"user_config\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"cloud\\\":\\\"string\\\",\\\"disk_space_mb\\\":0,\\\"group_name\\\":\\\"string\\\",\\\"karapace\\\":true,\\\"maintenance\\\":{\\\"dow\\\":\\\"monday\\\",\\\"time\\\":\\\"stringst\\\"},\\\"plan\\\":\\\"string\\\",\\\"powered\\\":true,\\\"project_vpc_id\\\":\\\"stringstringstringstringstringstring\\\",\\\"schema_registry_authz\\\":true,\\\"termination_protection\\\":true,\\\"user_config\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"cloud\":\"string\",\"disk_space_mb\":0,\"group_name\":\"string\",\"karapace\":true,\"maintenance\":{\"dow\":\"monday\",\"time\":\"stringst\"},\"plan\":\"string\",\"powered\":true,\"project_vpc_id\":\"stringstringstringstringstringstring\",\"schema_registry_authz\":true,\"termination_protection\":true,\"user_config\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"cloud\":\"string\",\"disk_space_mb\":0,\"group_name\":\"string\",\"karapace\":true,\"maintenance\":{\"dow\":\"monday\",\"time\":\"stringst\"},\"plan\":\"string\",\"powered\":true,\"project_vpc_id\":\"stringstringstringstringstringstring\",\"schema_registry_authz\":true,\"termination_protection\":true,\"user_config\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/enable-writes": {
      "post": {
        "summary": "Temporarily enable writes for a service in read-only mode. Will only work if disk usage is lower than 99.0%",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceEnableWrites",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEnableWritesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/enable-writes',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/enable-writes \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/enable-writes \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/enable-writes\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/enable-writes\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/enable-writes');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/enable-writes');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/migration": {
      "get": {
        "summary": "Get migration status",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceGetMigrationStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceGetMigrationStatusResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/migration',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/migration \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/migration \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/migration\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/migration\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/migration');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/migration');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/influxdb/stats": {
      "get": {
        "summary": "List stats for influxdb",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceInfluxDBStats",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInfluxDBStatsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/influxdb/stats',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/influxdb/stats \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/influxdb/stats \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/influxdb/stats\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/influxdb/stats\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/influxdb/stats');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/influxdb/stats');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kms/ca/{ca_name}": {
      "get": {
        "summary": "Retrieve a service CA",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceKmsGetCA",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/ca_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKmsGetCAResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/ca/%7Bca_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/ca/%7Bca_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/ca/%7Bca_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/ca/%7Bca_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/ca/%7Bca_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/ca/%7Bca_name%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/ca/%7Bca_name%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/kms/keypairs/{keypair_name}": {
      "get": {
        "summary": "Retrieve service keypair",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceKmsGetKeypair",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/keypair_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceKmsGetKeypairResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/keypairs/%7Bkeypair_name%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/keypairs/%7Bkeypair_name%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/keypairs/%7Bkeypair_name%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/keypairs/%7Bkeypair_name%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/keypairs/%7Bkeypair_name%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/keypairs/%7Bkeypair_name%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/kms/keypairs/%7Bkeypair_name%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/maintenance/start": {
      "put": {
        "summary": "Start maintenance updates",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceMaintenanceStart",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMaintenanceStartResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/maintenance/start',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/maintenance/start \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/maintenance/start \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/maintenance/start\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/maintenance/start\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/maintenance/start');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/maintenance/start');\n$request->setRequestMethod('PUT');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/metrics": {
      "post": {
        "summary": "Fetch service metrics",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceMetricsFetch",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceMetricsFetchRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceMetricsFetchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/metrics',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {period: 'hour'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/metrics \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"period\":\"hour\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"period\":\"hour\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/metrics \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"period\\\":\\\"hour\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/metrics\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/metrics\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"period\\\":\\\"hour\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/metrics');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"period\":\"hour\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"period\":\"hour\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/metrics');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/aws/connections": {
      "get": {
        "summary": "List VPC Endpoint connections for an AWS Privatelink Endpoint Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAWSConnectionList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSConnectionListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws/connections',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws/connections \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws/connections \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws/connections\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws/connections\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws/connections');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws/connections');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/aws": {
      "post": {
        "summary": "Create an AWS Privatelink Endpoint Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAWSCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAWSCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {principals: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"principals\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"principals\":[\"string\"]}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"principals\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"principals\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"principals\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"principals\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "delete": {
        "summary": "Delete an AWS Privatelink Endpoint Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAWSDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get AWS Privatelink Endpoint Service information",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAWSGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update an AWS Privatelink Endpoint Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAWSUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAWSUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAWSUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {principals: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"principals\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"principals\":[\"string\"]}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"principals\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"principals\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"principals\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"principals\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/aws');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/azure/connections/{privatelink_connection_id}/approve": {
      "post": {
        "summary": "Approve an Azure private endpoint connection pending user approval",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAzureConnectionApproval",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/privatelink_connection_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureConnectionApprovalResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D/approve',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D/approve \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D/approve \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D/approve\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D/approve\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D/approve');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D/approve');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/azure/connections": {
      "get": {
        "summary": "List private endpoint connections for an Azure Privatelink Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAzureConnectionList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureConnectionListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/azure/connections/{privatelink_connection_id}": {
      "put": {
        "summary": "Update a private endpoint connection for an Azure Privatelink Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAzureConnectionUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/privatelink_connection_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAzureConnectionUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureConnectionUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {user_ip_address: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_ip_address\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"user_ip_address\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"user_ip_address\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_ip_address\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"user_ip_address\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_ip_address\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure/connections/%7Bprivatelink_connection_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/privatelink/azure": {
      "post": {
        "summary": "Create an Azure Privatelink Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAzureCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAzureCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {user_subscription_ids: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_subscription_ids\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"user_subscription_ids\":[\"string\"]}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"user_subscription_ids\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_subscription_ids\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"user_subscription_ids\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_subscription_ids\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "delete": {
        "summary": "Delete an Azure Privatelink Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAzureDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get Azure Privatelink Service information",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAzureGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update an Azure Privatelink Service",
        "tags": [
          "Service"
        ],
        "operationId": "ServicePrivatelinkAzureUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePrivatelinkAzureUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePrivatelinkAzureUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "privatelink:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {user_subscription_ids: ['string']},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_subscription_ids\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"user_subscription_ids\":[\"string\"]}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"user_subscription_ids\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_subscription_ids\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"user_subscription_ids\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_subscription_ids\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/privatelink/azure');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/query/activity": {
      "post": {
        "summary": "Fetch current queries for the service",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceQueryActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceQueryActivityRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceQueryActivityResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/activity',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {limit: 1, offset: 0, order_by: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/activity \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/activity \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"limit\\\":1,\\\"offset\\\":0,\\\"order_by\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/activity\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/activity\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"limit\\\":1,\\\"offset\\\":0,\\\"order_by\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/activity');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"limit\":1,\"offset\":0,\"order_by\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/activity');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/query/stats/reset": {
      "put": {
        "summary": "Reset service's query statistics",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceQueryStatisticsReset",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceQueryStatisticsResetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats/reset',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats/reset \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats/reset \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats/reset\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats/reset\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats/reset');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/query/stats/reset');\n$request->setRequestMethod('PUT');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/task": {
      "post": {
        "summary": "Create a new task for service",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceTaskCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceTaskCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTaskCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    dataset_import: {dataset_name: 'pagila'},\n    migration_check: {ignore_dbs: 'string', method: 'dump', source_service_uri: 'string'},\n    target_version: '11',\n    task_type: 'upgrade_check'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"dataset_import\":{\"dataset_name\":\"pagila\"},\"migration_check\":{\"ignore_dbs\":\"string\",\"method\":\"dump\",\"source_service_uri\":\"string\"},\"target_version\":\"11\",\"task_type\":\"upgrade_check\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"dataset_import\":{\"dataset_name\":\"pagila\"},\"migration_check\":{\"ignore_dbs\":\"string\",\"method\":\"dump\",\"source_service_uri\":\"string\"},\"target_version\":\"11\",\"task_type\":\"upgrade_check\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"dataset_import\\\":{\\\"dataset_name\\\":\\\"pagila\\\"},\\\"migration_check\\\":{\\\"ignore_dbs\\\":\\\"string\\\",\\\"method\\\":\\\"dump\\\",\\\"source_service_uri\\\":\\\"string\\\"},\\\"target_version\\\":\\\"11\\\",\\\"task_type\\\":\\\"upgrade_check\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"dataset_import\\\":{\\\"dataset_name\\\":\\\"pagila\\\"},\\\"migration_check\\\":{\\\"ignore_dbs\\\":\\\"string\\\",\\\"method\\\":\\\"dump\\\",\\\"source_service_uri\\\":\\\"string\\\"},\\\"target_version\\\":\\\"11\\\",\\\"task_type\\\":\\\"upgrade_check\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"dataset_import\":{\"dataset_name\":\"pagila\"},\"migration_check\":{\"ignore_dbs\":\"string\",\"method\":\"dump\",\"source_service_uri\":\"string\"},\"target_version\":\"11\",\"task_type\":\"upgrade_check\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"dataset_import\":{\"dataset_name\":\"pagila\"},\"migration_check\":{\"ignore_dbs\":\"string\",\"method\":\"dump\",\"source_service_uri\":\"string\"},\"target_version\":\"11\",\"task_type\":\"upgrade_check\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/task/{task_id}": {
      "get": {
        "summary": "Get task result",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceTaskGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/task_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTaskGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task/%7Btask_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task/%7Btask_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task/%7Btask_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task/%7Btask_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task/%7Btask_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task/%7Btask_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/task/%7Btask_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/user": {
      "post": {
        "summary": "Create a new (sub) user for service",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceUserCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUserCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    access_control: {\n      m3_group: 'string',\n      pg_allow_replication: true,\n      redis_acl_categories: ['string'],\n      redis_acl_channels: ['string'],\n      redis_acl_commands: ['string'],\n      redis_acl_keys: ['string']\n    },\n    authentication: 'null',\n    username: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"access_control\":{\"m3_group\":\"string\",\"pg_allow_replication\":true,\"redis_acl_categories\":[\"string\"],\"redis_acl_channels\":[\"string\"],\"redis_acl_commands\":[\"string\"],\"redis_acl_keys\":[\"string\"]},\"authentication\":\"null\",\"username\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"access_control\":{\"m3_group\":\"string\",\"pg_allow_replication\":true,\"redis_acl_categories\":[\"string\"],\"redis_acl_channels\":[\"string\"],\"redis_acl_commands\":[\"string\"],\"redis_acl_keys\":[\"string\"]},\"authentication\":\"null\",\"username\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"access_control\\\":{\\\"m3_group\\\":\\\"string\\\",\\\"pg_allow_replication\\\":true,\\\"redis_acl_categories\\\":[\\\"string\\\"],\\\"redis_acl_channels\\\":[\\\"string\\\"],\\\"redis_acl_commands\\\":[\\\"string\\\"],\\\"redis_acl_keys\\\":[\\\"string\\\"]},\\\"authentication\\\":\\\"null\\\",\\\"username\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"access_control\\\":{\\\"m3_group\\\":\\\"string\\\",\\\"pg_allow_replication\\\":true,\\\"redis_acl_categories\\\":[\\\"string\\\"],\\\"redis_acl_channels\\\":[\\\"string\\\"],\\\"redis_acl_commands\\\":[\\\"string\\\"],\\\"redis_acl_keys\\\":[\\\"string\\\"]},\\\"authentication\\\":\\\"null\\\",\\\"username\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"access_control\":{\"m3_group\":\"string\",\"pg_allow_replication\":true,\"redis_acl_categories\":[\"string\"],\"redis_acl_channels\":[\"string\"],\"redis_acl_commands\":[\"string\"],\"redis_acl_keys\":[\"string\"]},\"authentication\":\"null\",\"username\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"access_control\":{\"m3_group\":\"string\",\"pg_allow_replication\":true,\"redis_acl_categories\":[\"string\"],\"redis_acl_channels\":[\"string\"],\"redis_acl_commands\":[\"string\"],\"redis_acl_keys\":[\"string\"]},\"authentication\":\"null\",\"username\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/user/{service_username}": {
      "put": {
        "summary": "Modify service user credentials",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceUserCredentialsModify",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/service_username"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUserCredentialsModifyRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserCredentialsModifyResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    access_control: {\n      m3_group: 'string',\n      pg_allow_replication: true,\n      redis_acl_categories: ['string'],\n      redis_acl_channels: ['string'],\n      redis_acl_commands: ['string'],\n      redis_acl_keys: ['string']\n    },\n    authentication: 'null',\n    new_password: 'stringst',\n    operation: 'acknowledge-renewal'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"access_control\":{\"m3_group\":\"string\",\"pg_allow_replication\":true,\"redis_acl_categories\":[\"string\"],\"redis_acl_channels\":[\"string\"],\"redis_acl_commands\":[\"string\"],\"redis_acl_keys\":[\"string\"]},\"authentication\":\"null\",\"new_password\":\"stringst\",\"operation\":\"acknowledge-renewal\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"access_control\":{\"m3_group\":\"string\",\"pg_allow_replication\":true,\"redis_acl_categories\":[\"string\"],\"redis_acl_channels\":[\"string\"],\"redis_acl_commands\":[\"string\"],\"redis_acl_keys\":[\"string\"]},\"authentication\":\"null\",\"new_password\":\"stringst\",\"operation\":\"acknowledge-renewal\"}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"access_control\\\":{\\\"m3_group\\\":\\\"string\\\",\\\"pg_allow_replication\\\":true,\\\"redis_acl_categories\\\":[\\\"string\\\"],\\\"redis_acl_channels\\\":[\\\"string\\\"],\\\"redis_acl_commands\\\":[\\\"string\\\"],\\\"redis_acl_keys\\\":[\\\"string\\\"]},\\\"authentication\\\":\\\"null\\\",\\\"new_password\\\":\\\"stringst\\\",\\\"operation\\\":\\\"acknowledge-renewal\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"access_control\\\":{\\\"m3_group\\\":\\\"string\\\",\\\"pg_allow_replication\\\":true,\\\"redis_acl_categories\\\":[\\\"string\\\"],\\\"redis_acl_channels\\\":[\\\"string\\\"],\\\"redis_acl_commands\\\":[\\\"string\\\"],\\\"redis_acl_keys\\\":[\\\"string\\\"]},\\\"authentication\\\":\\\"null\\\",\\\"new_password\\\":\\\"stringst\\\",\\\"operation\\\":\\\"acknowledge-renewal\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"access_control\":{\"m3_group\":\"string\",\"pg_allow_replication\":true,\"redis_acl_categories\":[\"string\"],\"redis_acl_channels\":[\"string\"],\"redis_acl_commands\":[\"string\"],\"redis_acl_keys\":[\"string\"]},\"authentication\":\"null\",\"new_password\":\"stringst\",\"operation\":\"acknowledge-renewal\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"access_control\":{\"m3_group\":\"string\",\"pg_allow_replication\":true,\"redis_acl_categories\":[\"string\"],\"redis_acl_channels\":[\"string\"],\"redis_acl_commands\":[\"string\"],\"redis_acl_keys\":[\"string\"]},\"authentication\":\"null\",\"new_password\":\"stringst\",\"operation\":\"acknowledge-renewal\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "delete": {
        "summary": "Delete a service user",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceUserDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/service_username"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get details for a single user",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceUserGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/service_username"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/user/{service_username}/credentials/reset": {
      "put": {
        "summary": "Reset service user credentials",
        "tags": [
          "Service"
        ],
        "operationId": "ServiceUserCredentialsReset",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          },
          {
            "$ref": "#/components/parameters/service_username"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUserCredentialsResetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D/credentials/reset',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D/credentials/reset \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http PUT https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D/credentials/reset \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D/credentials/reset\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D/credentials/reset\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D/credentials/reset');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/user/%7Bservice_username%7D/credentials/reset');\n$request->setRequestMethod('PUT');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/integration": {
      "post": {
        "summary": "Create a new service integration",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIntegrationCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    dest_endpoint_id: 'string',\n    dest_project: 'string',\n    dest_service: 'string',\n    integration_type: 'alertmanager',\n    source_endpoint_id: 'string',\n    source_project: 'string',\n    source_service: 'string',\n    user_config: {}\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"dest_endpoint_id\":\"string\",\"dest_project\":\"string\",\"dest_service\":\"string\",\"integration_type\":\"alertmanager\",\"source_endpoint_id\":\"string\",\"source_project\":\"string\",\"source_service\":\"string\",\"user_config\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"dest_endpoint_id\":\"string\",\"dest_project\":\"string\",\"dest_service\":\"string\",\"integration_type\":\"alertmanager\",\"source_endpoint_id\":\"string\",\"source_project\":\"string\",\"source_service\":\"string\",\"user_config\":{}}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/integration \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"dest_endpoint_id\\\":\\\"string\\\",\\\"dest_project\\\":\\\"string\\\",\\\"dest_service\\\":\\\"string\\\",\\\"integration_type\\\":\\\"alertmanager\\\",\\\"source_endpoint_id\\\":\\\"string\\\",\\\"source_project\\\":\\\"string\\\",\\\"source_service\\\":\\\"string\\\",\\\"user_config\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/integration\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"dest_endpoint_id\\\":\\\"string\\\",\\\"dest_project\\\":\\\"string\\\",\\\"dest_service\\\":\\\"string\\\",\\\"integration_type\\\":\\\"alertmanager\\\",\\\"source_endpoint_id\\\":\\\"string\\\",\\\"source_project\\\":\\\"string\\\",\\\"source_service\\\":\\\"string\\\",\\\"user_config\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"dest_endpoint_id\":\"string\",\"dest_project\":\"string\",\"dest_service\":\"string\",\"integration_type\":\"alertmanager\",\"source_endpoint_id\":\"string\",\"source_project\":\"string\",\"source_service\":\"string\",\"user_config\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"dest_endpoint_id\":\"string\",\"dest_project\":\"string\",\"dest_service\":\"string\",\"integration_type\":\"alertmanager\",\"source_endpoint_id\":\"string\",\"source_project\":\"string\",\"source_service\":\"string\",\"user_config\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/integration/{integration_id}": {
      "delete": {
        "summary": "Delete a service integration",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/integration_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get service integration",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/integration_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update a service integration",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/integration_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIntegrationUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {user_config: {}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_config\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"user_config\":{}}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"user_config\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_config\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"user_config\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_config\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration/%7Bintegration_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/integration_endpoint": {
      "post": {
        "summary": "Create a new service integration endpoint",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationEndpointCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIntegrationEndpointCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {endpoint_name: 'string', endpoint_type: 'autoscaler', user_config: {}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"endpoint_name\":\"string\",\"endpoint_type\":\"autoscaler\",\"user_config\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"endpoint_name\":\"string\",\"endpoint_type\":\"autoscaler\",\"user_config\":{}}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"endpoint_name\\\":\\\"string\\\",\\\"endpoint_type\\\":\\\"autoscaler\\\",\\\"user_config\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/integration_endpoint\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"endpoint_name\\\":\\\"string\\\",\\\"endpoint_type\\\":\\\"autoscaler\\\",\\\"user_config\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"endpoint_name\":\"string\",\"endpoint_type\":\"autoscaler\",\"user_config\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"endpoint_name\":\"string\",\"endpoint_type\":\"autoscaler\",\"user_config\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List available integration endpoints for project",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationEndpointList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/integration_endpoint\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/integration_endpoint/{integration_endpoint_id}": {
      "delete": {
        "summary": "Delete a service integration endpoint",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationEndpointDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/integration_endpoint_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "Get service integration endpoint",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationEndpointGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/integration_endpoint_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointGetResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update service integration endpoint",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationEndpointUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/integration_endpoint_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceIntegrationEndpointUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {user_config: {}},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_config\":{}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"user_config\":{}}' |  \\\n  http PUT https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"user_config\\\":{}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_config\\\":{}}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"user_config\":{}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_config\":{}}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint/%7Bintegration_endpoint_id%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/integration_endpoint_types": {
      "get": {
        "summary": "List available service integration endpoint types",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationEndpointTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationEndpointTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint_types',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint_types \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint_types \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/integration_endpoint_types\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint_types\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint_types');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_endpoint_types');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/service/{service_name}/integration": {
      "get": {
        "summary": "List available integrations for a service",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/service_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/integration',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/integration \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/integration \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/integration\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/integration\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/integration');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/service/%7Bservice_name%7D/integration');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/integration_types": {
      "get": {
        "summary": "List available service integration types",
        "tags": [
          "Service_Integrations"
        ],
        "operationId": "ServiceIntegrationTypes",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIntegrationTypesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "services:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/integration_types',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/integration_types \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/integration_types \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/integration_types\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/integration_types\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_types');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/integration_types');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/static-ips/{static_ip_address_id}/association": {
      "post": {
        "summary": "Associate a static IP address with a service",
        "tags": [
          "StaticIP"
        ],
        "operationId": "ProjectStaticIPAssociate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/static_ip_address_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStaticIPAssociateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStaticIPAssociateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "static_ips:read",
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {service_name: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"service_name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"service_name\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"service_name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"service_name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"service_name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"service_name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "delete": {
        "summary": "Dissociate a static IP address from a service",
        "tags": [
          "StaticIP"
        ],
        "operationId": "ProjectStaticIPDissociate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/static_ip_address_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStaticIPDissociateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "static_ips:read",
              "projects:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D/association');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/static-ip-availability": {
      "get": {
        "summary": "List static IP address cloud availability and prices for a project",
        "tags": [
          "StaticIP"
        ],
        "operationId": "ProjectStaticIPAvailabilityList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStaticIPAvailabilityListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "static_ips:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/static-ip-availability',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/static-ip-availability \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/static-ip-availability \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/static-ip-availability\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/static-ip-availability\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ip-availability');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ip-availability');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/static-ips/{static_ip_address_id}": {
      "patch": {
        "summary": "Update a static IP address configuration",
        "tags": [
          "StaticIP"
        ],
        "operationId": "ProjectStaticIPPatch",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/static_ip_address_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStaticIPPatchRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStaticIPPatchResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "static_ips:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {termination_protection: true},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"termination_protection\":true}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"termination_protection\":true}' |  \\\n  http PATCH https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"termination_protection\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"termination_protection\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"termination_protection\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"termination_protection\":true}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips/%7Bstatic_ip_address_id%7D');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/static-ips": {
      "post": {
        "summary": "Create static IP address",
        "tags": [
          "StaticIP"
        ],
        "operationId": "StaticIPCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticIPCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticIPCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "static_ips:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/static-ips',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {cloud_name: 'string', termination_protection: true},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/static-ips \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"cloud_name\":\"string\",\"termination_protection\":true}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"cloud_name\":\"string\",\"termination_protection\":true}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/static-ips \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"cloud_name\\\":\\\"string\\\",\\\"termination_protection\\\":true}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/static-ips\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/static-ips\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"cloud_name\\\":\\\"string\\\",\\\"termination_protection\\\":true}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"cloud_name\":\"string\",\"termination_protection\":true}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"cloud_name\":\"string\",\"termination_protection\":true}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List static IP addresses",
        "tags": [
          "StaticIP"
        ],
        "operationId": "StaticIPList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticIPListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "static_ips:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/static-ips',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/static-ips \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/static-ips \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/static-ips\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/static-ips\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/static-ips');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/tickets": {
      "post": {
        "summary": "Create a support ticket",
        "tags": [
          "Ticket"
        ],
        "operationId": "ProjectTicketCreate",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTicketCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTicketCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write",
              "tickets:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/tickets',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    description: 'string',\n    service_name: 'string',\n    severity: 'critical',\n    title: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/tickets \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"description\":\"string\",\"service_name\":\"string\",\"severity\":\"critical\",\"title\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"description\":\"string\",\"service_name\":\"string\",\"severity\":\"critical\",\"title\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/tickets \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"description\\\":\\\"string\\\",\\\"service_name\\\":\\\"string\\\",\\\"severity\\\":\\\"critical\\\",\\\"title\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/tickets\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/tickets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"description\\\":\\\"string\\\",\\\"service_name\\\":\\\"string\\\",\\\"severity\\\":\\\"critical\\\",\\\"title\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tickets');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"description\":\"string\",\"service_name\":\"string\",\"severity\":\"critical\",\"title\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"description\":\"string\",\"service_name\":\"string\",\"severity\":\"critical\",\"title\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tickets');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List support tickets",
        "tags": [
          "Ticket"
        ],
        "operationId": "ProjectTicketList",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTicketListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write",
              "tickets:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/tickets',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/tickets \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/project/%7Bproject%7D/tickets \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/project/%7Bproject%7D/tickets\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/tickets\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tickets');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tickets');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/project/{project}/tickets/{ticket_id}/invite": {
      "post": {
        "summary": "Invite a user to a ticket",
        "tags": [
          "Ticket"
        ],
        "operationId": "ProjectTicketInvite",
        "parameters": [
          {
            "$ref": "#/components/parameters/project"
          },
          {
            "$ref": "#/components/parameters/ticket_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTicketInviteRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTicketInviteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "projects:write",
              "tickets:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/project/%7Bproject%7D/tickets/%7Bticket_id%7D/invite',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {user_email: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/project/%7Bproject%7D/tickets/%7Bticket_id%7D/invite \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"user_email\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"user_email\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/project/%7Bproject%7D/tickets/%7Bticket_id%7D/invite \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"user_email\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/project/%7Bproject%7D/tickets/%7Bticket_id%7D/invite\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/project/%7Bproject%7D/tickets/%7Bticket_id%7D/invite\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"user_email\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tickets/%7Bticket_id%7D/invite');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"user_email\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"user_email\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/project/%7Bproject%7D/tickets/%7Bticket_id%7D/invite');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/access_token": {
      "post": {
        "summary": "Create new access token",
        "tags": [
          "User"
        ],
        "operationId": "AccessTokenCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/access_token',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    description: 'string',\n    extend_when_used: true,\n    max_age_seconds: 600,\n    scopes: ['string']\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/access_token \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"description\":\"string\",\"extend_when_used\":true,\"max_age_seconds\":600,\"scopes\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"description\":\"string\",\"extend_when_used\":true,\"max_age_seconds\":600,\"scopes\":[\"string\"]}' |  \\\n  http POST https://api.aiven.io/v1/access_token \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"description\\\":\\\"string\\\",\\\"extend_when_used\\\":true,\\\"max_age_seconds\\\":600,\\\"scopes\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/access_token\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/access_token\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"description\\\":\\\"string\\\",\\\"extend_when_used\\\":true,\\\"max_age_seconds\\\":600,\\\"scopes\\\":[\\\"string\\\"]}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/access_token');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"description\":\"string\",\"extend_when_used\":true,\"max_age_seconds\":600,\"scopes\":[\"string\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"description\":\"string\",\"extend_when_used\":true,\"max_age_seconds\":600,\"scopes\":[\"string\"]}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/access_token');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "get": {
        "summary": "List all valid access tokens",
        "tags": [
          "User"
        ],
        "operationId": "AccessTokenList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:read",
              "authentication:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/access_token',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/access_token \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/access_token \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/access_token\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/access_token\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/access_token');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/access_token');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/access_token/{token_prefix}": {
      "delete": {
        "summary": "Revoke an access token",
        "tags": [
          "User"
        ],
        "operationId": "AccessTokenRevoke",
        "parameters": [
          {
            "$ref": "#/components/parameters/token_prefix"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenRevokeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/access_token/%7Btoken_prefix%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "put": {
        "summary": "Update an existing access token",
        "tags": [
          "User"
        ],
        "operationId": "AccessTokenUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/token_prefix"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {description: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"description\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"description\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"description\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/access_token/%7Btoken_prefix%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"description\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"description\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/access_token/%7Btoken_prefix%7D');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/password_strength": {
      "post": {
        "summary": "Check password strength for an existing user",
        "tags": [
          "User"
        ],
        "operationId": "CheckPasswordStrengthExistingUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckPasswordStrengthExistingUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPasswordStrengthExistingUserResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/me/password_strength',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {new_password: 'string', old_password: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/me/password_strength \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"new_password\":\"string\",\"old_password\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"new_password\":\"string\",\"old_password\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/me/password_strength \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"new_password\\\":\\\"string\\\",\\\"old_password\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/me/password_strength\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/password_strength\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"new_password\\\":\\\"string\\\",\\\"old_password\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/password_strength');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"new_password\":\"string\",\"old_password\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"new_password\":\"string\",\"old_password\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/password_strength');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/user/password_strength": {
      "post": {
        "summary": "Check password strength for a new user",
        "tags": [
          "User"
        ],
        "operationId": "CheckPasswordStrengthNewUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckPasswordStrengthNewUserRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckPasswordStrengthNewUserResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/user/password_strength',\n  headers: {'content-type': 'application/json'},\n  body: {email: 'string', password: 'string', real_name: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/user/password_strength \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"string\",\"password\":\"string\",\"real_name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"email\":\"string\",\"password\":\"string\",\"real_name\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/user/password_strength \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"email\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v1/user/password_strength\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/user/password_strength\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"email\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/user/password_strength');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"email\":\"string\",\"password\":\"string\",\"real_name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"email\":\"string\",\"password\":\"string\",\"real_name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/user/password_strength');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/2fa": {
      "put": {
        "summary": "Configure two-factor authentication",
        "tags": [
          "User"
        ],
        "operationId": "TwoFactorAuthConfigure",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorAuthConfigureRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthConfigureResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/me/2fa',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {method: 'string', password: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/me/2fa \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"method\":\"string\",\"password\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"method\":\"string\",\"password\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/me/2fa \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"method\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/me/2fa\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/2fa\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"method\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/2fa');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"method\":\"string\",\"password\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"method\":\"string\",\"password\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/2fa');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/2fa/otp": {
      "put": {
        "summary": "Complete one-time password configuration",
        "tags": [
          "User"
        ],
        "operationId": "TwoFactorAuthConfigureOTP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorAuthConfigureOTPRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorAuthConfigureOTPResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/me/2fa/otp',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {otp: 'string', password: 'string', uri: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/me/2fa/otp \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"otp\":\"string\",\"password\":\"string\",\"uri\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"otp\":\"string\",\"password\":\"string\",\"uri\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/me/2fa/otp \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"otp\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"uri\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/me/2fa/otp\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/2fa/otp\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"otp\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"uri\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/2fa/otp');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"otp\":\"string\",\"password\":\"string\",\"uri\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"otp\":\"string\",\"password\":\"string\",\"uri\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/2fa/otp');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/account/invites/accept": {
      "post": {
        "summary": "Accept all invites for a single account",
        "tags": [
          "User"
        ],
        "operationId": "UserAccountInvitesAccept",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountInvitesAcceptRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountInvitesAcceptResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/me/account/invites/accept',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {account_id: 'string', team_id: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/me/account/invites/accept \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"account_id\":\"string\",\"team_id\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"account_id\":\"string\",\"team_id\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/me/account/invites/accept \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"account_id\\\":\\\"string\\\",\\\"team_id\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/me/account/invites/accept\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/account/invites/accept\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"account_id\\\":\\\"string\\\",\\\"team_id\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/account/invites/accept');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"account_id\":\"string\",\"team_id\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"account_id\":\"string\",\"team_id\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/account/invites/accept');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/account/invites": {
      "get": {
        "summary": "List pending account invites",
        "tags": [
          "User"
        ],
        "operationId": "UserAccountInvitesList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountInvitesListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:read",
              "authentication:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/me/account/invites',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/me/account/invites \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/me/account/invites \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/me/account/invites\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/account/invites\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/account/invites');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/account/invites');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/account/invites/reject": {
      "post": {
        "summary": "Reject invite to a team",
        "tags": [
          "User"
        ],
        "operationId": "UserAccountInvitesReject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAccountInvitesRejectRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccountInvitesRejectResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/me/account/invites/reject',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {account_id: 'string', team_id: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/me/account/invites/reject \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"account_id\":\"string\",\"team_id\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"account_id\":\"string\",\"team_id\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/me/account/invites/reject \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"account_id\\\":\\\"string\\\",\\\"team_id\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v1/me/account/invites/reject\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/account/invites/reject\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"account_id\\\":\\\"string\\\",\\\"team_id\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/account/invites/reject');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"account_id\":\"string\",\"team_id\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"account_id\":\"string\",\"team_id\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/account/invites/reject');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/userauth": {
      "post": {
        "summary": "Authenticate user",
        "tags": [
          "User"
        ],
        "operationId": "UserAuth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuthRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/userauth',\n  headers: {'content-type': 'application/json'},\n  body: {email: 'string', otp: 'string', password: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/userauth \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"string\",\"otp\":\"string\",\"password\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"email\":\"string\",\"otp\":\"string\",\"password\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/userauth \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"email\\\":\\\"string\\\",\\\"otp\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v1/userauth\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/userauth\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"email\\\":\\\"string\\\",\\\"otp\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/userauth');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"email\":\"string\",\"otp\":\"string\",\"password\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"email\":\"string\",\"otp\":\"string\",\"password\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/userauth');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/userauth/login_options": {
      "post": {
        "summary": "Get available login options",
        "tags": [
          "User"
        ],
        "operationId": "UserAuthLoginOptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAuthLoginOptionsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthLoginOptionsResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/userauth/login_options',\n  headers: {'content-type': 'application/json'},\n  body: {email: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/userauth/login_options \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"email\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/userauth/login_options \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"email\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v1/userauth/login_options\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/userauth/login_options\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"email\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/userauth/login_options');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"email\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"email\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/userauth/login_options');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/authentication_methods/{user_authentication_method_id}": {
      "delete": {
        "summary": "Delete linked authentication method, and revoke all associated access tokens",
        "tags": [
          "User"
        ],
        "operationId": "UserAuthenticationMethodDelete",
        "parameters": [
          {
            "$ref": "#/components/parameters/user_authentication_method_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationMethodDeleteResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'DELETE',\n  url: 'https://api.aiven.io/v1/me/authentication_methods/%7Buser_authentication_method_id%7D',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.aiven.io/v1/me/authentication_methods/%7Buser_authentication_method_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api.aiven.io/v1/me/authentication_methods/%7Buser_authentication_method_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"DELETE\", \"/v1/me/authentication_methods/%7Buser_authentication_method_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/authentication_methods/%7Buser_authentication_method_id%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/authentication_methods/%7Buser_authentication_method_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/authentication_methods/%7Buser_authentication_method_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/authentication_methods": {
      "get": {
        "summary": "List linked authentication methods",
        "tags": [
          "User"
        ],
        "operationId": "UserAuthenticationMethodsList",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthenticationMethodsListResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/me/authentication_methods',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/me/authentication_methods \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/me/authentication_methods \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/me/authentication_methods\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/authentication_methods\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/authentication_methods');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/authentication_methods');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/user": {
      "post": {
        "summary": "Create a user",
        "tags": [
          "User"
        ],
        "operationId": "UserCreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreateResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/user',\n  headers: {'content-type': 'application/json'},\n  body: {\n    company: 'string',\n    country_code: 'st',\n    credit_code: 'string',\n    email: 'string',\n    email_communication_categories: ['string'],\n    origin: 'string',\n    password: 'string',\n    real_name: 'string',\n    state: 'string',\n    token: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/user \\\n  --header 'content-type: application/json' \\\n  --data '{\"company\":\"string\",\"country_code\":\"st\",\"credit_code\":\"string\",\"email\":\"string\",\"email_communication_categories\":[\"string\"],\"origin\":\"string\",\"password\":\"string\",\"real_name\":\"string\",\"state\":\"string\",\"token\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"company\":\"string\",\"country_code\":\"st\",\"credit_code\":\"string\",\"email\":\"string\",\"email_communication_categories\":[\"string\"],\"origin\":\"string\",\"password\":\"string\",\"real_name\":\"string\",\"state\":\"string\",\"token\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/user \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"company\\\":\\\"string\\\",\\\"country_code\\\":\\\"st\\\",\\\"credit_code\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"email_communication_categories\\\":[\\\"string\\\"],\\\"origin\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\",\\\"state\\\":\\\"string\\\",\\\"token\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v1/user\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/user\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"company\\\":\\\"string\\\",\\\"country_code\\\":\\\"st\\\",\\\"credit_code\\\":\\\"string\\\",\\\"email\\\":\\\"string\\\",\\\"email_communication_categories\\\":[\\\"string\\\"],\\\"origin\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\",\\\"state\\\":\\\"string\\\",\\\"token\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/user');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"company\":\"string\",\"country_code\":\"st\",\"credit_code\":\"string\",\"email\":\"string\",\"email_communication_categories\":[\"string\"],\"origin\":\"string\",\"password\":\"string\",\"real_name\":\"string\",\"state\":\"string\",\"token\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"company\":\"string\",\"country_code\":\"st\",\"credit_code\":\"string\",\"email\":\"string\",\"email_communication_categories\":[\"string\"],\"origin\":\"string\",\"password\":\"string\",\"real_name\":\"string\",\"state\":\"string\",\"token\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/user');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/expire_tokens": {
      "post": {
        "summary": "Expire all authorization tokens",
        "tags": [
          "User"
        ],
        "operationId": "UserExpireTokens",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserExpireTokensResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/me/expire_tokens',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/me/expire_tokens \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/me/expire_tokens \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/me/expire_tokens\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/expire_tokens\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/expire_tokens');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/expire_tokens');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me": {
      "get": {
        "summary": "Get information for the current session's user",
        "tags": [
          "User"
        ],
        "operationId": "UserInfo",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/me',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/me \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/me \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/me\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/me');\n$request->setRequestMethod('GET');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      },
      "patch": {
        "summary": "Edit profile",
        "tags": [
          "User"
        ],
        "operationId": "UserUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PATCH',\n  url: 'https://api.aiven.io/v1/me',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {\n    country: 'string',\n    department: 'string',\n    job_title: 'string',\n    real_name: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.aiven.io/v1/me \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"country\":\"string\",\"department\":\"string\",\"job_title\":\"string\",\"real_name\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"country\":\"string\",\"department\":\"string\",\"job_title\":\"string\",\"real_name\":\"string\"}' |  \\\n  http PATCH https://api.aiven.io/v1/me \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"country\\\":\\\"string\\\",\\\"department\\\":\\\"string\\\",\\\"job_title\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v1/me\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{\\\"country\\\":\\\"string\\\",\\\"department\\\":\\\"string\\\",\\\"job_title\\\":\\\"string\\\",\\\"real_name\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"country\":\"string\",\"department\":\"string\",\"job_title\":\"string\",\"real_name\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"country\":\"string\",\"department\":\"string\",\"job_title\":\"string\",\"real_name\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/me');\n$request->setRequestMethod('PATCH');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/logout": {
      "post": {
        "summary": "Logout user, removing current authentication token",
        "tags": [
          "User"
        ],
        "operationId": "UserLogout",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogoutResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/me/logout',\n  headers: {Authorization: 'Bearer REPLACE_BEARER_TOKEN'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/me/logout \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/me/logout \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"POST\", \"/v1/me/logout\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/logout\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/logout');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/logout');\n$request->setRequestMethod('POST');\n$request->setHeaders([\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/me/password": {
      "put": {
        "summary": "Change user password",
        "tags": [
          "User"
        ],
        "operationId": "UserPasswordChange",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordChangeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordChangeResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "tokenAuth": [],
            "oauth2": [
              "user:write",
              "authentication:write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'PUT',\n  url: 'https://api.aiven.io/v1/me/password',\n  headers: {\n    'content-type': 'application/json',\n    Authorization: 'Bearer REPLACE_BEARER_TOKEN'\n  },\n  body: {new_password: 'string', password: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.aiven.io/v1/me/password \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --data '{\"new_password\":\"string\",\"password\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"new_password\":\"string\",\"password\":\"string\"}' |  \\\n  http PUT https://api.aiven.io/v1/me/password \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"new_password\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PUT\", \"/v1/me/password\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/me/password\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"{\\\"new_password\\\":\\\"string\\\",\\\"password\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"Authorization: Bearer REPLACE_BEARER_TOKEN\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/me/password');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$request->setBody('{\"new_password\":\"string\",\"password\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"new_password\":\"string\",\"password\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/me/password');\n$request->setRequestMethod('PUT');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json',\n  'Authorization' => 'Bearer REPLACE_BEARER_TOKEN'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/user/password_reset/{verification_code}": {
      "post": {
        "summary": "Confirm user password reset",
        "tags": [
          "User"
        ],
        "operationId": "UserPasswordReset",
        "parameters": [
          {
            "$ref": "#/components/parameters/verification_code"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordResetRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordResetResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/user/password_reset/%7Bverification_code%7D',\n  headers: {'content-type': 'application/json'},\n  body: {new_password: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/user/password_reset/%7Bverification_code%7D \\\n  --header 'content-type: application/json' \\\n  --data '{\"new_password\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"new_password\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/user/password_reset/%7Bverification_code%7D \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"new_password\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v1/user/password_reset/%7Bverification_code%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/user/password_reset/%7Bverification_code%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"new_password\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/user/password_reset/%7Bverification_code%7D');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"new_password\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"new_password\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/user/password_reset/%7Bverification_code%7D');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/user/password_reset_request": {
      "post": {
        "summary": "Request user password reset",
        "tags": [
          "User"
        ],
        "operationId": "UserPasswordResetRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordResetRequestRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordResetRequestResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/user/password_reset_request',\n  headers: {'content-type': 'application/json'},\n  body: {email: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/user/password_reset_request \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"string\"}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"email\":\"string\"}' |  \\\n  http POST https://api.aiven.io/v1/user/password_reset_request \\\n  content-type:application/json"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\npayload = \"{\\\"email\\\":\\\"string\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/v1/user/password_reset_request\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/user/password_reset_request\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"email\\\":\\\"string\\\"}\",\n  CURLOPT_HTTPHEADER => [\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/user/password_reset_request');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$request->setBody('{\"email\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"email\":\"string\"}');\n\n$request->setRequestUrl('https://api.aiven.io/v1/user/password_reset_request');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders([\n  'content-type' => 'application/json'\n]);\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/user/verify_email/{verification_code}": {
      "post": {
        "summary": "Confirm user email address",
        "tags": [
          "User"
        ],
        "operationId": "UserVerifyEmail",
        "parameters": [
          {
            "$ref": "#/components/parameters/verification_code"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVerifyEmailResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'POST',\n  url: 'https://api.aiven.io/v1/user/verify_email/%7Bverification_code%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.aiven.io/v1/user/verify_email/%7Bverification_code%7D"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http POST https://api.aiven.io/v1/user/verify_email/%7Bverification_code%7D"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"POST\", \"/v1/user/verify_email/%7Bverification_code%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/user/verify_email/%7Bverification_code%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/user/verify_email/%7Bverification_code%7D');\n$request->setMethod(HTTP_METH_POST);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/user/verify_email/%7Bverification_code%7D');\n$request->setRequestMethod('POST');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    },
    "/user/credit_code/{credit_code}": {
      "get": {
        "summary": "Validate campaign credit code",
        "tags": [
          "User"
        ],
        "operationId": "ValidateCreditCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/credit_code"
          }
        ],
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateCreditCodeResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Node + Request",
            "source": "const request = require('request');\n\nconst options = {\n  method: 'GET',\n  url: 'https://api.aiven.io/v1/user/credit_code/%7Bcredit_code%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.aiven.io/v1/user/credit_code/%7Bcredit_code%7D"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api.aiven.io/v1/user/credit_code/%7Bcredit_code%7D"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api.aiven.io\")\n\nconn.request(\"GET\", \"/v1/user/credit_code/%7Bcredit_code%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Php + Curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://api.aiven.io/v1/user/credit_code/%7Bcredit_code%7D\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php + Http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://api.aiven.io/v1/user/credit_code/%7Bcredit_code%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php + Http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://api.aiven.io/v1/user/credit_code/%7Bcredit_code%7D');\n$request->setRequestMethod('GET');\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.aiven.io/v1"
    }
  ],
  "tags": [
    {
      "name": "Account",
      "x-displayName": "Account"
    },
    {
      "name": "BillingGroup",
      "x-displayName": "BillingGroup"
    },
    {
      "name": "",
      "x-displayName": "Cloud"
    },
    {
      "name": "Payment",
      "x-displayName": "Payment"
    },
    {
      "name": "Project",
      "x-displayName": "Project"
    },
    {
      "name": "Project_Billing",
      "x-displayName": "Project Billing"
    },
    {
      "name": "Project_Key_Management",
      "x-displayName": "Project Key Management"
    },
    {
      "name": "Service:_ClickHouse",
      "x-displayName": "Service: ClickHouse"
    },
    {
      "name": "Service:_Elasticsearch",
      "x-displayName": "Service: Elasticsearch"
    },
    {
      "name": "Service:_Flink",
      "x-displayName": "Service: Flink"
    },
    {
      "name": "Service:_Kafka",
      "x-displayName": "Service: Kafka"
    },
    {
      "name": "Service:_Kafka_MirrorMaker",
      "x-displayName": "Service: Kafka MirrorMaker"
    },
    {
      "name": "Service:_MySQL",
      "x-displayName": "Service: MySQL"
    },
    {
      "name": "Service:_OpenSearch",
      "x-displayName": "Service: OpenSearch"
    },
    {
      "name": "Service:_PostgreSQL",
      "x-displayName": "Service: PostgreSQL"
    },
    {
      "name": "Service",
      "x-displayName": "Service"
    },
    {
      "name": "Service_Integrations",
      "x-displayName": "Service Integrations"
    },
    {
      "name": "StaticIP",
      "x-displayName": "StaticIP"
    },
    {
      "name": "Ticket",
      "x-displayName": "Ticket"
    },
    {
      "name": "User",
      "x-displayName": "User"
    }
  ]
}